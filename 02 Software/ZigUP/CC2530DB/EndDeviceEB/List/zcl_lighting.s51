///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              20/Nov/2021  20:16:47
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\Z-Stack Home 1.2.2a.44539\Components\stack\zcl\zcl_lighting.c
//    Command line       =  
//        -f C:\Users\tatbo\AppData\Local\Temp\EWD22D.tmp ("D:\Z-Stack Home
//        1.2.2a.44539\Components\stack\zcl\zcl_lighting.c" -D SECURE=1 -D
//        HAL_KEY=FALSE -D HAL_LED=FALSE -D HAL_LCD=FALSE -D HAL_UART=FALSE -D
//        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xHOLD_AUTO_START -D
//        ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
//        LCD_SUPPORTED=FALSE -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_REPORT -D xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY
//        -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D
//        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D ZCL_DOORLOCK -lC
//        "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List"
//        -lA "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\" -I
//        "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\Source\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\Source\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List\zcl_lighting.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_lighting

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V1
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SS_SHR
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_Z

        PUBLIC `??zclLighting_ColorControl_Send_MoveColorCmd::?`
        FUNCTION `??zclLighting_ColorControl_Send_MoveColorCmd::?`,0203H
        PUBLIC `??zclLighting_ColorControl_Send_MoveHueCmd::?re`
        FUNCTION `??zclLighting_ColorControl_Send_MoveHueCmd::?re`,0203H
        PUBLIC ??zclLighting_ColorControl_Send_MoveSaturationC
        FUNCTION ??zclLighting_ColorControl_Send_MoveSaturationC,0203H
        PUBLIC `??zclLighting_ColorControl_Send_MoveToColorCmd:`
        FUNCTION `??zclLighting_ColorControl_Send_MoveToColorCmd:`,0203H
        PUBLIC ??zclLighting_ColorControl_Send_MoveToColorTemp
        FUNCTION ??zclLighting_ColorControl_Send_MoveToColorTemp,0203H
        PUBLIC ??zclLighting_ColorControl_Send_MoveToHueAndSat
        FUNCTION ??zclLighting_ColorControl_Send_MoveToHueAndSat,0203H
        PUBLIC `??zclLighting_ColorControl_Send_MoveToHueCmd::?`
        FUNCTION `??zclLighting_ColorControl_Send_MoveToHueCmd::?`,0203H
        PUBLIC ??zclLighting_ColorControl_Send_MoveToSaturatio
        FUNCTION ??zclLighting_ColorControl_Send_MoveToSaturatio,0203H
        PUBLIC `??zclLighting_ColorControl_Send_StepColorCmd::?`
        FUNCTION `??zclLighting_ColorControl_Send_StepColorCmd::?`,0203H
        PUBLIC `??zclLighting_ColorControl_Send_StepHueCmd::?re`
        FUNCTION `??zclLighting_ColorControl_Send_StepHueCmd::?re`,0203H
        PUBLIC ??zclLighting_ColorControl_Send_StepSaturationC
        FUNCTION ??zclLighting_ColorControl_Send_StepSaturationC,0203H
        FUNCTION `??zclLighting_HdlIncoming::?relay`,0203H
        FUNCTION ??zclLighting_ProcessInCmd_ColorControl_MoveToC,0203H
        FUNCTION `??zclLighting_ProcessInColorControlCmds::?relay`,0203H
        PUBLIC `??zclLighting_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclLighting_RegisterCmdCallbacks::?relay`,0203H
        PUBLIC zclLighting_ColorControl_Send_MoveColorCmd
        FUNCTION zclLighting_ColorControl_Send_MoveColorCmd,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC zclLighting_ColorControl_Send_MoveHueCmd
        FUNCTION zclLighting_ColorControl_Send_MoveHueCmd,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC zclLighting_ColorControl_Send_MoveSaturationCmd
        FUNCTION zclLighting_ColorControl_Send_MoveSaturationCmd,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC zclLighting_ColorControl_Send_MoveToColorCmd
        FUNCTION zclLighting_ColorControl_Send_MoveToColorCmd,0a1203H
        ARGFRAME XSTACK, 6, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC zclLighting_ColorControl_Send_MoveToColorTemperatureCmd
        FUNCTION zclLighting_ColorControl_Send_MoveToColorTemperatureCmd,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd
        FUNCTION zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC zclLighting_ColorControl_Send_MoveToHueCmd
        FUNCTION zclLighting_ColorControl_Send_MoveToHueCmd,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC zclLighting_ColorControl_Send_MoveToSaturationCmd
        FUNCTION zclLighting_ColorControl_Send_MoveToSaturationCmd,0a1203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC zclLighting_ColorControl_Send_StepColorCmd
        FUNCTION zclLighting_ColorControl_Send_StepColorCmd,0a1203H
        ARGFRAME XSTACK, 6, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC zclLighting_ColorControl_Send_StepHueCmd
        FUNCTION zclLighting_ColorControl_Send_StepHueCmd,0a1203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC zclLighting_ColorControl_Send_StepSaturationCmd
        FUNCTION zclLighting_ColorControl_Send_StepSaturationCmd,0a1203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        FUNCTION zclLighting_HdlIncoming,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclLighting_ProcessInCmd_ColorControl_MoveToColor,0203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        FUNCTION zclLighting_ProcessInColorControlCmds,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC zclLighting_RegisterCmdCallbacks
        FUNCTION zclLighting_RegisterCmdCallbacks,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
zcl_SendCommand     SYMBOL "zcl_SendCommand"
`??zcl_SendCommand::?relay` SYMBOL "?relay", zcl_SendCommand
zcl_registerPlugin  SYMBOL "zcl_registerPlugin"
`??zcl_registerPlugin::?relay` SYMBOL "?relay", zcl_registerPlugin
zclLighting_ColorControl_Send_MoveColorCmd SYMBOL "zclLighting_ColorControl_Send_MoveColorCmd"
`??zclLighting_ColorControl_Send_MoveColorCmd::?` SYMBOL "?relay", zclLighting_ColorControl_Send_MoveColorCmd
zclLighting_ColorControl_Send_MoveHueCmd SYMBOL "zclLighting_ColorControl_Send_MoveHueCmd"
`??zclLighting_ColorControl_Send_MoveHueCmd::?re` SYMBOL "?relay", zclLighting_ColorControl_Send_MoveHueCmd
zclLighting_ColorControl_Send_MoveSaturationCmd SYMBOL "zclLighting_ColorControl_Send_MoveSaturationCmd"
??zclLighting_ColorControl_Send_MoveSaturationC SYMBOL "?relay", zclLighting_ColorControl_Send_MoveSaturationCmd
zclLighting_ColorControl_Send_MoveToColorCmd SYMBOL "zclLighting_ColorControl_Send_MoveToColorCmd"
`??zclLighting_ColorControl_Send_MoveToColorCmd:` SYMBOL "?relay", zclLighting_ColorControl_Send_MoveToColorCmd
zclLighting_ColorControl_Send_MoveToColorTemperatureCmd SYMBOL "zclLighting_ColorControl_Send_MoveToColorTemperatureCmd"
??zclLighting_ColorControl_Send_MoveToColorTemp SYMBOL "?relay", zclLighting_ColorControl_Send_MoveToColorTemperatureCmd
zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd SYMBOL "zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd"
??zclLighting_ColorControl_Send_MoveToHueAndSat SYMBOL "?relay", zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd
zclLighting_ColorControl_Send_MoveToHueCmd SYMBOL "zclLighting_ColorControl_Send_MoveToHueCmd"
`??zclLighting_ColorControl_Send_MoveToHueCmd::?` SYMBOL "?relay", zclLighting_ColorControl_Send_MoveToHueCmd
zclLighting_ColorControl_Send_MoveToSaturationCmd SYMBOL "zclLighting_ColorControl_Send_MoveToSaturationCmd"
??zclLighting_ColorControl_Send_MoveToSaturatio SYMBOL "?relay", zclLighting_ColorControl_Send_MoveToSaturationCmd
zclLighting_ColorControl_Send_StepColorCmd SYMBOL "zclLighting_ColorControl_Send_StepColorCmd"
`??zclLighting_ColorControl_Send_StepColorCmd::?` SYMBOL "?relay", zclLighting_ColorControl_Send_StepColorCmd
zclLighting_ColorControl_Send_StepHueCmd SYMBOL "zclLighting_ColorControl_Send_StepHueCmd"
`??zclLighting_ColorControl_Send_StepHueCmd::?re` SYMBOL "?relay", zclLighting_ColorControl_Send_StepHueCmd
zclLighting_ColorControl_Send_StepSaturationCmd SYMBOL "zclLighting_ColorControl_Send_StepSaturationCmd"
??zclLighting_ColorControl_Send_StepSaturationC SYMBOL "?relay", zclLighting_ColorControl_Send_StepSaturationCmd
zclLighting_RegisterCmdCallbacks SYMBOL "zclLighting_RegisterCmdCallbacks"
`??zclLighting_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclLighting_RegisterCmdCallbacks

        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??zcl_SendCommand::?relay`
        FUNCTION `??zcl_SendCommand::?relay`,00H
        EXTERN `??zcl_registerPlugin::?relay`
        FUNCTION `??zcl_registerPlugin::?relay`,00H
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerPlugin
        FUNCTION zcl_registerPlugin,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\Z-Stack Home 1.2.2a.44539\Components\stack\zcl\zcl_lighting.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_lighting.c
//    3   Revised:        $Date: 2013-07-03 15:56:37 -0700 (Wed, 03 Jul 2013) $
//    4   Revision:       $Revision: 34689 $
//    5 
//    6   Description:    Zigbee Cluster Library -  Lighting
//    7 
//    8 
//    9   Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "zcl.h"
//   44 #include "zcl_general.h"
//   45 #include "zcl_lighting.h"
//   46 
//   47 #if defined ( INTER_PAN )
//   48   #include "stub_aps.h"
//   49 #endif
//   50 
//   51 /*********************************************************************
//   52  * MACROS
//   53  */
//   54 
//   55 /*********************************************************************
//   56  * CONSTANTS
//   57  */
//   58 
//   59 /*********************************************************************
//   60  * TYPEDEFS
//   61  */
//   62 typedef struct zclLightingCBRec
//   63 {
//   64   struct zclLightingCBRec     *next;
//   65   uint8                       endpoint; // Used to link it into the endpoint descriptor
//   66   zclLighting_AppCallbacks_t  *CBs;     // Pointer to Callback function
//   67 } zclLightingCBRec_t;
//   68 
//   69 /*********************************************************************
//   70  * GLOBAL VARIABLES
//   71  */
//   72 
//   73 /*********************************************************************
//   74  * GLOBAL FUNCTIONS
//   75  */
//   76 
//   77 /*********************************************************************
//   78  * LOCAL VARIABLES
//   79  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   80 static zclLightingCBRec_t *zclLightingCBs = (zclLightingCBRec_t *)NULL;
zclLightingCBs:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   81 static uint8 zclLightingPluginRegisted = FALSE;
zclLightingPluginRegisted:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   82 
//   83 /*********************************************************************
//   84  * LOCAL FUNCTIONS
//   85  */
//   86 static ZStatus_t zclLighting_HdlIncoming( zclIncoming_t *pInHdlrMsg );
//   87 static ZStatus_t zclLighting_HdlInSpecificCommands( zclIncoming_t *pInMsg );
//   88 static zclLighting_AppCallbacks_t *zclLighting_FindCallbacks( uint8 endpoint );
//   89 
//   90 static ZStatus_t zclLighting_ProcessInColorControlCmds( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
//   91 
//   92 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToHue( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
//   93 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveHue( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
//   94 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_StepHue( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
//   95 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToSaturation( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
//   96 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveSaturation( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
//   97 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_StepSaturation( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
//   98 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToHueAndSaturation( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
//   99 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToColor( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
//  100 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveColor( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
//  101 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_StepColor( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
//  102 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToColorTemperature( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
//  103 #ifdef ZCL_LIGHT_LINK_ENHANCE
//  104 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHue( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
//  105 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedMoveHue( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
//  106 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedStepHue( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
//  107 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHueAndSaturation( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
//  108 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_ColorLoopSet( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
//  109 #endif // ZCL_LIGHT_LINK_ENHANCE
//  110 
//  111 /*********************************************************************
//  112  * @fn      zclLighting_RegisterCmdCallbacks
//  113  *
//  114  * @brief   Register an applications command callbacks
//  115  *
//  116  * @param   endpoint - application's endpoint
//  117  * @param   callbacks - pointer to the callback record.
//  118  *
//  119  * @return  ZMemError if not able to allocate
//  120  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  121 ZStatus_t zclLighting_RegisterCmdCallbacks( uint8 endpoint, zclLighting_AppCallbacks_t *callbacks )
zclLighting_RegisterCmdCallbacks:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclLighting_RegisterCmdCallbacks
        CODE
//  122 {
        FUNCALL zclLighting_RegisterCmdCallbacks, zcl_registerPlugin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclLighting_RegisterCmdCallbacks, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  123   zclLightingCBRec_t *pNewItem;
//  124   zclLightingCBRec_t *pLoop;
//  125 
//  126   // Register as a ZCL Plugin
//  127   if ( zclLightingPluginRegisted == FALSE )
        MOV       DPTR,#zclLightingPluginRegisted
        MOVX      A,@DPTR
        JNZ       ??zclLighting_RegisterCmdCallbacks_0
//  128   {
//  129     zcl_registerPlugin( ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  130                         ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG,
//  131                         zclLighting_HdlIncoming );
        ; Setup parameters for call to function zcl_registerPlugin
        MOV       ?V2,#`??zclLighting_HdlIncoming::?relay` & 0xff
        MOV       ?V3,#(`??zclLighting_HdlIncoming::?relay` >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x1
        MOV       R5,#0x3
        MOV       R2,#0x0
        MOV       R3,#0x3
        LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  132     zclLightingPluginRegisted = TRUE;
        MOV       DPTR,#zclLightingPluginRegisted
        MOV       A,#0x1
        MOVX      @DPTR,A
//  133   }
//  134 
//  135   // Fill in the new profile list
//  136   pNewItem = zcl_mem_alloc( sizeof( zclLightingCBRec_t ) );
??zclLighting_RegisterCmdCallbacks_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x5
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
//  137   if ( pNewItem == NULL )
        MOV       A,R0
        ORL       A,R1
        JNZ       ??zclLighting_RegisterCmdCallbacks_1
//  138     return (ZMemError);
        MOV       R1,#0x10
        SJMP      ??zclLighting_RegisterCmdCallbacks_2
//  139 
//  140   pNewItem->next = (zclLightingCBRec_t *)NULL;
??zclLighting_RegisterCmdCallbacks_1:
        MOV       DPL,R0
        MOV       DPH,R1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ??Subroutine46_0 & 0xFFFF
//  141   pNewItem->endpoint = endpoint;
??CrossCallReturnLabel_94:
        MOV       A,?V0
        LCALL     ??Subroutine46_0 & 0xFFFF
//  142   pNewItem->CBs = callbacks;
??CrossCallReturnLabel_95:
        INC       DPTR
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  143 
//  144   // Find spot in list
//  145   if ( zclLightingCBs == NULL )
        MOV       DPTR,#zclLightingCBs
        LCALL     ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_104:
        MOV       DPTR,#zclLightingCBs
        JZ        ??zclLighting_RegisterCmdCallbacks_3
//  146   {
//  147     zclLightingCBs = pNewItem;
//  148   }
//  149   else
//  150   {
//  151     // Look for end of list
//  152     pLoop = zclLightingCBs;
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        SJMP      ??zclLighting_RegisterCmdCallbacks_4
//  153     while ( pLoop->next != NULL )
//  154       pLoop = pLoop->next;
??zclLighting_RegisterCmdCallbacks_5:
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
??zclLighting_RegisterCmdCallbacks_4:
        MOV       R5,A
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_105:
        JNZ       ??zclLighting_RegisterCmdCallbacks_5
//  155 
//  156     // Put new item at end of list
//  157     pLoop->next = pNewItem;
        MOV       DPL,R4
        MOV       DPH,R5
??zclLighting_RegisterCmdCallbacks_3:
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  158   }
//  159 
//  160   return ( ZSuccess );
        MOV       R1,#0x0
??zclLighting_RegisterCmdCallbacks_2:
        LJMP      ??Subroutine41_0 & 0xFFFF
//  161 }
          CFI EndBlock cfiBlock0
//  162 
//  163 /*********************************************************************
//  164  * @fn      zclLighting_ColorControl_Send_MoveToHueCmd
//  165  *
//  166  * @brief   Call to send out a Move To Hue Command
//  167  *
//  168  * @param   srcEP - Sending application's endpoint
//  169  * @param   dstAddr - where you want the message to go
//  170  * @param   hue - target hue value
//  171  * @param   direction - direction of hue change
//  172  * @param   transitionTime - tame taken to move to the target hue in 1/10 sec increments
//  173  * @param   disableDefaultRsp - whether to disable the Default Response command
//  174  * @param   seqNum - sequence number
//  175  *
//  176  * @return  ZStatus_t
//  177  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  178 ZStatus_t zclLighting_ColorControl_Send_MoveToHueCmd( uint8 srcEP, afAddrType_t *dstAddr,
zclLighting_ColorControl_Send_MoveToHueCmd:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveToHueCmd
        CODE
//  179                                                       uint8 hue, uint8 direction, uint16 transitionTime,
//  180                                                       uint8 disableDefaultRsp, uint8 seqNum )
//  181 {
        FUNCALL zclLighting_ColorControl_Send_MoveToHueCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R4
//  182   uint8 buf[4];
//  183 
//  184   buf[0] = hue;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  185   buf[1] = direction;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R5
        MOVX      @DPTR,A
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine11 & 0xFFFF
//  186   buf[2] = LO_UINT16( transitionTime );
??CrossCallReturnLabel_26:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
//  187   buf[3] = HI_UINT16( transitionTime );
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine25 & 0xFFFF
//  188 
//  189   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  190                           COMMAND_LIGHTING_MOVE_TO_HUE, TRUE,
//  191                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 4, buf );
??CrossCallReturnLabel_83:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V2,#0x4
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,#0x19
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V1,#0x0
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V1,#0x1
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       ?V1,#0x0
        LJMP      ?Subroutine0 & 0xFFFF
//  192 }
          CFI EndBlock cfiBlock1
//  193 
//  194 /*********************************************************************
//  195  * @fn      zclLighting_ColorControl_Send_MoveHueCmd
//  196  *
//  197  * @brief   Call to send out a Move To Hue Command
//  198  *
//  199  * @param   srcEP - Sending application's endpoint
//  200  * @param   dstAddr - where you want the message to go
//  201  * @param   moveMode - LIGHTING_MOVE_HUE_STOP, LIGHTING_MOVE_HUE_UP,
//  202  *                     LIGHTING_MOVE_HUE_DOWN
//  203  * @param   rate - the movement in steps per second, where step is
//  204  *                 a change in the device's hue of one unit
//  205  * @param   disableDefaultRsp - whether to disable the Default Response command
//  206  * @param   seqNum - sequence number
//  207  *
//  208  * @return  ZStatus_t
//  209  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  210 ZStatus_t zclLighting_ColorControl_Send_MoveHueCmd( uint8 srcEP, afAddrType_t *dstAddr,
zclLighting_ColorControl_Send_MoveHueCmd:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveHueCmd
        CODE
//  211                                                     uint8 moveMode, uint8 rate,
//  212                                                     uint8 disableDefaultRsp, uint8 seqNum )
//  213 {
        FUNCALL zclLighting_ColorControl_Send_MoveHueCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R4
//  214   uint8 buf[2];
//  215 
//  216   buf[0] = moveMode;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  217   buf[1] = rate;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R5
        LCALL     ??Subroutine42_0 & 0xFFFF
//  218 
//  219   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  220                           COMMAND_LIGHTING_MOVE_HUE, TRUE,
//  221                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 2, buf );
??CrossCallReturnLabel_86:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V2,#0x2
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V1,#0x0
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V1,#0x1
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  222 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R4,#0x0
        MOV       R5,#0x3
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,#0x2
        LJMP      ??Subroutine40_0 & 0xFFFF
          CFI EndBlock cfiBlock3
//  223 
//  224 /*********************************************************************
//  225  * @fn      zclLighting_ColorControl_Send_StepHueCmd
//  226  *
//  227  * @brief   Call to send out a Step Hue Command
//  228  *
//  229  * @param   srcEP - Sending application's endpoint
//  230  * @param   dstAddr - where you want the message to go
//  231  * @param   stepMode -	LIGHTING_STEP_HUE_UP, LIGHTING_STEP_HUE_DOWN
//  232  * @param   stepSize -  change to the current value of the device's hue
//  233  * @param   transitionTime - the movement in steps per 1/10 second
//  234  * @param   disableDefaultRsp - whether to disable the Default Response command
//  235  * @param   seqNum - sequence number
//  236  *
//  237  * @return  ZStatus_t
//  238  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  239 ZStatus_t zclLighting_ColorControl_Send_StepHueCmd( uint8 srcEP, afAddrType_t *dstAddr,
zclLighting_ColorControl_Send_StepHueCmd:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_StepHueCmd
        CODE
//  240                                   uint8 stepMode, uint8 stepSize, uint8 transitionTime,
//  241                                   uint8 disableDefaultRsp, uint8 seqNum )
//  242 {
        FUNCALL zclLighting_ColorControl_Send_StepHueCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R4
//  243   uint8 buf[3];
//  244 
//  245   buf[0] = stepMode;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  246   buf[1] = stepSize;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R5
        MOVX      @DPTR,A
//  247   buf[2] = transitionTime;
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ??Subroutine42_0 & 0xFFFF
//  248 
//  249   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  250                           COMMAND_LIGHTING_STEP_HUE, TRUE,
//  251                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 3, buf );
??CrossCallReturnLabel_87:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       ?V2,#0x3
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V1,#0x0
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V1,#0x1
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V1,#0x2
          CFI EndBlock cfiBlock4
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  252 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 25)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R4,#0x0
        MOV       R5,#0x3
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,#0x3
        LJMP      ??Subroutine40_0 & 0xFFFF
          CFI EndBlock cfiBlock5
//  253 
//  254 /*********************************************************************
//  255  * @fn      zclLighting_ColorControl_Send_MoveToSaturationCmd
//  256  *
//  257  * @brief   Call to send out a Move To Saturation Command
//  258  *
//  259  * @param   srcEP - Sending application's endpoint
//  260  * @param   dstAddr - where you want the message to go
//  261  * @param   saturation - target saturation value
//  262  * @param   transitionTime - time taken move to the target saturation,
//  263  *                           in 1/10 second units
//  264  * @param   disableDefaultRsp - whether to disable the Default Response command
//  265  * @param   seqNum - sequence number
//  266  *
//  267  * @return  ZStatus_t
//  268  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  269 ZStatus_t zclLighting_ColorControl_Send_MoveToSaturationCmd( uint8 srcEP, afAddrType_t *dstAddr,
zclLighting_ColorControl_Send_MoveToSaturationCmd:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveToSaturationCmd
        CODE
//  270                                          uint8 saturation, uint16 transitionTime,
//  271                                          uint8 disableDefaultRsp, uint8 seqNum )
//  272 {
        FUNCALL zclLighting_ColorControl_Send_MoveToSaturationCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R4
//  273   uint8 buf[3];
//  274 
//  275   buf[0] = saturation;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
//  276   buf[1] = LO_UINT16( transitionTime );
??CrossCallReturnLabel_51:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
//  277   buf[2] = HI_UINT16( transitionTime );
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine25 & 0xFFFF
//  278 
//  279   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  280                           COMMAND_LIGHTING_MOVE_TO_SATURATION, TRUE,
//  281                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 3, buf );
??CrossCallReturnLabel_84:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       ?V2,#0x3
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R5
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V1,#0x0
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V1,#0x1
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V1,#0x3
        LJMP      ?Subroutine4 & 0xFFFF
//  282 }
          CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveToHueCmd
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function zclLighting_ColorControl_Send_MoveToHueCmd
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function zclLighting_ColorControl_Send_MoveHueCmd
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function zclLighting_ColorControl_Send_MoveHueCmd
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function zclLighting_ColorControl_Send_StepHueCmd
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zclLighting_ColorControl_Send_StepHueCmd
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function zclLighting_ColorControl_Send_MoveToSaturationCmd
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function zclLighting_ColorControl_Send_MoveSaturationCmd
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function zclLighting_ColorControl_Send_MoveSaturationCmd
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function zclLighting_ColorControl_Send_StepSaturationCmd
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function zclLighting_ColorControl_Send_StepSaturationCmd
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V1
        RET
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 26)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R4,#0x0
        MOV       R5,#0x3
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,#0x4
          CFI EndBlock cfiBlock21
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock22
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock23
//  283 
//  284 /*********************************************************************
//  285  * @fn      zclLighting_ColorControl_Send_MoveSaturationCmd
//  286  *
//  287  * @brief   Call to send out a Move Saturation Command
//  288  *
//  289  * @param   srcEP - Sending application's endpoint
//  290  * @param   dstAddr - where you want the message to go
//  291  * @param   moveMode - LIGHTING_MOVE_SATURATION_STOP, LIGHTING_MOVE_SATURATION_UP,
//  292  *                     LIGHTING_MOVE_SATURATION_DOWN
//  293  * @param   rate - rate of movement in step/sec; step is the device's saturation of one unit
//  294  * @param   disableDefaultRsp - whether to disable the Default Response command
//  295  * @param   seqNum - sequence number
//  296  *
//  297  * @return  ZStatus_t
//  298  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  299 ZStatus_t zclLighting_ColorControl_Send_MoveSaturationCmd( uint8 srcEP, afAddrType_t *dstAddr,
zclLighting_ColorControl_Send_MoveSaturationCmd:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveSaturationCmd
        CODE
//  300                                                            uint8 moveMode, uint8 rate,
//  301                                                            uint8 disableDefaultRsp, uint8 seqNum )
//  302 {
        FUNCALL zclLighting_ColorControl_Send_MoveSaturationCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R4
//  303   uint8 buf[2];
//  304 
//  305   buf[0] = moveMode;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  306   buf[1] = rate;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R5
        LCALL     ??Subroutine42_0 & 0xFFFF
//  307 
//  308   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  309                           COMMAND_LIGHTING_MOVE_SATURATION, TRUE,
//  310                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 2, buf );
??CrossCallReturnLabel_88:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V2,#0x2
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V1,#0x0
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V1,#0x1
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V1,#0x4
        LJMP      ?Subroutine3 & 0xFFFF
//  311 }
          CFI EndBlock cfiBlock24
//  312 
//  313 /*********************************************************************
//  314  * @fn      zclLighting_ColorControl_Send_StepSaturationCmd
//  315  *
//  316  * @brief   Call to send out a Step Saturation Command
//  317  *
//  318  * @param   srcEP - Sending application's endpoint
//  319  * @param   dstAddr - where you want the message to go
//  320  * @param   stepMode -  LIGHTING_STEP_SATURATION_UP, LIGHTING_STEP_SATURATION_DOWN
//  321  * @param   stepSize -  change to the current value of the device's hue
//  322  * @param   transitionTime - time to perform a single step in 1/10 of second
//  323  * @param   disableDefaultRsp - whether to disable the Default Response command
//  324  * @param   seqNum - sequence number
//  325  *
//  326  * @return  ZStatus_t
//  327  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  328 ZStatus_t zclLighting_ColorControl_Send_StepSaturationCmd( uint8 srcEP, afAddrType_t *dstAddr,
zclLighting_ColorControl_Send_StepSaturationCmd:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_StepSaturationCmd
        CODE
//  329                                          uint8 stepMode, uint8 stepSize, uint8 transitionTime,
//  330                                          uint8 disableDefaultRsp, uint8 seqNum )
//  331 {
        FUNCALL zclLighting_ColorControl_Send_StepSaturationCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R4
//  332   uint8 buf[3];
//  333 
//  334   buf[0] = stepMode;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  335   buf[1] = stepSize;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R5
        MOVX      @DPTR,A
//  336   buf[2] = transitionTime;
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ??Subroutine42_0 & 0xFFFF
//  337 
//  338   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  339                           COMMAND_LIGHTING_STEP_SATURATION, TRUE,
//  340                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 3, buf );
??CrossCallReturnLabel_89:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       ?V2,#0x3
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V1,#0x0
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V1,#0x1
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V1,#0x5
        LJMP      ?Subroutine4 & 0xFFFF
//  341 }
          CFI EndBlock cfiBlock25

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveToHueCmd
          CFI Conditional ??CrossCallReturnLabel_83
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function zclLighting_ColorControl_Send_MoveToSaturationCmd
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        MOV       A,R1
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveHueCmd
          CFI Conditional ??CrossCallReturnLabel_86
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function zclLighting_ColorControl_Send_StepHueCmd
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function zclLighting_ColorControl_Send_MoveSaturationCmd
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function zclLighting_ColorControl_Send_StepSaturationCmd
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function zclLighting_ColorControl_Send_MoveToHueCmd
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function zclLighting_ColorControl_Send_MoveToSaturationCmd
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker37 Using cfiCommon1
          CFI (cfiPicker37) NoFunction
          CFI (cfiPicker37) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        RET
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiPicker37
//  342 
//  343 /*********************************************************************
//  344  * @fn      zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd
//  345  *
//  346  * @brief   Call to send out a Move To Hue And Saturation Command
//  347  *
//  348  * @param   srcEP - Sending application's endpoint
//  349  * @param   dstAddr - where you want the message to go
//  350  * @param   hue - a target hue
//  351  * @param   saturation - a target saturation
//  352  * @param   transitionTime -  time to move, equal of the value of the field in 1/10 seconds
//  353  * @param   disableDefaultRsp - whether to disable the Default Response command
//  354  * @param   seqNum - sequence number
//  355  *
//  356  * @return  ZStatus_t
//  357  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  358 ZStatus_t zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd( uint8 srcEP, afAddrType_t *dstAddr,
zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd
        CODE
//  359                                                    uint8 hue, uint8 saturation, uint16 transitionTime,
//  360                                                    uint8 disableDefaultRsp, uint8 seqNum )
//  361 {
        FUNCALL zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R4
//  362   uint8 buf[4];
//  363 
//  364   buf[0] = hue;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  365   buf[1] = saturation;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R5
        MOVX      @DPTR,A
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine11 & 0xFFFF
//  366   buf[2] = LO_UINT16( transitionTime );
??CrossCallReturnLabel_27:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
//  367   buf[3] = HI_UINT16( transitionTime );
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine25 & 0xFFFF
//  368 
//  369   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  370                           COMMAND_LIGHTING_MOVE_TO_HUE_AND_SATURATION, TRUE,
//  371                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 4, buf );
??CrossCallReturnLabel_85:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V2,#0x4
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,#0x19
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V1,#0x0
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V1,#0x1
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       ?V1,#0x6
        LJMP      ?Subroutine0 & 0xFFFF
//  372 }
          CFI EndBlock cfiBlock38
//  373 
//  374 /*********************************************************************
//  375  * @fn      zclLighting_ColorControl_Send_MoveToColorCmd
//  376  *
//  377  * @brief   Call to send out a Move To Color Command
//  378  *
//  379  * @param   srcEP - Sending application's endpoint
//  380  * @param   dstAddr - where you want the message to go
//  381  * @param   colorX - a target color X
//  382  * @param   colorY - a target color Y
//  383  * @param   transitionTime -  time to move, equal of the value of the field in 1/10 seconds
//  384  * @param   disableDefaultRsp - whether to disable the Default Response command
//  385  * @param   seqNum - sequence number
//  386  *
//  387  * @return  ZStatus_t
//  388  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  389 ZStatus_t zclLighting_ColorControl_Send_MoveToColorCmd( uint8 srcEP, afAddrType_t *dstAddr,
zclLighting_ColorControl_Send_MoveToColorCmd:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveToColorCmd
        CODE
//  390                                        uint16 colorX, uint16 colorY, uint16 transitionTime,
//  391                                        uint8 disableDefaultRsp, uint8 seqNum )
//  392 {
        FUNCALL zclLighting_ColorControl_Send_MoveToColorCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 6
        MOV       A,#-0x6
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
        MOV       R6,A
//  393   uint8 buf[6];
//  394 
//  395   buf[0] = LO_UINT16( colorX );
        MOV       A,R4
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  396   buf[1] = HI_UINT16( colorX );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R5
        MOVX      @DPTR,A
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine11 & 0xFFFF
//  397   buf[2] = LO_UINT16( colorY );
??CrossCallReturnLabel_28:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
//  398   buf[3] = HI_UINT16( colorY );
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
//  399   buf[4] = LO_UINT16( transitionTime );
??CrossCallReturnLabel_52:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
//  400   buf[5] = HI_UINT16( transitionTime );
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine26 & 0xFFFF
//  401 
//  402   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  403                           COMMAND_LIGHTING_MOVE_TO_COLOR, TRUE,
//  404                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 6, buf );
??CrossCallReturnLabel_90:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V0,#0x6
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,#0x19
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       ?V0,#0x7
        LJMP      ?Subroutine1 & 0xFFFF
//  405 }
          CFI EndBlock cfiBlock39

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond40 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveToHueCmd
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function zclLighting_ColorControl_Send_MoveToColorCmd
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function zclLighting_ColorControl_Send_MoveToColorTemperatureCmd
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_70:
        MOV       A,#0x2
        RET
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44
//  406 
//  407 /*********************************************************************
//  408  * @fn      zclLighting_ColorControl_Send_MoveColorCmd
//  409  *
//  410  * @brief   Call to send out a Move Color Command
//  411  *
//  412  * @param   srcEP - Sending application's endpoint
//  413  * @param   dstAddr - where you want the message to go
//  414  * @param   rateX - rate of movement in steps per second. A step is a change
//  415  *                  in the device's CurrentX attribute of one unit.
//  416  * @param   rateY - rate of movement in steps per second. A step is a change
//  417  *                  in the device's CurrentY attribute of one unit.
//  418  * @param   disableDefaultRsp - whether to disable the Default Response command
//  419  * @param   seqNum - sequence number
//  420  *
//  421  * @return  ZStatus_t
//  422  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  423 ZStatus_t zclLighting_ColorControl_Send_MoveColorCmd( uint8 srcEP, afAddrType_t *dstAddr,
zclLighting_ColorControl_Send_MoveColorCmd:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveColorCmd
        CODE
//  424                                                       int16 rateX, int16 rateY,
//  425                                                       uint8 disableDefaultRsp, uint8 seqNum )
//  426 {
        FUNCALL zclLighting_ColorControl_Send_MoveColorCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        LCALL     ?Subroutine30 & 0xFFFF
//  427   uint8 buf[4];
//  428 
//  429   buf[0] = LO_UINT16( rateX );
//  430   buf[1] = HI_UINT16( rateX );
??CrossCallReturnLabel_65:
        LCALL     ?SS_SHR
        INC       A
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        MOVX      @DPTR,A
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine22 & 0xFFFF
//  431   buf[2] = LO_UINT16( rateY );
??CrossCallReturnLabel_55:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        MOVX      @DPTR,A
//  432   buf[3] = HI_UINT16( rateY );
        MOV       A,#0x8
        MOV       R0,#?V0
        LCALL     ?SS_SHR
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        LCALL     ??Subroutine44_0 & 0xFFFF
//  433 
//  434   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  435                           COMMAND_LIGHTING_MOVE_COLOR, TRUE,
//  436                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 4, buf );
??CrossCallReturnLabel_93:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V0,#0x4
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V0,#0x8
          CFI EndBlock cfiBlock45
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5
//  437 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R4,#0x0
        MOV       R5,#0x3
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,#0x4
        SJMP      ??Subroutine43_0
          CFI EndBlock cfiBlock46

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 26)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R4,#0x0
        MOV       R5,#0x3
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,#0x6
          CFI EndBlock cfiBlock47
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine43_0:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Valid
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock48
//  438 
//  439 /*********************************************************************
//  440  * @fn      zclLighting_ColorControl_Send_StepColorCmd
//  441  *
//  442  * @brief   Call to send out a Step Color Command
//  443  *
//  444  * @param   srcEP - Sending application's endpoint
//  445  * @param   dstAddr - where you want the message to go
//  446  * @param   stepX - change to be added to the device's CurrentX attribute
//  447  * @param   stepY - change to be added to the device's CurrentY attribute
//  448  * @param   transitionTime -  time to perform the color change, equal of
//  449  *                            the value of the field in 1/10 seconds
//  450  * @param   disableDefaultRsp - whether to disable the Default Response command
//  451  * @param   seqNum - sequence number
//  452  *
//  453  * @return  ZStatus_t
//  454  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  455 ZStatus_t zclLighting_ColorControl_Send_StepColorCmd( uint8 srcEP, afAddrType_t *dstAddr,
zclLighting_ColorControl_Send_StepColorCmd:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_StepColorCmd
        CODE
//  456                                          int16 stepX, int16 stepY, uint16 transitionTime,
//  457                                          uint8 disableDefaultRsp, uint8 seqNum )
//  458 {
        FUNCALL zclLighting_ColorControl_Send_StepColorCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 6
        MOV       A,#-0x6
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        LCALL     ?Subroutine30 & 0xFFFF
//  459   uint8 buf[6];
//  460 
//  461   buf[0] = LO_UINT16( stepX );
//  462   buf[1] = HI_UINT16( stepX );
??CrossCallReturnLabel_66:
        LCALL     ?SS_SHR
        INC       A
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        MOVX      @DPTR,A
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine22 & 0xFFFF
//  463   buf[2] = LO_UINT16( stepY );
??CrossCallReturnLabel_56:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        MOVX      @DPTR,A
//  464   buf[3] = HI_UINT16( stepY );
        MOV       A,#0x8
        MOV       R0,#?V0
        LCALL     ?SS_SHR
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        MOVX      @DPTR,A
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
//  465   buf[4] = LO_UINT16( transitionTime );
??CrossCallReturnLabel_53:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
//  466   buf[5] = HI_UINT16( transitionTime );
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine26 & 0xFFFF
//  467 
//  468   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  469                           COMMAND_LIGHTING_STEP_COLOR, TRUE,
//  470                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 6, buf );
??CrossCallReturnLabel_91:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V0,#0x6
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,#0x19
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       ?V0,#0x9
        LJMP      ?Subroutine1 & 0xFFFF
//  471 }
          CFI EndBlock cfiBlock49

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond50 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveColorCmd
          CFI Conditional ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function zclLighting_ColorControl_Send_StepColorCmd
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker52 Using cfiCommon1
          CFI (cfiPicker52) NoFunction
          CFI (cfiPicker52) Picker
        MOV       A,R1
        MOV       R6,A
        MOV       A,R4
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       A,#0x8
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond53 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveToColorCmd
          CFI Conditional ??CrossCallReturnLabel_90
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function zclLighting_ColorControl_Send_StepColorCmd
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function zclLighting_ColorControl_Send_MoveToColorTemperatureCmd
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker56 Using cfiCommon1
          CFI (cfiPicker56) NoFunction
          CFI (cfiPicker56) Picker
        MOV       A,R1
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiPicker56
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine44_0:
          CFI Block cfiCond57 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveColorCmd
          CFI Conditional ??CrossCallReturnLabel_93
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function zclLighting_ColorControl_Send_MoveToColorCmd
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function zclLighting_ColorControl_Send_StepColorCmd
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-2
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function zclLighting_ColorControl_Send_MoveToColorTemperatureCmd
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker61 Using cfiCommon1
          CFI (cfiPicker61) NoFunction
          CFI (cfiPicker61) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiPicker61

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveColorCmd
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function zclLighting_ColorControl_Send_StepColorCmd
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-2
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker64 Using cfiCommon1
          CFI (cfiPicker64) NoFunction
          CFI (cfiPicker64) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       A,#0x2
        RET
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiPicker64

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond65 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveToSaturationCmd
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function zclLighting_ColorControl_Send_MoveToColorCmd
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-2
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function zclLighting_ColorControl_Send_StepColorCmd
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-2
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function zclLighting_HdlIncoming
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker69 Using cfiCommon1
          CFI (cfiPicker69) NoFunction
          CFI (cfiPicker69) Picker
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_72:
        RET
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiPicker69

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond70 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveToHueCmd
          CFI Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_27
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-4
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function zclLighting_ColorControl_Send_MoveToColorCmd
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_28
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-4
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function zclLighting_ColorControl_Send_MoveToColorTemperatureCmd
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_29
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-4
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function zclLighting_ColorControl_Send_MoveToSaturationCmd
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_51
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-4
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function zclLighting_ColorControl_Send_MoveToColorCmd
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_52
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-4
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function zclLighting_ColorControl_Send_StepColorCmd
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_53
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-4
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function zclLighting_HdlIncoming
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_54
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-4
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function zclLighting_HdlIncoming
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_40
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-4
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_41
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-4
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function zclLighting_ProcessInCmd_ColorControl_MoveToColor
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_42
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-4
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_15
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-4
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_16
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-4
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_17
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-4
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker84 Using cfiCommon1
          CFI (cfiPicker84) NoFunction
          CFI (cfiPicker84) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiPicker84

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond85 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveToColorCmd
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function zclLighting_ColorControl_Send_MoveToColorCmd
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function zclLighting_ColorControl_Send_MoveColorCmd
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function zclLighting_ColorControl_Send_MoveColorCmd
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function zclLighting_ColorControl_Send_StepColorCmd
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function zclLighting_ColorControl_Send_StepColorCmd
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function zclLighting_ColorControl_Send_MoveToColorTemperatureCmd
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-2
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function zclLighting_ColorControl_Send_MoveToColorTemperatureCmd
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker93 Using cfiCommon1
          CFI (cfiPicker93) NoFunction
          CFI (cfiPicker93) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiPicker93
//  472 
//  473 /*********************************************************************
//  474  * @fn      zclLighting_ColorControl_Send_MoveToColorTemperatureCmd
//  475  *
//  476  * @brief   Call to send out a Move To Color Temperature Command
//  477  *
//  478  * @param   srcEP - Sending application's endpoint
//  479  * @param   dstAddr - where you want the message to go
//  480  * @param   colorTemperature - a target color temperature
//  481  * @param   transitionTime -  time to perform the color change, equal of
//  482  *                            the value of the field in 1/10 seconds
//  483  * @param   disableDefaultRsp - whether to disable the Default Response command
//  484  * @param   seqNum - sequence number
//  485  *
//  486  * @return  ZStatus_t
//  487  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  488 ZStatus_t zclLighting_ColorControl_Send_MoveToColorTemperatureCmd( uint8 srcEP, afAddrType_t *dstAddr,
zclLighting_ColorControl_Send_MoveToColorTemperatureCmd:
          CFI Block cfiBlock94 Using cfiCommon0
          CFI Function zclLighting_ColorControl_Send_MoveToColorTemperatureCmd
        CODE
//  489                                                        uint16 colorTemperature, uint16 transitionTime,
//  490                                                        uint8 disableDefaultRsp, uint8 seqNum )
//  491 {
        FUNCALL zclLighting_ColorControl_Send_MoveToColorTemperatureCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        MOV       R6,A
//  492   uint8 buf[4];
//  493 
//  494   buf[0] = LO_UINT16( colorTemperature );
        MOV       A,R4
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  495   buf[1] = HI_UINT16( colorTemperature );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R5
        MOVX      @DPTR,A
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine11 & 0xFFFF
//  496   buf[2] = LO_UINT16( transitionTime );
??CrossCallReturnLabel_29:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
//  497   buf[3] = HI_UINT16( transitionTime );
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine26 & 0xFFFF
//  498 
//  499   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  500                           COMMAND_LIGHTING_MOVE_TO_COLOR_TEMPERATURE, TRUE,
//  501                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 4, buf );
??CrossCallReturnLabel_92:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V0,#0x4
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V0,#0xa
        LJMP      ?Subroutine5 & 0xFFFF
//  502 }
          CFI EndBlock cfiBlock94
//  503 
//  504 #ifdef ZCL_LIGHT_LINK_ENHANCE
//  505 /*********************************************************************
//  506  * @fn      zclLighting_ColorControl_Send_EnhancedMoveToHueCmd
//  507  *
//  508  * @brief   Call to send out an Enhanced Move To Hue Command
//  509  *
//  510  * @param   srcEP - Sending application's endpoint
//  511  * @param   dstAddr - where you want the message to go
//  512  * @param   enhancedHue - a target extended hue for lamp
//  513  * @param   direction - direction of hue change
//  514  * @param   transitionTime -  time to perform the color change, equal of
//  515  *                            the value of the field in 1/10 seconds
//  516  * @param   disableDefaultRsp - whether to disable the Default Response command
//  517  * @param   seqNum - sequence number
//  518  *
//  519  * @return  ZStatus_t
//  520  */
//  521 ZStatus_t zclLighting_ColorControl_Send_EnhancedMoveToHueCmd( uint8 srcEP, afAddrType_t *dstAddr,
//  522                                                               uint16 enhancedHue, uint8 direction,
//  523                                                               uint16 transitionTime, uint8 disableDefaultRsp,
//  524                                                               uint8 seqNum )
//  525 {
//  526   uint8 buf[5];
//  527 
//  528   buf[0] = LO_UINT16( enhancedHue );
//  529   buf[1] = HI_UINT16( enhancedHue );
//  530   buf[2] = direction;
//  531   buf[3] = LO_UINT16( transitionTime );
//  532   buf[4] = HI_UINT16( transitionTime );
//  533 
//  534   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  535                           COMMAND_LIGHTING_ENHANCED_MOVE_TO_HUE, TRUE,
//  536                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 5, buf );
//  537 }
//  538 
//  539 /*********************************************************************
//  540  * @fn      zclLighting_ColorControl_Send_EnhancedMoveHueCmd
//  541  *
//  542  * @brief   Call to send out an Enhanced Move Hue Command
//  543  *
//  544  * @param   srcEP - Sending application's endpoint
//  545  * @param   dstAddr - where you want the message to go
//  546  * @param   moveMode - LIGHTING_MOVE_HUE_STOP, LIGHTING_MOVE_HUE_UP,
//  547  *                     LIGHTING_MOVE_HUE_DOWN
//  548  * @param   rate - the movement in steps per second, where step is
//  549  *                 a change in the device's hue of one unit
//  550  * @param   disableDefaultRsp - whether to disable the Default Response command
//  551  * @param   seqNum - sequence number
//  552  *
//  553  * @return  ZStatus_t
//  554  */
//  555 ZStatus_t zclLighting_ColorControl_Send_EnhancedMoveHueCmd( uint8 srcEP, afAddrType_t *dstAddr,
//  556                                                             uint8 moveMode, uint16 rate,
//  557                                                             uint8 disableDefaultRsp, uint8 seqNum )
//  558 {
//  559   uint8 buf[3];
//  560 
//  561   buf[0] = moveMode;
//  562   buf[1] = LO_UINT16( rate );
//  563   buf[2] = HI_UINT16( rate );
//  564 
//  565   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  566                           COMMAND_LIGHTING_ENHANCED_MOVE_HUE, TRUE,
//  567                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 3, buf );
//  568 }
//  569 
//  570 /*********************************************************************
//  571  * @fn      zclLighting_ColorControl_Send_EnhancedStepHueCmd
//  572  *
//  573  * @brief   Call to send out an Enhanced Step Hue Command
//  574  *
//  575  * @param   srcEP - Sending application's endpoint
//  576  * @param   dstAddr - where you want the message to go
//  577  * @param   stepMode -	LIGHTING_STEP_HUE_UP, LIGHTING_STEP_HUE_DOWN
//  578  * @param   stepSize -  change to the current value of the device's hue
//  579  * @param   transitionTime - the movement in steps per 1/10 second
//  580  * @param   disableDefaultRsp - whether to disable the Default Response command
//  581  * @param   seqNum - sequence number
//  582  *
//  583  * @return  ZStatus_t
//  584  */
//  585 ZStatus_t zclLighting_ColorControl_Send_EnhancedStepHueCmd( uint8 srcEP, afAddrType_t *dstAddr,
//  586                                   uint8 stepMode, uint16 stepSize, uint16 transitionTime,
//  587                                   uint8 disableDefaultRsp, uint8 seqNum )
//  588 {
//  589   uint8 buf[5];
//  590 
//  591   buf[0] = stepMode;
//  592   buf[1] = LO_UINT16( stepSize );
//  593   buf[2] = HI_UINT16( stepSize );
//  594   buf[3] = LO_UINT16( transitionTime );
//  595   buf[4] = HI_UINT16( transitionTime );
//  596 
//  597   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  598                           COMMAND_LIGHTING_ENHANCED_STEP_HUE, TRUE,
//  599                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 5, buf );
//  600 }
//  601 
//  602 /*********************************************************************
//  603  * @fn      zclLighting_ColorControl_Send_EnhancedMoveToHueAndSaturationCmd
//  604  *
//  605  * @brief   Call to send out an Enhanced Move To Hue And Saturation Command
//  606  *
//  607  * @param   srcEP - Sending application's endpoint
//  608  * @param   dstAddr - where you want the message to go
//  609  * @param   Enhanced hue - a target Enhanced hue for lamp
//  610  * @param   saturation - a target saturation
//  611  * @param   transitionTime -  time to move, equal of the value of the field in 1/10 seconds
//  612  * @param   disableDefaultRsp - whether to disable the Default Response command
//  613  * @param   seqNum - sequence number
//  614  *
//  615  * @return  ZStatus_t
//  616  */
//  617 ZStatus_t zclLighting_ColorControl_Send_EnhancedMoveToHueAndSaturationCmd( uint8 srcEP, afAddrType_t *dstAddr,
//  618                                                   uint16 enhancedHue, uint8 saturation, uint16 transitionTime,
//  619                                                   uint8 disableDefaultRsp, uint8 seqNum )
//  620 {
//  621   uint8 buf[5];
//  622 
//  623   buf[0] = LO_UINT16( enhancedHue );
//  624   buf[1] = HI_UINT16( enhancedHue );
//  625   buf[2] = saturation;
//  626   buf[3] = LO_UINT16( transitionTime );
//  627   buf[4] = HI_UINT16( transitionTime );
//  628 
//  629   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  630                           COMMAND_LIGHTING_ENHANCED_MOVE_TO_HUE_AND_SATURATION, TRUE,
//  631                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 5, buf );
//  632 }
//  633 
//  634 /*********************************************************************
//  635  * @fn      zclLighting_ColorControl_Send_ColorLoopSetCmd
//  636  *
//  637  * @brief   Call to send out a Color Loop Set Command
//  638  *
//  639  * @param   srcEP - Sending application's endpoint
//  640  * @param   dstAddr - where you want the message to go
//  641  * @param   updateFlags - which color loop attributes to update before the color loop is started.
//  642  * @param   action - action to take for the color loop
//  643  * @param   direction - direction for the color loop (decrement or increment)
//  644  * @param   time - number of seconds over which to perform a full color loop
//  645  * @param   startHue - starting hue to use for the color loop
//  646  * @param   disableDefaultRsp - whether to disable the Default Response command
//  647  * @param   seqNum - sequence number
//  648  *
//  649  * @return  ZStatus_t
//  650  */
//  651 ZStatus_t zclLighting_ColorControl_Send_ColorLoopSetCmd(uint8 srcEP, afAddrType_t *dstAddr,
//  652                                                   zclCCColorLoopSet_updateFlags_t updateFlags, uint8 action,
//  653                                                   uint8 direction, uint16 time, uint16 startHue,
//  654                                                   uint8 disableDefaultRsp, uint8 seqNum)
//  655 {
//  656   uint8 buf[7];
//  657 
//  658   buf[0] = updateFlags.byte;
//  659   buf[1] = action;
//  660   buf[2] = direction;
//  661   buf[3] = LO_UINT16( time );
//  662   buf[4] = HI_UINT16( time );
//  663   buf[5] = LO_UINT16( startHue );
//  664   buf[6] = HI_UINT16( startHue );
//  665 
//  666   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  667                           COMMAND_LIGHTING_COLOR_LOOP_SET, TRUE,
//  668                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 7, buf );
//  669 }
//  670 #endif //ZCL_LIGHT_LINK_ENHANCE
//  671 
//  672 /*********************************************************************
//  673  * @fn      zclLighting_FindCallbacks
//  674  *
//  675  * @brief   Find the callbacks for an endpoint
//  676  *
//  677  * @param   endpoint - endpoint to find the application callbacks for
//  678  *
//  679  * @return  pointer to the callbacks
//  680  */
//  681 static zclLighting_AppCallbacks_t *zclLighting_FindCallbacks( uint8 endpoint )
//  682 {
//  683   zclLightingCBRec_t *pCBs;
//  684 
//  685   pCBs = zclLightingCBs;
//  686   while ( pCBs != NULL )
//  687   {
//  688     if ( pCBs->endpoint == endpoint )
//  689       return ( pCBs->CBs );
//  690     pCBs = pCBs->next;
//  691   }
//  692   return ( (zclLighting_AppCallbacks_t *)NULL );
//  693 }
//  694 
//  695 /*********************************************************************
//  696  * @fn      zclLighting_HdlIncoming
//  697  *
//  698  * @brief   Callback from ZCL to process incoming Commands specific
//  699  *          to this cluster library or Profile commands for attributes
//  700  *          that aren't in the attribute list
//  701  *
//  702  * @param   pInMsg - pointer to the incoming message
//  703  *
//  704  * @return  ZStatus_t
//  705  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  706 static ZStatus_t zclLighting_HdlIncoming( zclIncoming_t *pInMsg )
zclLighting_HdlIncoming:
          CFI Block cfiBlock95 Using cfiCommon0
          CFI Function zclLighting_HdlIncoming
        CODE
//  707 {
        FUNCALL zclLighting_HdlIncoming, zclLighting_ProcessInColorControlCmds
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  708   ZStatus_t stat = ZSuccess;
//  709 
//  710 #if defined ( INTER_PAN )
//  711   if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
//  712     return ( stat ); // Cluster not supported thru Inter-PAN
//  713 #endif
//  714   if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        ANL       A,#0x3
        XRL       A,#0x1
        JNZ       ??zclLighting_HdlIncoming_0
//  715   {
//  716     // Is this a manufacturer specific command?
//  717     if ( pInMsg->hdr.fc.manuSpecific == 0 )
        MOV       A,R0
        ANL       A,#0x4
        JNZ       ??zclLighting_HdlIncoming_0
//  718     {
//  719       stat = zclLighting_HdlInSpecificCommands( pInMsg );
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine21 & 0xFFFF
//  720     }
//  721     else
//  722     {
//  723       // We don't support any manufacturer specific command.
//  724       stat = ZFailure;
//  725     }
//  726   }
??CrossCallReturnLabel_54:
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPTR,#zclLightingCBs
??zclLighting_HdlIncoming_1:
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_40:
        JZ        ??zclLighting_HdlIncoming_0
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R4
        MOV       DPL,R0
        MOV       DPH,R1
        JNZ       ??zclLighting_HdlIncoming_1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R4
        ORL       A,R5
        JNZ       ??zclLighting_HdlIncoming_2
??zclLighting_HdlIncoming_0:
        MOV       R1,#0x1
        SJMP      ??zclLighting_HdlIncoming_3
??zclLighting_HdlIncoming_2:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       ??zclLighting_HdlIncoming_4
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x3
??zclLighting_HdlIncoming_4:
        JNZ       ??zclLighting_HdlIncoming_5
        ; Setup parameters for call to function zclLighting_ProcessInColorControlCmds
        LCALL     `??zclLighting_ProcessInColorControlCmds::?relay`; Banked call to: zclLighting_ProcessInColorControlCmds
        MOV       A,R1
        SJMP      ??zclLighting_HdlIncoming_6
??zclLighting_HdlIncoming_5:
        MOV       A,#0x1
??zclLighting_HdlIncoming_6:
        MOV       R1,A
//  727   else
//  728   {
//  729     // Handle all the normal (Read, Write...) commands -- should never get here
//  730     stat = ZFailure;
//  731   }
//  732   return ( stat );
??zclLighting_HdlIncoming_3:
        LJMP      ??Subroutine45_0 & 0xFFFF
//  733 }
          CFI EndBlock cfiBlock95
//  734 
//  735 /*********************************************************************
//  736  * @fn      zclLighting_HdlInSpecificCommands
//  737  *
//  738  * @brief   Callback from ZCL to process incoming Commands specific
//  739  *          to this cluster library
//  740 
//  741  * @param   pInMsg - pointer to the incoming message
//  742  *
//  743  * @return  ZStatus_t
//  744  */
//  745 static ZStatus_t zclLighting_HdlInSpecificCommands( zclIncoming_t *pInMsg )
//  746 {
//  747   ZStatus_t stat = ZSuccess;
//  748   zclLighting_AppCallbacks_t *pCBs;
//  749 
//  750   // make sure endpoint exists
//  751   pCBs = zclLighting_FindCallbacks( pInMsg->msg->endPoint );
//  752   if (pCBs == NULL )
//  753     return ( ZFailure );
//  754 
//  755   switch ( pInMsg->msg->clusterId )
//  756   {
//  757     case ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL:
//  758       stat = zclLighting_ProcessInColorControlCmds( pInMsg, pCBs );
//  759       break;
//  760 
//  761     case ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG:
//  762       // no commands
//  763     default:
//  764       stat = ZFailure;
//  765       break;
//  766   }
//  767 
//  768   return ( stat );
//  769 }
//  770 
//  771 /*********************************************************************
//  772  * @fn      zclLighting_ProcessInColorControlCmds
//  773  *
//  774  * @brief   Callback from ZCL to process incoming Commands specific
//  775  *          to this cluster library on a command ID basis
//  776 
//  777  * @param   pInMsg - pointer to the incoming message
//  778  * @param   pCBs - pointer to the application callbacks
//  779  *
//  780  * @return  ZStatus_t
//  781  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  782 static ZStatus_t zclLighting_ProcessInColorControlCmds( zclIncoming_t *pInMsg,
zclLighting_ProcessInColorControlCmds:
          CFI Block cfiBlock96 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
        CODE
//  783                                              zclLighting_AppCallbacks_t *pCBs )
//  784 {
        FUNCALL zclLighting_ProcessInColorControlCmds, zclLighting_ProcessInCmd_ColorControl_MoveToColor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 15
        MOV       A,#-0xf
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  785   ZStatus_t stat;
//  786 
//  787   switch ( pInMsg->hdr.commandID )
        MOV       A,R2
        ADD       A,#0x8
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??zclLighting_ProcessInColorControlCmds_0
        DEC       A
        JNZ       $+5
        LJMP      ??zclLighting_ProcessInColorControlCmds_1 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclLighting_ProcessInColorControlCmds_2 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclLighting_ProcessInColorControlCmds_3 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclLighting_ProcessInColorControlCmds_4 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclLighting_ProcessInColorControlCmds_5 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclLighting_ProcessInColorControlCmds_6 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclLighting_ProcessInColorControlCmds_7 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclLighting_ProcessInColorControlCmds_8 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclLighting_ProcessInColorControlCmds_9 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclLighting_ProcessInColorControlCmds_10 & 0xFFFF
        LJMP      ??zclLighting_ProcessInColorControlCmds_11 & 0xFFFF
//  788   {
//  789     case COMMAND_LIGHTING_MOVE_TO_HUE:
//  790       stat = zclLighting_ProcessInCmd_ColorControl_MoveToHue( pInMsg, pCBs );
??zclLighting_ProcessInColorControlCmds_0:
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_41:
        JZ        ??zclLighting_ProcessInColorControlCmds_12
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_59:
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_57:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R2
        MOV       R0,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_67:
        JNZ       $+5
        LJMP      ??zclLighting_ProcessInColorControlCmds_13 & 0xFFFF
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       DPL,R4
        MOV       DPH,R5
        LJMP      ??zclLighting_ProcessInColorControlCmds_14 & 0xFFFF
??zclLighting_ProcessInColorControlCmds_12:
        LJMP      ??zclLighting_ProcessInColorControlCmds_11 & 0xFFFF
//  791       break;
//  792 
//  793     case COMMAND_LIGHTING_MOVE_HUE:
//  794       stat = zclLighting_ProcessInCmd_ColorControl_MoveHue( pInMsg, pCBs );
??zclLighting_ProcessInColorControlCmds_1:
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_31:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        JNZ       ??zclLighting_ProcessInColorControlCmds_15
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        JNZ       ??zclLighting_ProcessInColorControlCmds_16
??zclLighting_ProcessInColorControlCmds_15:
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_36:
        JNZ       ??zclLighting_ProcessInColorControlCmds_17
        ; Setup parameters for indirect call
        LJMP      ??zclLighting_ProcessInColorControlCmds_11 & 0xFFFF
//  795       break;
//  796 
//  797     case COMMAND_LIGHTING_STEP_HUE:
//  798       stat = zclLighting_ProcessInCmd_ColorControl_StepHue( pInMsg, pCBs );
??zclLighting_ProcessInColorControlCmds_2:
        MOV       A,R4
        ADD       A,#0x4
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_106:
        JZ        $+5
        LJMP      ??zclLighting_ProcessInColorControlCmds_18 & 0xFFFF
        LJMP      ??zclLighting_ProcessInColorControlCmds_11 & 0xFFFF
//  799       break;
//  800 
//  801     case COMMAND_LIGHTING_MOVE_TO_SATURATION:
//  802       stat = zclLighting_ProcessInCmd_ColorControl_MoveToSaturation( pInMsg, pCBs );
??zclLighting_ProcessInColorControlCmds_3:
        MOV       A,R4
        ADD       A,#0x6
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_107:
        JZ        ??zclLighting_ProcessInColorControlCmds_19
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_33:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_79:
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R4
        MOV       R2,A
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        CPL       A
        JNZ       $+5
        LJMP      ??zclLighting_ProcessInColorControlCmds_13 & 0xFFFF
        ; Setup parameters for indirect call
        SJMP      ??zclLighting_ProcessInColorControlCmds_20
??zclLighting_ProcessInColorControlCmds_19:
        LJMP      ??zclLighting_ProcessInColorControlCmds_11 & 0xFFFF
//  803       break;
//  804 
//  805     case COMMAND_LIGHTING_MOVE_SATURATION:
//  806       stat = zclLighting_ProcessInCmd_ColorControl_MoveSaturation( pInMsg, pCBs );
??zclLighting_ProcessInColorControlCmds_4:
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_32:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        JNZ       ??zclLighting_ProcessInColorControlCmds_21
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        JZ        ??zclLighting_ProcessInColorControlCmds_21
??zclLighting_ProcessInColorControlCmds_16:
        MOV       R1,#-0x7b
        LJMP      ??zclLighting_ProcessInColorControlCmds_22 & 0xFFFF
??zclLighting_ProcessInColorControlCmds_21:
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_37:
        JZ        ??zclLighting_ProcessInColorControlCmds_23
        ; Setup parameters for indirect call
??zclLighting_ProcessInColorControlCmds_17:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP101_8
        LJMP      ??zclLighting_ProcessInColorControlCmds_24 & 0xFFFF
??zclLighting_ProcessInColorControlCmds_23:
        LJMP      ??zclLighting_ProcessInColorControlCmds_11 & 0xFFFF
//  807       break;
//  808 
//  809     case COMMAND_LIGHTING_STEP_SATURATION:
//  810       stat = zclLighting_ProcessInCmd_ColorControl_StepSaturation( pInMsg, pCBs );
??zclLighting_ProcessInColorControlCmds_5:
        MOV       A,R4
        ADD       A,#0xa
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_108:
        JZ        ??zclLighting_ProcessInColorControlCmds_25
??zclLighting_ProcessInColorControlCmds_18:
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_34:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_45:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_73:
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        ; Setup parameters for indirect call
??zclLighting_ProcessInColorControlCmds_20:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        SJMP      ??zclLighting_ProcessInColorControlCmds_26
??zclLighting_ProcessInColorControlCmds_25:
        LJMP      ??zclLighting_ProcessInColorControlCmds_11 & 0xFFFF
//  811       break;
//  812 
//  813     case COMMAND_LIGHTING_MOVE_TO_HUE_AND_SATURATION:
//  814       stat = zclLighting_ProcessInCmd_ColorControl_MoveToHueAndSaturation( pInMsg, pCBs );
??zclLighting_ProcessInColorControlCmds_6:
        MOV       A,R4
        ADD       A,#0xc
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_109:
        JZ        ??zclLighting_ProcessInColorControlCmds_27
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_46:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_47:
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R4
        MOV       R2,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_68:
        JZ        ??zclLighting_ProcessInColorControlCmds_28
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        CPL       A
        JZ        ??zclLighting_ProcessInColorControlCmds_28
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
??zclLighting_ProcessInColorControlCmds_26:
        MOV       DPL,R0
        MOV       DPH,R1
??zclLighting_ProcessInColorControlCmds_14:
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_60:
        LJMP      ??zclLighting_ProcessInColorControlCmds_24 & 0xFFFF
??zclLighting_ProcessInColorControlCmds_28:
        LJMP      ??zclLighting_ProcessInColorControlCmds_13 & 0xFFFF
??zclLighting_ProcessInColorControlCmds_27:
        LJMP      ??zclLighting_ProcessInColorControlCmds_11 & 0xFFFF
//  815       break;
//  816 
//  817     case COMMAND_LIGHTING_MOVE_TO_COLOR:
//  818       stat = zclLighting_ProcessInCmd_ColorControl_MoveToColor( pInMsg, pCBs );
??zclLighting_ProcessInColorControlCmds_7:
        ; Setup parameters for call to function zclLighting_ProcessInCmd_ColorControl_MoveToColor
        LCALL     ??zclLighting_ProcessInCmd_ColorControl_MoveToC; Banked call to: zclLighting_ProcessInCmd_ColorControl_MoveToColor
        LJMP      ??zclLighting_ProcessInColorControlCmds_29 & 0xFFFF
//  819       break;
//  820 
//  821     case COMMAND_LIGHTING_MOVE_COLOR:
//  822       stat = zclLighting_ProcessInCmd_ColorControl_MoveColor( pInMsg, pCBs );
??zclLighting_ProcessInColorControlCmds_8:
        MOV       A,R4
        ADD       A,#0x10
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_15:
        JZ        ??zclLighting_ProcessInColorControlCmds_30
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?CALL_IND
        MOV       R1,#0x0
        SJMP      ??zclLighting_ProcessInColorControlCmds_22
??zclLighting_ProcessInColorControlCmds_30:
        SJMP      ??zclLighting_ProcessInColorControlCmds_11
//  823       break;
//  824 
//  825     case COMMAND_LIGHTING_STEP_COLOR:
//  826       stat = zclLighting_ProcessInCmd_ColorControl_StepColor( pInMsg, pCBs );
??zclLighting_ProcessInColorControlCmds_9:
        MOV       A,R4
        ADD       A,#0x12
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_16:
        JZ        ??zclLighting_ProcessInColorControlCmds_11
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_50:
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_96:
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_97:
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_58:
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R2
        MOV       R0,A
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        ; Setup parameters for indirect call
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP101_8
        SJMP      ??zclLighting_ProcessInColorControlCmds_31
//  827       break;
//  828 
//  829     case COMMAND_LIGHTING_MOVE_TO_COLOR_TEMPERATURE:
//  830       stat = zclLighting_ProcessInCmd_ColorControl_MoveToColorTemperature( pInMsg, pCBs );
??zclLighting_ProcessInColorControlCmds_10:
        MOV       A,R4
        ADD       A,#0x14
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_17:
        JZ        ??zclLighting_ProcessInColorControlCmds_11
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_62:
        JC        ??zclLighting_ProcessInColorControlCmds_32
??zclLighting_ProcessInColorControlCmds_13:
        MOV       R1,#-0x79
        SJMP      ??zclLighting_ProcessInColorControlCmds_22
??zclLighting_ProcessInColorControlCmds_32:
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
??zclLighting_ProcessInColorControlCmds_31:
        MOV       DPL,R4
        MOV       DPH,R5
??zclLighting_ProcessInColorControlCmds_24:
        LCALL     ?CALL_IND
??zclLighting_ProcessInColorControlCmds_29:
        MOV       A,R1
        MOV       R1,A
        SJMP      ??zclLighting_ProcessInColorControlCmds_22
//  831       break;
//  832 
//  833 #ifdef ZCL_LIGHT_LINK_ENHANCE
//  834     case COMMAND_LIGHTING_ENHANCED_MOVE_TO_HUE:
//  835       stat = zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHue( pInMsg, pCBs );
//  836       break;
//  837 
//  838     case COMMAND_LIGHTING_ENHANCED_MOVE_HUE:
//  839       stat = zclLighting_ProcessInCmd_ColorControl_EnhancedMoveHue( pInMsg, pCBs );
//  840       break;
//  841 
//  842     case COMMAND_LIGHTING_ENHANCED_STEP_HUE:
//  843       stat = zclLighting_ProcessInCmd_ColorControl_EnhancedStepHue( pInMsg, pCBs );
//  844       break;
//  845 
//  846     case COMMAND_LIGHTING_ENHANCED_MOVE_TO_HUE_AND_SATURATION:
//  847       stat = zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHueAndSaturation( pInMsg, pCBs );
//  848       break;
//  849 
//  850     case COMMAND_LIGHTING_COLOR_LOOP_SET:
//  851       stat = zclLighting_ProcessInCmd_ColorControl_ColorLoopSet( pInMsg, pCBs );
//  852       break;
//  853 
//  854     case COMMAND_LIGHTING_STOP_MOVE_STEP:
//  855       if ( pCBs->pfnColorControl_StopMoveStep ) // no payload to parse
//  856       {
//  857         stat = pCBs->pfnColorControl_StopMoveStep();
//  858       }
//  859       break;
//  860 #endif // ZCL_LIGHT_LINK_ENHANCE
//  861 
//  862     default:
//  863       // Unknown command
//  864       stat = ZFailure;
??zclLighting_ProcessInColorControlCmds_11:
        MOV       R1,#0x1
//  865       break;
//  866   }
//  867 
//  868   return ( stat );
??zclLighting_ProcessInColorControlCmds_22:
        MOV       A,#0xf
          CFI EndBlock cfiBlock96
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  869 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock97 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock97
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine45_0:
          CFI Block cfiBlock98 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock98

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond99 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_67
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker101 Using cfiCommon1
          CFI (cfiPicker101) NoFunction
          CFI (cfiPicker101) Picker
        MOVX      @DPTR,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        CPL       A
        RET
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiPicker101

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond102 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_96
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker104 Using cfiCommon1
          CFI (cfiPicker104) NoFunction
          CFI (cfiPicker104) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiPicker104
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine46_0:
          CFI Block cfiCond105 Using cfiCommon0
          CFI Function zclLighting_RegisterCmdCallbacks
          CFI Conditional ??CrossCallReturnLabel_94
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function zclLighting_RegisterCmdCallbacks
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker109 Using cfiCommon1
          CFI (cfiPicker109) NoFunction
          CFI (cfiPicker109) Picker
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiPicker109

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond110 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker112 Using cfiCommon1
          CFI (cfiPicker112) NoFunction
          CFI (cfiPicker112) Picker
        LCALL     ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_101:
        RET
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiPicker112

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond113 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker115 Using cfiCommon1
          CFI (cfiPicker115) NoFunction
          CFI (cfiPicker115) Picker
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_76:
        RET
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiPicker115

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond116 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_58
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-4
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_0
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-4
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_1
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-4
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker120 Using cfiCommon1
          CFI (cfiPicker120) NoFunction
          CFI (cfiPicker120) Picker
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiPicker120

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond121 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-2
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker123 Using cfiCommon1
          CFI (cfiPicker123) NoFunction
          CFI (cfiPicker123) Picker
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_100:
        RET
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiPicker123

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond124 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_50
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-4
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_0
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-4
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_1
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-4
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker128 Using cfiCommon1
          CFI (cfiPicker128) NoFunction
          CFI (cfiPicker128) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiPicker128
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine47_0:
          CFI Block cfiCond129 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_37
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-4
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_49
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-4
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_50
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-4
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_0
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-4
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_1
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-4
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker135 Using cfiCommon1
          CFI (cfiPicker135) NoFunction
          CFI (cfiPicker135) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        RET
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiPicker135

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond136 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker138 Using cfiCommon1
          CFI (cfiPicker138) NoFunction
          CFI (cfiPicker138) Picker
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_74:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiPicker138

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond139 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_73
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_45
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-4
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_46
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-4
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker142 Using cfiCommon1
          CFI (cfiPicker142) NoFunction
          CFI (cfiPicker142) Picker
        MOVX      @DPTR,A
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_82:
        INC       DPTR
        RET
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiPicker142

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond143 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-2
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker145 Using cfiCommon1
          CFI (cfiPicker145) NoFunction
          CFI (cfiPicker145) Picker
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_78:
        INC       DPTR
        RET
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiPicker145

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond146 Using cfiCommon0
          CFI Function zclLighting_HdlIncoming
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-2
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function zclLighting_ProcessInCmd_ColorControl_MoveToColor
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-2
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker149 Using cfiCommon1
          CFI (cfiPicker149) NoFunction
          CFI (cfiPicker149) Picker
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_71:
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiPicker149

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond150 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-2
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker152 Using cfiCommon1
          CFI (cfiPicker152) NoFunction
          CFI (cfiPicker152) Picker
        MOVX      @DPTR,A
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_103:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x8
        RET
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiPicker152

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond153 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_39
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-4
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_30
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-4
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_31
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-4
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_32
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-4
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker158 Using cfiCommon1
          CFI (cfiPicker158) NoFunction
          CFI (cfiPicker158) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiPicker158
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine48_0:
          CFI Block cfiCond159 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_60
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-4
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_38
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-4
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_39
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-4
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_30
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-4
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_31
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-4
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_32
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-4
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker166 Using cfiCommon1
          CFI (cfiPicker166) NoFunction
          CFI (cfiPicker166) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiPicker166

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond167 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-2
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker169 Using cfiCommon1
          CFI (cfiPicker169) NoFunction
          CFI (cfiPicker169) Picker
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine47_0 & 0xFFFF
??CrossCallReturnLabel_98:
        MOV       A,DPL
        ORL       A,DPH
        RET
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiPicker169

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond170 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-2
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-2
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker173 Using cfiCommon1
          CFI (cfiPicker173) NoFunction
          CFI (cfiPicker173) Picker
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_81:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiPicker173

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond174 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_73
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_45
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-6
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_46
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-6
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_33
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-4
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_34
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-4
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_35
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-4
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker180 Using cfiCommon1
          CFI (cfiPicker180) NoFunction
          CFI (cfiPicker180) Picker
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R2
        RET
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiPicker180

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond181 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-2
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-2
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker184 Using cfiCommon1
          CFI (cfiPicker184) NoFunction
          CFI (cfiPicker184) Picker
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_102:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiPicker184

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond185 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-2
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-2
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker188 Using cfiCommon1
          CFI (cfiPicker188) NoFunction
          CFI (cfiPicker188) Picker
        MOV       DPL,A
        CLR       A
        ADDC      A,R5
        MOV       DPH,A
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_69:
        MOV       A,R0
        MOV       R4,A
        MOV       A,R1
        MOV       R5,A
        MOV       A,R4
        ORL       A,R5
        RET
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiPicker188

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond189 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_106
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-2
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-2
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-2
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker193 Using cfiCommon1
          CFI (cfiPicker193) NoFunction
          CFI (cfiPicker193) Picker
        MOV       R0,A
        CLR       A
        ADDC      A,R5
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiPicker193
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine49_0:
          CFI Block cfiCond194 Using cfiCommon0
          CFI Function zclLighting_RegisterCmdCallbacks
          CFI Conditional ??CrossCallReturnLabel_104
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function zclLighting_RegisterCmdCallbacks
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-2
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-2
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond197) CFA_SP SP+-2
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond198) CFA_SP SP+-2
          CFI (cfiCond198) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-2
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker200 Using cfiCommon1
          CFI (cfiPicker200) NoFunction
          CFI (cfiPicker200) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        RET
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiPicker200

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond201 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-2
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker203 Using cfiCommon1
          CFI (cfiPicker203) NoFunction
          CFI (cfiPicker203) Picker
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_99:
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R6
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_75:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R2
        MOV       R0,A
        MOV       A,#0x2
        RET
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiPicker203
//  870 
//  871 /*********************************************************************
//  872  * @fn      zclLighting_ProcessInCmd_ColorControl_MoveToHue
//  873  *
//  874  * @brief   Process in the received Move To Hue Command.
//  875  *
//  876  * @param   pInMsg - pointer to the incoming message
//  877  * @param   pCBs - pointer to the application callbacks
//  878  *
//  879  * @return  ZStatus_t
//  880  */
//  881 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToHue( zclIncoming_t *pInMsg,
//  882                                                        zclLighting_AppCallbacks_t *pCBs )
//  883 {
//  884   if ( pCBs->pfnColorControl_MoveToHue )
//  885   {
//  886     zclCCMoveToHue_t cmd;
//  887 
//  888     cmd.hue = pInMsg->pData[0];
//  889     cmd.direction = pInMsg->pData[1];
//  890     cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
//  891 
//  892     if ( cmd.hue > LIGHTING_COLOR_HUE_MAX )
//  893     {
//  894       return ( ZCL_STATUS_INVALID_VALUE );
//  895     }
//  896 
//  897     return ( pCBs->pfnColorControl_MoveToHue( &cmd ) );
//  898   }
//  899 
//  900   return ( ZFailure );
//  901 }
//  902 
//  903 /*********************************************************************
//  904  * @fn      zclLighting_ProcessInCmd_ColorControl_MoveHue
//  905  *
//  906  * @brief   Process in the received Move Hue Command.
//  907  *
//  908  * @param   pInMsg - pointer to the incoming message
//  909  * @param   pCBs - pointer to the application callbacks
//  910  *
//  911  * @return  ZStatus_t
//  912  */
//  913 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveHue( zclIncoming_t *pInMsg,
//  914                                                      zclLighting_AppCallbacks_t *pCBs )
//  915 {
//  916   zclCCMoveHue_t cmd;
//  917 
//  918   cmd.moveMode = pInMsg->pData[0];
//  919   cmd.rate = pInMsg->pData[1];
//  920 
//  921   // If the Rate field has a value of zero, the command has no effect and
//  922   // a Default Response command is sent in response, with the status code
//  923   // set to INVALID_FIELD.
//  924   if ( ( cmd.rate == 0 ) && ( cmd.moveMode != LIGHTING_MOVE_HUE_STOP ) )
//  925   {
//  926     return ( ZCL_STATUS_INVALID_FIELD );
//  927   }
//  928 
//  929   if ( pCBs->pfnColorControl_MoveHue )
//  930     return ( pCBs->pfnColorControl_MoveHue( &cmd ) );
//  931 
//  932   return ( ZFailure );
//  933 }
//  934 
//  935 /*********************************************************************
//  936  * @fn      zclLighting_ProcessInCmd_ColorControl_StepHue
//  937  *
//  938  * @brief   Process in the received Step Hue Command.
//  939  *
//  940  * @param   pInMsg - pointer to the incoming message
//  941  * @param   pCBs - pointer to the application callbacks
//  942  *
//  943  * @return  ZStatus_t
//  944  */
//  945 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_StepHue( zclIncoming_t *pInMsg,
//  946                                                      zclLighting_AppCallbacks_t *pCBs )
//  947 {
//  948   if ( pCBs->pfnColorControl_StepHue )
//  949   {
//  950     zclCCStepHue_t cmd;
//  951 
//  952     cmd.stepMode = pInMsg->pData[0];
//  953     cmd.stepSize = pInMsg->pData[1];
//  954     cmd.transitionTime = pInMsg->pData[2];
//  955 
//  956     return ( pCBs->pfnColorControl_StepHue( &cmd ) );
//  957   }
//  958 
//  959   return ( ZFailure );
//  960 }
//  961 
//  962 /*********************************************************************
//  963  * @fn      zclLighting_ProcessInCmd_ColorControl_MoveToSaturation
//  964  *
//  965  * @brief   Process in the received Move to Saturation Command.
//  966  *
//  967  * @param   pInMsg - pointer to the incoming message
//  968  * @param   pCBs - pointer to the application callbacks
//  969  *
//  970  * @return  ZStatus_t
//  971  */
//  972 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToSaturation( zclIncoming_t *pInMsg,
//  973                                                               zclLighting_AppCallbacks_t *pCBs )
//  974 {
//  975   if ( pCBs->pfnColorControl_MoveToSaturation )
//  976   {
//  977     zclCCMoveToSaturation_t cmd;
//  978 
//  979     cmd.saturation = pInMsg->pData[0];
//  980     cmd.transitionTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
//  981 
//  982     if ( cmd.saturation > LIGHTING_COLOR_SAT_MAX )
//  983     {
//  984       return ( ZCL_STATUS_INVALID_VALUE );
//  985     }
//  986     return ( pCBs->pfnColorControl_MoveToSaturation( &cmd ) );
//  987   }
//  988 
//  989   return ( ZFailure );
//  990 }
//  991 
//  992 /*********************************************************************
//  993  * @fn      zclLighting_ProcessInCmd_ColorControl_MoveSaturation
//  994  *
//  995  * @brief   Process in the received Move Saturation Command.
//  996  *
//  997  * @param   pInMsg - pointer to the incoming message
//  998  * @param   pCBs - pointer to the application callbacks
//  999  *
// 1000  * @return  ZStatus_t
// 1001  */
// 1002 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveSaturation( zclIncoming_t *pInMsg,
// 1003                                                             zclLighting_AppCallbacks_t *pCBs )
// 1004 {
// 1005   zclCCMoveSaturation_t cmd;
// 1006 
// 1007   cmd.moveMode = pInMsg->pData[0];
// 1008   cmd.rate = pInMsg->pData[1];
// 1009 
// 1010   // If the Rate field has a value of zero, the command has no effect and
// 1011   // a Default Response command is sent in response, with the status code
// 1012   // set to INVALID_FIELD.
// 1013   if ( ( cmd.rate == 0 ) && ( cmd.moveMode != LIGHTING_MOVE_SATURATION_STOP ) )
// 1014   {
// 1015     return ( ZCL_STATUS_INVALID_FIELD );
// 1016   }
// 1017 
// 1018   if ( pCBs->pfnColorControl_MoveSaturation )
// 1019     return ( pCBs->pfnColorControl_MoveSaturation( &cmd ) );
// 1020 
// 1021   return ( ZFailure );
// 1022 }
// 1023 
// 1024 /*********************************************************************
// 1025  * @fn      zclLighting_ProcessInCmd_ColorControl_StepSaturation
// 1026  *
// 1027  * @brief   Process in the received Step Saturation Command.
// 1028  *
// 1029  * @param   pInMsg - pointer to the incoming message
// 1030  * @param   pCBs - pointer to the application callbacks
// 1031  *
// 1032  * @return  ZStatus_t
// 1033  */
// 1034 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_StepSaturation( zclIncoming_t *pInMsg,
// 1035                                                             zclLighting_AppCallbacks_t *pCBs )
// 1036 {
// 1037   if ( pCBs->pfnColorControl_StepSaturation )
// 1038   {
// 1039     zclCCStepSaturation_t cmd;
// 1040 
// 1041     cmd.stepMode = pInMsg->pData[0];
// 1042     cmd.stepSize = pInMsg->pData[1];
// 1043     cmd.transitionTime = pInMsg->pData[2];
// 1044 
// 1045     return ( pCBs->pfnColorControl_StepSaturation( &cmd ) );
// 1046   }
// 1047 
// 1048   return ( ZFailure );
// 1049 }
// 1050 
// 1051 /*********************************************************************
// 1052  * @fn      zclLighting_ProcessInCmd_ColorControl_MoveToHueAndSaturation
// 1053  *
// 1054  * @brief   Process in the received Move To Hue And Saturation Command.
// 1055  *
// 1056  * @param   pInMsg - pointer to the incoming message
// 1057  * @param   pCBs - pointer to the application callbacks
// 1058  *
// 1059  * @return  ZStatus_t
// 1060  */
// 1061 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToHueAndSaturation( zclIncoming_t *pInMsg,
// 1062                                                                     zclLighting_AppCallbacks_t *pCBs )
// 1063 {
// 1064   if ( pCBs->pfnColorControl_MoveToHueAndSaturation )
// 1065   {
// 1066     zclCCMoveToHueAndSaturation_t cmd;
// 1067 
// 1068     cmd.hue = pInMsg->pData[0];
// 1069     cmd.saturation = pInMsg->pData[1];
// 1070     cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
// 1071 
// 1072     if ( ( cmd.hue > LIGHTING_COLOR_HUE_MAX ) || ( cmd.saturation > LIGHTING_COLOR_SAT_MAX ) )
// 1073     {
// 1074       return ( ZCL_STATUS_INVALID_VALUE );
// 1075     }
// 1076 
// 1077     return ( pCBs->pfnColorControl_MoveToHueAndSaturation( &cmd ) );
// 1078   }
// 1079 
// 1080   return ( ZFailure );
// 1081 }
// 1082 
// 1083 /*********************************************************************
// 1084  * @fn      zclLighting_ProcessInCmd_ColorControl_MoveToColor
// 1085  *
// 1086  * @brief   Process in the received Move To Color Command.
// 1087  *
// 1088  * @param   pInMsg - pointer to the incoming message
// 1089  * @param   pCBs - pointer to the application callbacks
// 1090  *
// 1091  * @return  ZStatus_t
// 1092  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1093 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToColor( zclIncoming_t *pInMsg,
zclLighting_ProcessInCmd_ColorControl_MoveToColor:
          CFI Block cfiBlock204 Using cfiCommon0
          CFI Function zclLighting_ProcessInCmd_ColorControl_MoveToColor
        CODE
// 1094                                                          zclLighting_AppCallbacks_t *pCBs )
// 1095 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 6
        MOV       A,#-0x6
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 1096   if ( pCBs->pfnColorControl_MoveToColor )
        MOV       A,R4
        ADD       A,#0xe
        MOV       DPL,A
        CLR       A
        ADDC      A,R5
        MOV       DPH,A
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_42:
        JZ        ??zclLighting_ProcessInCmd_ColorControl_MoveToC_1
// 1097   {
// 1098     zclCCMoveToColor_t cmd;
// 1099 
// 1100     cmd.colorX = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_77:
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R6
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine29 & 0xFFFF
// 1101     cmd.colorY = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
??CrossCallReturnLabel_63:
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R6
        MOV       R4,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        LCALL     ?Subroutine29 & 0xFFFF
// 1102     cmd.transitionTime = BUILD_UINT16( pInMsg->pData[4], pInMsg->pData[5] );
??CrossCallReturnLabel_64:
        INC       DPTR
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_48:
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R4
        MOV       R2,A
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        LCALL     ?Subroutine28 & 0xFFFF
// 1103 
// 1104     if ( ( cmd.colorX > LIGHTING_COLOR_CURRENT_X_MAX ) || ( cmd.colorY > LIGHTING_COLOR_CURRENT_Y_MAX ) )
??CrossCallReturnLabel_61:
        JNC       ??zclLighting_ProcessInCmd_ColorControl_MoveToC_2
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       C
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#-0x1
        JC        ??zclLighting_ProcessInCmd_ColorControl_MoveToC_3
// 1105     {
// 1106       return ( ZCL_STATUS_INVALID_VALUE );
??zclLighting_ProcessInCmd_ColorControl_MoveToC_2:
        MOV       R1,#-0x79
        SJMP      ??zclLighting_ProcessInCmd_ColorControl_MoveToC_4
// 1107     }
// 1108 
// 1109     return ( pCBs->pfnColorControl_MoveToColor( &cmd ) );
??zclLighting_ProcessInCmd_ColorControl_MoveToC_3:
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?CALL_IND
        SJMP      ??zclLighting_ProcessInCmd_ColorControl_MoveToC_4
// 1110   }
// 1111 
// 1112   return ( ZFailure );
??zclLighting_ProcessInCmd_ColorControl_MoveToC_1:
        MOV       R1,#0x1
??zclLighting_ProcessInCmd_ColorControl_MoveToC_4:
        MOV       A,#0x6
        LJMP      ?Subroutine2 & 0xFFFF
// 1113 }
          CFI EndBlock cfiBlock204

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond205 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_44
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-4
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function zclLighting_ProcessInCmd_ColorControl_MoveToColor
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-2
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker208 Using cfiCommon1
          CFI (cfiPicker208) NoFunction
          CFI (cfiPicker208) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,R3
        RET
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiPicker208

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond209 Using cfiCommon0
          CFI Function zclLighting_ProcessInCmd_ColorControl_MoveToColor
          CFI Conditional ??CrossCallReturnLabel_63
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function zclLighting_ProcessInCmd_ColorControl_MoveToColor
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+-2
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker211 Using cfiCommon1
          CFI (cfiPicker211) NoFunction
          CFI (cfiPicker211) Picker
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiPicker211

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond212 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function zclLighting_ProcessInCmd_ColorControl_MoveToColor
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-2
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker214 Using cfiCommon1
          CFI (cfiPicker214) NoFunction
          CFI (cfiPicker214) Picker
        MOVX      @DPTR,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       C
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#-0x1
        RET
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiPicker214

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond215 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function zclLighting_ProcessInCmd_ColorControl_MoveToColor
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-2
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker217 Using cfiCommon1
          CFI (cfiPicker217) NoFunction
          CFI (cfiPicker217) Picker
        INC       DPTR
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_80:
        INC       DPTR
        RET
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiPicker217

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond218 Using cfiCommon0
          CFI Function zclLighting_ProcessInColorControlCmds
          CFI Conditional ??CrossCallReturnLabel_79
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function zclLighting_ProcessInColorControlCmds
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_47
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-4
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function zclLighting_ProcessInCmd_ColorControl_MoveToColor
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_48
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-4
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker221 Using cfiCommon1
          CFI (cfiPicker221) NoFunction
          CFI (cfiPicker221) Picker
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiPicker221

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclLighting_RegisterCmdCallbacks::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclLighting_RegisterCmdCallbacks

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclLighting_ColorControl_Send_MoveToHueCmd::?`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclLighting_ColorControl_Send_MoveToHueCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclLighting_ColorControl_Send_MoveHueCmd::?re`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclLighting_ColorControl_Send_MoveHueCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclLighting_ColorControl_Send_StepHueCmd::?re`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclLighting_ColorControl_Send_StepHueCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclLighting_ColorControl_Send_MoveToSaturatio:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclLighting_ColorControl_Send_MoveToSaturationCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclLighting_ColorControl_Send_MoveSaturationC:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclLighting_ColorControl_Send_MoveSaturationCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclLighting_ColorControl_Send_StepSaturationC:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclLighting_ColorControl_Send_StepSaturationCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclLighting_ColorControl_Send_MoveToHueAndSat:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclLighting_ColorControl_Send_MoveToColorCmd:`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclLighting_ColorControl_Send_MoveToColorCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclLighting_ColorControl_Send_MoveColorCmd::?`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclLighting_ColorControl_Send_MoveColorCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclLighting_ColorControl_Send_StepColorCmd::?`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclLighting_ColorControl_Send_StepColorCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclLighting_ColorControl_Send_MoveToColorTemp:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclLighting_ColorControl_Send_MoveToColorTemperatureCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclLighting_HdlIncoming::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclLighting_HdlIncoming

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclLighting_ProcessInColorControlCmds::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclLighting_ProcessInColorControlCmds

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclLighting_ProcessInCmd_ColorControl_MoveToC:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclLighting_ProcessInCmd_ColorControl_MoveToColor

        END
// 1114 
// 1115 /*********************************************************************
// 1116  * @fn      zclLighting_ProcessInCmd_ColorControl_MoveColor
// 1117  *
// 1118  * @brief   Process in the received Move Color Command.
// 1119  *
// 1120  * @param   pInMsg - pointer to the incoming message
// 1121  * @param   pCBs - pointer to the application callbacks
// 1122  *
// 1123  * @return  ZStatus_t
// 1124  */
// 1125 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveColor( zclIncoming_t *pInMsg,
// 1126                                                        zclLighting_AppCallbacks_t *pCBs )
// 1127 {
// 1128   if ( pCBs->pfnColorControl_MoveColor )
// 1129   {
// 1130     zclCCMoveColor_t cmd;
// 1131 
// 1132     cmd.rateX = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
// 1133     cmd.rateY = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
// 1134 
// 1135     pCBs->pfnColorControl_MoveColor( &cmd );
// 1136 
// 1137     return ( ZSuccess );
// 1138   }
// 1139 
// 1140   return ( ZFailure );
// 1141 }
// 1142 
// 1143 /*********************************************************************
// 1144  * @fn      zclLighting_ProcessInCmd_ColorControl_StepColor
// 1145  *
// 1146  * @brief   Process in the received Step Color Command.
// 1147  *
// 1148  * @param   pInMsg - pointer to the incoming message
// 1149  * @param   pCBs - pointer to the application callbacks
// 1150  *
// 1151  * @return  ZStatus_t
// 1152  */
// 1153 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_StepColor( zclIncoming_t *pInMsg,
// 1154                                                        zclLighting_AppCallbacks_t *pCBs )
// 1155 {
// 1156   if ( pCBs->pfnColorControl_StepColor )
// 1157   {
// 1158     zclCCStepColor_t cmd;
// 1159 
// 1160     cmd.stepX = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
// 1161     cmd.stepY = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
// 1162     cmd.transitionTime = BUILD_UINT16( pInMsg->pData[4], pInMsg->pData[5] );
// 1163 
// 1164     return ( pCBs->pfnColorControl_StepColor( &cmd ) );
// 1165   }
// 1166 
// 1167   return ( ZFailure );
// 1168 }
// 1169 
// 1170 /*********************************************************************
// 1171  * @fn      zclLighting_ProcessInCmd_ColorControl_MoveToColorTemperature
// 1172  *
// 1173  * @brief   Process in the received Move to Color Temperature Command.
// 1174  *
// 1175  * @param   pInMsg - pointer to the incoming message
// 1176  * @param   pCBs - pointer to the application callbacks
// 1177  *
// 1178  * @return  ZStatus_t
// 1179  */
// 1180 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToColorTemperature( zclIncoming_t *pInMsg,
// 1181                                                                     zclLighting_AppCallbacks_t *pCBs )
// 1182 {
// 1183   if ( pCBs->pfnColorControl_MoveToColorTemperature )
// 1184   {
// 1185     zclCCMoveToColorTemperature_t cmd;
// 1186 
// 1187     cmd.colorTemperature = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
// 1188     cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
// 1189 
// 1190     if ( cmd.colorTemperature > LIGHTING_COLOR_TEMPERATURE_MAX )
// 1191     {
// 1192       return ( ZCL_STATUS_INVALID_VALUE );
// 1193     }
// 1194 
// 1195     return ( pCBs->pfnColorControl_MoveToColorTemperature( &cmd ) );
// 1196   }
// 1197 
// 1198   return ( ZFailure );
// 1199 }
// 1200 
// 1201 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 1202 /*********************************************************************
// 1203  * @fn      zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHue
// 1204  *
// 1205  * @brief   Process in the received Enhanced Move To Hue Command.
// 1206  *
// 1207  * @param   pInMsg - pointer to the incoming message
// 1208  * @param   pCBs - pointer to the application callbacks
// 1209  *
// 1210  * @return  ZStatus_t
// 1211  */
// 1212 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHue( zclIncoming_t *pInMsg,
// 1213                                                                zclLighting_AppCallbacks_t *pCBs )
// 1214 {
// 1215   if ( pCBs->pfnColorControl_EnhancedMoveToHue )
// 1216   {
// 1217     zclCCEnhancedMoveToHue_t cmd;
// 1218 
// 1219     cmd.enhancedHue = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
// 1220     cmd.direction = pInMsg->pData[2];
// 1221     cmd.transitionTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
// 1222 
// 1223     return ( pCBs->pfnColorControl_EnhancedMoveToHue( &cmd ) );
// 1224   }
// 1225 
// 1226   return ( ZFailure );
// 1227 }
// 1228 
// 1229 /*********************************************************************
// 1230  * @fn      zclLighting_ProcessInCmd_ColorControl_EnhancedMoveHue
// 1231  *
// 1232  * @brief   Process in the received Enhanced Move Hue Command.
// 1233  *
// 1234  * @param   pInMsg - pointer to the incoming message
// 1235  * @param   pCBs - pointer to the application callbacks
// 1236  *
// 1237  * @return  ZStatus_t
// 1238  */
// 1239 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedMoveHue( zclIncoming_t *pInMsg,
// 1240                                                              zclLighting_AppCallbacks_t *pCBs )
// 1241 {
// 1242   zclCCEnhancedMoveHue_t cmd;
// 1243 
// 1244   cmd.moveMode = pInMsg->pData[0];
// 1245   cmd.rate = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
// 1246 
// 1247   // If the Rate field has a value of zero, the command has no effect and
// 1248   // a Default Response command is sent in response, with the status code
// 1249   // set to INVALID_FIELD.
// 1250   if ( ( cmd.rate == 0 ) && ( cmd.moveMode != LIGHTING_MOVE_HUE_STOP ) )
// 1251   {
// 1252     return ( ZCL_STATUS_INVALID_FIELD );
// 1253   }
// 1254 
// 1255   if ( pCBs->pfnColorControl_EnhancedMoveHue )
// 1256   {
// 1257     return ( pCBs->pfnColorControl_EnhancedMoveHue( &cmd ) );
// 1258   }
// 1259 
// 1260   return ( ZFailure );
// 1261 }
// 1262 
// 1263 /*********************************************************************
// 1264  * @fn      zclLighting_ProcessInCmd_ColorControl_EnhancedStepHue
// 1265  *
// 1266  * @brief   Process in the received Enhanced Step Hue Command.
// 1267  *
// 1268  * @param   pInMsg - pointer to the incoming message
// 1269  * @param   pCBs - pointer to the application callbacks
// 1270  *
// 1271  * @return  ZStatus_t
// 1272  */
// 1273 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedStepHue( zclIncoming_t *pInMsg,
// 1274                                                              zclLighting_AppCallbacks_t *pCBs )
// 1275 {
// 1276   if ( pCBs->pfnColorControl_EnhancedStepHue )
// 1277   {
// 1278     zclCCEnhancedStepHue_t cmd;
// 1279 
// 1280     cmd.stepMode = pInMsg->pData[0];
// 1281     cmd.stepSize = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
// 1282     cmd.transitionTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
// 1283 
// 1284     return ( pCBs->pfnColorControl_EnhancedStepHue( &cmd ) );
// 1285   }
// 1286 
// 1287   return ( ZFailure );
// 1288 }
// 1289 
// 1290 /*********************************************************************
// 1291  * @fn      zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHueAndSaturation
// 1292  *
// 1293  * @brief   Process in the received Enhanced Move To Hue And Saturation Command.
// 1294  *
// 1295  * @param   pInMsg - pointer to the incoming message
// 1296  * @param   pCBs - pointer to the application callbacks
// 1297  *
// 1298  * @return  ZStatus_t
// 1299  */
// 1300 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHueAndSaturation( zclIncoming_t *pInMsg,
// 1301                                                                             zclLighting_AppCallbacks_t *pCBs )
// 1302 {
// 1303   if ( pCBs->pfnColorControl_EnhancedMoveToHueAndSaturation )
// 1304   {
// 1305     zclCCEnhancedMoveToHueAndSaturation_t cmd;
// 1306 
// 1307     cmd.enhancedHue = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
// 1308     cmd.saturation = pInMsg->pData[2];
// 1309     cmd.transitionTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
// 1310 
// 1311     if ( cmd.saturation > LIGHTING_COLOR_SAT_MAX )
// 1312     {
// 1313       return ( ZCL_STATUS_INVALID_VALUE );
// 1314     }
// 1315 
// 1316     return ( pCBs->pfnColorControl_EnhancedMoveToHueAndSaturation( &cmd ) );
// 1317   }
// 1318 
// 1319   return ( ZFailure );
// 1320 }
// 1321 
// 1322 /*********************************************************************
// 1323  * @fn      zclLighting_ProcessInCmd_ColorControl_ColorLoopSet
// 1324  *
// 1325  * @brief   Process in the received Color Loop Set Command.
// 1326  *
// 1327  * @param   pInMsg - pointer to the incoming message
// 1328  * @param   pCBs - pointer to the application callbacks
// 1329  *
// 1330  * @return  ZStatus_t
// 1331  */
// 1332 static ZStatus_t zclLighting_ProcessInCmd_ColorControl_ColorLoopSet( zclIncoming_t *pInMsg,
// 1333                                                            zclLighting_AppCallbacks_t *pCBs )
// 1334 {
// 1335   if ( pCBs->pfnColorControl_ColorLoopSet )
// 1336   {
// 1337     zclCCColorLoopSet_t cmd = {0};
// 1338 
// 1339     cmd.updateFlags.byte = pInMsg->pData[0];
// 1340     cmd.action = pInMsg->pData[1];
// 1341     cmd.direction = pInMsg->pData[2];
// 1342     cmd.time = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
// 1343     cmd.startHue = BUILD_UINT16( pInMsg->pData[5], pInMsg->pData[6] );
// 1344 
// 1345     return ( pCBs->pfnColorControl_ColorLoopSet( &cmd ) );
// 1346   }
// 1347 
// 1348   return ( ZFailure );
// 1349 }
// 1350 #endif // ZCL_LIGHT_LINK_ENHANCE
// 1351 
// 1352 /****************************************************************************
// 1353 ****************************************************************************/
// 
// 2 760 bytes in segment BANKED_CODE
//    90 bytes in segment BANK_RELAYS
//     3 bytes in segment XDATA_Z
// 
//    90 bytes of CODE     memory
// 2 760 bytes of HUGECODE memory
//     3 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
