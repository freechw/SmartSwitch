///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              20/Nov/2021  20:16:31
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\Source\interrupts.c
//    Command line       =  
//        -f C:\Users\tatbo\AppData\Local\Temp\EW988C.tmp ("D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\Source\interrupts.c"
//        -D SECURE=1 -D HAL_KEY=FALSE -D HAL_LED=FALSE -D HAL_LCD=FALSE -D
//        HAL_UART=FALSE -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
//        -D MT_ZDO_FUNC -D LCD_SUPPORTED=FALSE -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D xZCL_EZMODE -D ZCL_BASIC -D
//        ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D
//        xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D
//        ZCL_DOORLOCK -lC "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List"
//        -lA "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\" -I
//        "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\Source\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\Source\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List\interrupts.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME interrupts

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_MOV_X

        PUBWEAK `??IRQ_DIGIN::??INTVEC 51`
        PUBWEAK `??IRQ_KEY::??INTVEC 123`
        PUBWEAK `??IRQ_S0::??INTVEC 107`
        PUBLIC IRQ_DIGIN
        FUNCTION IRQ_DIGIN,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC IRQ_KEY
        FUNCTION IRQ_KEY,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC IRQ_S0
        FUNCTION IRQ_S0,0a1233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBWEAK P0IFG
        PUBWEAK P1IFG
        PUBWEAK P2IFG
        PUBWEAK _A_IRCON
        PUBWEAK _A_IRCON2
        PUBWEAK _A_P1
        PUBWEAK _A_P2
        PUBWEAK __Constant_1
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
FactoryReset        SYMBOL "FactoryReset"
`??FactoryReset::?relay` SYMBOL "?relay", FactoryReset
Relais              SYMBOL "Relais"
`??Relais::?relay`  SYMBOL "?relay", Relais
UART_String         SYMBOL "UART_String"
`??UART_String::?relay` SYMBOL "?relay", UART_String
_delay_ms           SYMBOL "_delay_ms"
`??_delay_ms::?relay` SYMBOL "?relay", _delay_ms
zclZigUP_Reporting  SYMBOL "zclZigUP_Reporting"
`??zclZigUP_Reporting::?relay` SYMBOL "?relay", zclZigUP_Reporting
IRQ_DIGIN           SYMBOL "IRQ_DIGIN"
`??IRQ_DIGIN::??INTVEC 51` SYMBOL "??INTVEC 51", IRQ_DIGIN
IRQ_KEY             SYMBOL "IRQ_KEY"
`??IRQ_KEY::??INTVEC 123` SYMBOL "??INTVEC 123", IRQ_KEY
IRQ_S0              SYMBOL "IRQ_S0"
`??IRQ_S0::??INTVEC 107` SYMBOL "??INTVEC 107", IRQ_S0

        EXTERN `??FactoryReset::?relay`
        FUNCTION `??FactoryReset::?relay`,00H
        EXTERN `??Relais::?relay`
        FUNCTION `??Relais::?relay`,00H
        EXTERN `??UART_String::?relay`
        FUNCTION `??UART_String::?relay`,00H
        EXTERN `??_delay_ms::?relay`
        FUNCTION `??_delay_ms::?relay`,00H
        EXTERN `??zclZigUP_Reporting::?relay`
        FUNCTION `??zclZigUP_Reporting::?relay`,00H
        EXTERN DIG_IN
        EXTERN FactoryReset
        FUNCTION FactoryReset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Relais
        FUNCTION Relais,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN S0
        EXTERN STATE_LIGHT
        EXTERN UART_String
        FUNCTION UART_String,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _delay_ms
        FUNCTION _delay_ms,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclZigUP_Reporting
        FUNCTION zclZigUP_Reporting,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\Source\interrupts.c
//    1 #include <stdio.h>
//    2 #include "onboard.h"

        ASEGN SFR_AN:DATA:NOROOT,089H
// unsigned char volatile __sfr P0IFG
P0IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08aH
// unsigned char volatile __sfr P1IFG
P1IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08bH
// unsigned char volatile __sfr P2IFG
P2IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c0H
// union <unnamed> volatile __sfr _A_IRCON
_A_IRCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DATA8
        DS 1
//    3 #include "ZComDef.h"
//    4 #include "bitmasks.h"
//    5 #include "delay.h"
//    6 #include "ds18b20.h"
//    7 #include "uart.h"
//    8 #include "global.h"
//    9 #include "ws2812.h"
//   10 #include "led.h"
//   11 #include "interrupts.h"
//   12 #include "zcl_zigup.h"
//   13 #include "utils.h"
//   14 
//   15 #pragma vector=P0INT_VECTOR 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   16 __interrupt void IRQ_S0(void)
IRQ_S0:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function IRQ_S0
        CODE
//   17 {
        FUNCALL IRQ_S0, UART_String
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        PUSH      A
          CFI A Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        MOV       A,#-0x11
        LCALL     ?INTERRUPT_ENTER_XSP
          CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 0
//   18   if (P0IFG & (1<<6))	// Interrupt flag for P0.6 (S0)?
        MOV       A,0x89
        MOV       C,0xE0 /* A   */.6
        JNC       ??IRQ_S0_0
//   19   {
//   20     S0++;
        MOV       DPTR,#__Constant_1
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       DPTR,#S0
        MOV       R0,#?V0
        LCALL     ?L_ADD_TO_X
//   21     UART_String("[INT] S0!");
        ; Setup parameters for call to function UART_String
        MOV       R2,#`?<Constant "[INT] S0!">` & 0xff
        MOV       R3,#(`?<Constant "[INT] S0!">` >> 8) & 0xff
        LCALL     `??UART_String::?relay`; Banked call to: UART_String
//   22     
//   23     // Clear interrupt flags
//   24     P0IFG &= ~(1<<6);	// Clear Interrupt flag for P0.6 (S0)
        ANL       0x89,#0xbf
//   25     IRCON &= ~(1<<5);	// Clear Interrupt flag for Port 0
        CLR       0xc0.5
//   26   }
//   27 }
??IRQ_S0_0:
        MOV       R7,#0x4
        LJMP      ?INTERRUPT_LEAVE_XSP
          CFI EndBlock cfiBlock0
        REQUIRE P0IFG
        REQUIRE _A_IRCON
//   28 
//   29 #pragma vector=P1INT_VECTOR 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   30 __interrupt void IRQ_KEY(void)
IRQ_KEY:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function IRQ_KEY
        CODE
//   31 {
        FUNCALL IRQ_KEY, _delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IRQ_KEY, Relais
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IRQ_KEY, UART_String
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IRQ_KEY, _delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IRQ_KEY, FactoryReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      A
          CFI A Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        MOV       A,#-0xe
        LCALL     ?INTERRUPT_ENTER_XSP
          CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
//   32   if (P1IFG & (1<<3))	// Interrupt flag for P1.3 (KEY)?
        MOV       A,0x8a
        MOV       C,0xE0 /* A   */.3
        JNC       ??IRQ_KEY_0
//   33   {
//   34     // debounce
//   35     _delay_ms(20);
        ; Setup parameters for call to function _delay_ms
        MOV       R2,#0x14
        MOV       R3,#0x0
        LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
//   36     if (!P1_3) // still pressed?
        MOV       C,0x90.3
        JC        ??IRQ_KEY_1
//   37     {
//   38       Relais(!STATE_LIGHT);
        MOV       DPTR,#STATE_LIGHT
        MOVX      A,@DPTR
        JNZ       ??IRQ_KEY_2
        MOV       R1,#0x1
        SJMP      ??IRQ_KEY_3
??IRQ_KEY_2:
        MOV       R1,#0x0
??IRQ_KEY_3:
        ; Setup parameters for call to function Relais
        LCALL     `??Relais::?relay`; Banked call to: Relais
//   39       UART_String("[INT] KEY!");
        ; Setup parameters for call to function UART_String
        MOV       R2,#`?<Constant "[INT] KEY!">` & 0xff
        MOV       R3,#(`?<Constant "[INT] KEY!">` >> 8) & 0xff
        LCALL     `??UART_String::?relay`; Banked call to: UART_String
//   40       
//   41       // detection for longer keypress
//   42       uint8 counter = 0;
        MOV       R6,#0x0
        SJMP      ??IRQ_KEY_4
//   43       while (!P1_3 && counter < 100)
//   44       {
//   45         _delay_ms(50);
??IRQ_KEY_5:
        ; Setup parameters for call to function _delay_ms
        MOV       R2,#0x32
        MOV       R3,#0x0
        LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
//   46         counter++;
        INC       R6
//   47       }
??IRQ_KEY_4:
        MOV       C,0x90.3
        JC        ??IRQ_KEY_6
        MOV       A,R6
        CLR       C
        SUBB      A,#0x64
        JC        ??IRQ_KEY_5
//   48       if (counter >= 100) FactoryReset();
??IRQ_KEY_6:
        MOV       A,R6
        CLR       C
        SUBB      A,#0x64
        JC        ??IRQ_KEY_1
        ; Setup parameters for call to function FactoryReset
        LCALL     `??FactoryReset::?relay`; Banked call to: FactoryReset
//   49       
//   50       // update measurements (only the quick stuff, to stay responsive)
//   51       //Measure_QuickStuff();
//   52       
//   53       // report states
//   54       //zclZigUP_Reporting(REPORT_REASON_KEY);      
//   55     }
//   56     
//   57     // Clear interrupt flags
//   58     P1IFG &= ~(1<<3);	// Clear Interrupt flag for P1.3 (KEY)
??IRQ_KEY_1:
        ANL       0x8a,#0xf7
//   59     IRCON2 &= ~(1<<3);	// Clear Interrupt flag for Port 1
        CLR       0xe8.3
//   60   }
//   61 }
??IRQ_KEY_0:
          CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine0
        REQUIRE P1IFG
        REQUIRE _A_P1
        REQUIRE _A_IRCON2
        ; // Fall through to label ?Subroutine0

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI A Frame(CFA_SP, 3)
          CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        MOV       R7,#0x1
        LJMP      ?INTERRUPT_LEAVE_XSP
          CFI EndBlock cfiBlock2
//   62 
//   63 #pragma vector=P2INT_VECTOR 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   64 __interrupt void IRQ_DIGIN(void)
IRQ_DIGIN:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function IRQ_DIGIN
        CODE
//   65 {
        FUNCALL IRQ_DIGIN, _delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IRQ_DIGIN, UART_String
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IRQ_DIGIN, _delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IRQ_DIGIN, FactoryReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IRQ_DIGIN, zclZigUP_Reporting
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      A
          CFI A Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        MOV       A,#-0xe
        LCALL     ?INTERRUPT_ENTER_XSP
          CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
//   66   if (P2IFG & (1<<0))	// Interrupt flag for P2.0 (Dig-In)?
        MOV       A,0x8b
        MOV       C,0xE0 /* A   */.0
        JNC       ??IRQ_DIGIN_0
//   67   {
//   68     // debounce
//   69     _delay_ms(20);
        ; Setup parameters for call to function _delay_ms
        MOV       R2,#0x14
        MOV       R3,#0x0
        LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
//   70     if (!P2_0) // still pressed?
        MOV       C,0xa0.0
        JC        ??IRQ_DIGIN_1
//   71     {
//   72       DIG_IN = P2_0;
        MOV       C,0xa0.0
        CLR       A
        RLC       A
        MOV       DPTR,#DIG_IN
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//   73       UART_String("[INT] Dig-In!");
        ; Setup parameters for call to function UART_String
        MOV       R2,#`?<Constant "[INT] Dig-In!">` & 0xff
        MOV       R3,#(`?<Constant "[INT] Dig-In!">` >> 8) & 0xff
        LCALL     `??UART_String::?relay`; Banked call to: UART_String
//   74       
//   75       // detection for longer keypress
//   76       uint8 counter = 0;
        MOV       R6,#0x0
        SJMP      ??IRQ_DIGIN_2
//   77       while (!P1_3 && counter < 100)
//   78       {
//   79         _delay_ms(50);
??IRQ_DIGIN_3:
        ; Setup parameters for call to function _delay_ms
        MOV       R2,#0x32
        MOV       R3,#0x0
        LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
//   80         counter++;
        INC       R6
//   81       }
??IRQ_DIGIN_2:
        MOV       C,0x90.3
        JC        ??IRQ_DIGIN_4
        MOV       A,R6
        CLR       C
        SUBB      A,#0x64
        JC        ??IRQ_DIGIN_3
//   82       if (counter >= 100) FactoryReset();
??IRQ_DIGIN_4:
        MOV       A,R6
        CLR       C
        SUBB      A,#0x64
        JC        ??IRQ_DIGIN_5
        ; Setup parameters for call to function FactoryReset
        LCALL     `??FactoryReset::?relay`; Banked call to: FactoryReset
//   83       
//   84       // update measurements (only the quick stuff, to stay responsive)
//   85       //Measure_QuickStuff();
//   86       
//   87       // report states
//   88       zclZigUP_Reporting(REPORT_REASON_DIGIN);  
??IRQ_DIGIN_5:
        ; Setup parameters for call to function zclZigUP_Reporting
        MOV       R2,#0x2
        MOV       R3,#0x0
        LCALL     `??zclZigUP_Reporting::?relay`; Banked call to: zclZigUP_Reporting
//   89     }
//   90     
//   91     // Clear interrupt flags
//   92     P2IFG &= ~(1<<0);	// Clear Interrupt flag for P2.0 (Dig-In)
??IRQ_DIGIN_1:
        ANL       0x8b,#0xfe
//   93     IRCON2 &= ~(1<<0);	// Clear Interrupt flag for Port 2
        CLR       0xe8.0
//   94   }
//   95 }
??IRQ_DIGIN_0:
        SJMP      ?Subroutine0
          CFI EndBlock cfiBlock3
        REQUIRE P2IFG
        REQUIRE _A_P2
        REQUIRE _A_P1
        REQUIRE _A_IRCON2

        COMMON INTVEC:CODE:ROOT(0)
        ORG 51
`??IRQ_DIGIN::??INTVEC 51`:
        LJMP       (IRQ_DIGIN)

        COMMON INTVEC:CODE:ROOT(0)
        ORG 107
`??IRQ_S0::??INTVEC 107`:
        LJMP       (IRQ_S0)

        COMMON INTVEC:CODE:ROOT(0)
        ORG 123
`??IRQ_KEY::??INTVEC 123`:
        LJMP       (IRQ_KEY)

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "[INT] S0!">`:
        DB "[INT] S0!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "[INT] KEY!">`:
        DB "[INT] KEY!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "[INT] Dig-In!">`:
        DB "[INT] Dig-In!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1:
        DD 1

        END
// 
//   9 bytes in segment INTVEC
// 220 bytes in segment NEAR_CODE
//   7 bytes in segment SFR_AN
//  39 bytes in segment XDATA_ROM_C
// 
// 220 bytes of CODE  memory (+ 9 bytes shared)
//  35 bytes of CONST memory (+ 4 bytes shared)
//   0 bytes of DATA  memory (+ 7 bytes shared)
//
//Errors: none
//Warnings: none
