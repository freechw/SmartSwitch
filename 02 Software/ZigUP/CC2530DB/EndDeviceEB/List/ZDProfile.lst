###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               20/Nov/2021  20:16:52
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\Z-Stack Home 1.2.2a.44539\Components\stack\zdo\ZDProfile.c
#    Command line       =  
#        -f C:\Users\tatbo\AppData\Local\Temp\EWE281.tmp ("D:\Z-Stack Home
#        1.2.2a.44539\Components\stack\zdo\ZDProfile.c" -D SECURE=1 -D
#        HAL_KEY=FALSE -D HAL_LED=FALSE -D HAL_LCD=FALSE -D HAL_UART=FALSE -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xHOLD_AUTO_START -D
#        ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=FALSE -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D
#        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D ZCL_DOORLOCK -lC "D:\Z-Stack
#        Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List"
#        -lA "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\" -I
#        "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\Source\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\Source\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List\ZDProfile.lst
#    Object file        =  
#        D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\Obj\ZDProfile.r51
#
###############################################################################

D:\Z-Stack Home 1.2.2a.44539\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2015-10-14 11:48:06 -0700 (Wed, 14 Oct 2015) $
      4            Revision:       $Revision: 44530 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          // Routing table options
    113          #define ZP_RTG_RECORD       0x04       // Routing table indication that a route record is needed
    114          #define ZP_MTO_ROUTE_RC     0x08       // Concentrator with routing cache
    115          #define ZP_MTO_ROUTE_NRC    0x10       // Concentrator with limited cache
    116          
    117          
    118          /*********************************************************************
    119           * TYPEDEFS
    120           */
    121          typedef struct
    122          {
    123            void *next;
    124            uint8 taskID;
    125            uint16 clusterID;
    126          } ZDO_MsgCB_t;
    127          
    128          
    129          /*********************************************************************
    130           * GLOBAL VARIABLES
    131           */
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          
    135          /*********************************************************************
    136           * EXTERNAL VARIABLES
    137           */
    138          
    139          extern endPointDesc_t ZDApp_epDesc;
    140          
    141          /*********************************************************************
    142           * EXTERNAL FUNCTIONS
    143           */
    144          
    145          /*********************************************************************
    146           * LOCAL FUNCTIONS
    147           */
    148          
    149          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    150          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    151          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    152          
    153          /*********************************************************************
    154           * LOCAL VARIABLES
    155           */
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    158          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    162          
    163          /*********************************************************************
    164           * ZDO Message Processing table
    165           */
    166          
    167          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    168          
    169          typedef struct
    170          {
    171            uint16                clusterID;
    172            pfnZDPMsgProcessor    pFn;
    173          } zdpMsgProcItem_t;
    174          

   \                                 In  segment CODE_C, align 1
    175          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0100         DW 1
   \   000002   ....         DW `??zdpProcessAddrReq::?relay`
   \   000004   0200         DW 2
   \   000006   ....         DW `??ZDO_ProcessNodeDescReq::?relay`
   \   000008   0300         DW 3
   \   00000A   ....         DW `??ZDO_ProcessPowerDescReq::?relay`
   \   00000C   0400         DW 4
   \   00000E   ....         DW `??ZDO_ProcessSimpleDescReq::?relay`
   \   000010   0500         DW 5
   \   000012   ....         DW `??ZDO_ProcessActiveEPReq::?relay`
   \   000014   0600         DW 6
   \   000016   ....         DW `??ZDO_ProcessMatchDescReq::?relay`
   \   000018   1100         DW 17
   \   00001A   ....         DW `??ZDO_ProcessUserDescReq::?relay`
   \   00001C   1400         DW 20
   \   00001E   ....         DW `??ZDO_ProcessUserDescSet::?relay`
   \   000020   1500         DW 21
   \   000022   ....         DW `??ZDO_ProcessServerDiscReq::?relay`
   \   000024   FFFF         DW 65535
   \   000026   0000         DW 0H
    176          {
    177          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    178            // These aren't processed by sleeping end devices.
    179            { NWK_addr_req,           zdpProcessAddrReq },
    180            { Device_annce,           ZDO_ProcessDeviceAnnce },
    181          #endif
    182          #if ( ZG_BUILD_RTR_TYPE )
    183            // These aren't processed by end devices.
    184            { Parent_annce,           ZDO_ProcessParentAnnce },
    185            { Parent_annce_rsp,       ZDO_ProcessParentAnnceRsp },
    186          #endif
    187            { IEEE_addr_req,          zdpProcessAddrReq },
    188            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    189            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    190            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    191            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    192            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    193          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    194            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    195          #endif
    196          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    197            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    198          #endif
    199          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    200            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    201          #endif
    202          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    203            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    204          #endif
    205          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    206            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    207          #endif
    208          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    209            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    210          #endif
    211          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    212            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    213          #endif
    214          #if defined ( ZDO_USERDESC_RESPONSE )
    215            { User_Desc_req,          ZDO_ProcessUserDescReq },
    216          #endif
    217          #if defined ( ZDO_USERDESCSET_RESPONSE )
    218            { User_Desc_set,          ZDO_ProcessUserDescSet },
    219          #endif
    220          #if defined ( ZDO_SERVERDISC_RESPONSE )
    221            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    222          #endif
    223            {0xFFFF, NULL} // Last
    224          };
    225          
    226          /*********************************************************************
    227           * @fn          fillAndSend
    228           *
    229           * @brief       Combined to reduce space
    230           *
    231           * @param
    232           * @param
    233           *
    234           * @return      afStatus_t
    235           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    236          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    237          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V4,R1
    238            afAddrType_t afAddr;
    239          
    240            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C0C         MOV       R4,#0xc
   \   000016   7D00         MOV       R5,#0x0
   \   000018   7900         MOV       R1,#0x0
   \   00001A   AA..         MOV       R2,?XSP + 0
   \   00001C   AB..         MOV       R3,?XSP + 1
   \   00001E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    241            ZADDR_TO_AFADDR( addr, afAddr );
   \   000021   7409         MOV       A,#0x9
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E4           CLR       A
   \   000027   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   C0E0         PUSH      A
   \   00002D   7408         MOV       A,#0x8
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   D0E0         POP       A
   \   000034   F0           MOVX      @DPTR,A
   \   000035   8E82         MOV       DPL,R6
   \   000037   8F83         MOV       DPH,R7
   \   000039   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00003C   12....       LCALL     ?Subroutine28 & 0xFFFF
    242          
    243            *(ZDP_TmpBuf-1) = *transSeq;
   \                     ??CrossCallReturnLabel_33:
   \   00003F   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000042   E0           MOVX      A,@DPTR
   \   000043   24FF         ADD       A,#-0x1
   \   000045   F5..         MOV       ?V2,A
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   34FF         ADDC      A,#-0x1
   \   00004B   F5..         MOV       ?V3,A
   \   00004D   85..82       MOV       DPL,?V0
   \   000050   85..83       MOV       DPH,?V1
   \   000053   E0           MOVX      A,@DPTR
   \   000054   85..82       MOV       DPL,?V2
   \   000057   85..83       MOV       DPH,?V3
   \   00005A   F0           MOVX      @DPTR,A
    244          
    245            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    246                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    247                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   00005B                ; Setup parameters for call to function AF_DataRequest
   \   00005B   75..1E       MOV       ?V5,#0x1e
   \   00005E   78..         MOV       R0,#?V5
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000068   78..         MOV       R0,#?V2
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   E5..         MOV       A,?V4
   \   00006F   2401         ADD       A,#0x1
   \   000071   F5..         MOV       ?V0,A
   \   000073   E4           CLR       A
   \   000074   3400         ADDC      A,#0x0
   \   000076   F5..         MOV       ?V1,A
   \   000078   78..         MOV       R0,#?V0
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007D   7421         MOV       A,#0x21
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000085   90....       MOV       DPTR,#ZDP_TxOptions
   \   000088   E0           MOVX      A,@DPTR
   \   000089   F9           MOV       R1,A
   \   00008A   7C..         MOV       R4,#ZDApp_epDesc & 0xff
   \   00008C   7D..         MOV       R5,#(ZDApp_epDesc >> 8) & 0xff
   \   00008E   7409         MOV       A,#0x9
   \   000090   12....       LCALL     ?XSTACK_DISP101_8
   \   000093   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000096   7409         MOV       A,#0x9
   \   000098   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009B   740C         MOV       A,#0xc
   \   00009D   02....       LJMP      ?Subroutine0 & 0xFFFF
    248          
    249          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   F9           MOV       R1,A
   \   000004   85..82       MOV       DPL,?XSP + 0
   \   000007   85..83       MOV       DPH,?XSP + 1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine93_0
   \   000003                ; // Fall through to label ??Subroutine93_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    250          
    251          /*********************************************************************
    252           * @fn          ZDP_SendData
    253           *
    254           * @brief       This builds and send a request message that has
    255           *              NWKAddrOfInterest as its only parameter.
    256           *
    257           * @param       dstAddr - destination address
    258           * @param       cmd - clusterID
    259           * @param       dataLen - number of bytes of data
    260           * @param       data - pointer to the data
    261           * @param       SecurityEnable - Security Options
    262           *
    263           * @return      afStatus_t
    264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    266                                  byte len, uint8 *buf, byte SecurityEnable )
    267          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
    268            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00000A   12....       LCALL     ?Subroutine49 & 0xFFFF
    269            byte cnt = len;
   \                     ??CrossCallReturnLabel_72:
   \   00000D   EF           MOV       A,R7
   \   00000E   FE           MOV       R6,A
   \   00000F   740E         MOV       A,#0xe
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000017   801F         SJMP      ??ZDP_SendData_0
    270          
    271            while ( cnt-- )
    272            {
    273              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   000019   8882         MOV       DPL,R0
   \   00001B   8983         MOV       DPH,R1
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   85..82       MOV       DPL,?V2
   \   000021   85..83       MOV       DPH,?V3
   \   000024   12....       LCALL     ??Subroutine115_0 & 0xFFFF
    274            }
   \                     ??CrossCallReturnLabel_219:
   \   000027   A882         MOV       R0,DPL
   \   000029   A983         MOV       R1,DPH
   \   00002B   85..82       MOV       DPL,?V2
   \   00002E   85..83       MOV       DPH,?V3
   \   000031   A3           INC       DPTR
   \   000032   8582..       MOV       ?V2,DPL
   \   000035   8583..       MOV       ?V3,DPH
   \                     ??ZDP_SendData_0:
   \   000038   74FF         MOV       A,#-0x1
   \   00003A   2E           ADD       A,R6
   \   00003B   FE           MOV       R6,A
   \   00003C   04           INC       A
   \   00003D   70DA         JNZ       ??ZDP_SendData_1
    275          
    276            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
   \   00003F   7410         MOV       A,#0x10
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   E0           MOVX      A,@DPTR
   \   000045   90....       MOV       DPTR,#ZDP_TxOptions
   \   000048   6004         JZ        ??ZDP_SendData_2
   \   00004A   7440         MOV       A,#0x40
   \   00004C   8001         SJMP      ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   00004E   E4           CLR       A
   \                     ??ZDP_SendData_3:
   \   00004F   F0           MOVX      @DPTR,A
   \   000050                ; Setup parameters for call to function fillAndSend
   \   000050   740C         MOV       A,#0xc
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000058   EF           MOV       A,R7
   \   000059   F9           MOV       R1,A
   \   00005A   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00005D   7402         MOV       A,#0x2
   \   00005F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000062   E9           MOV       A,R1
   \   000063   F9           MOV       R1,A
   \   000064   90....       MOV       DPTR,#ZDP_TxOptions
   \   000067   E4           CLR       A
   \   000068   F0           MOVX      @DPTR,A
   \   000069   02....       LJMP      ??Subroutine92_0 & 0xFFFF
    277          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET
    278          
    279          /*********************************************************************
    280           * @fn          ZDP_NWKAddrOfInterestReq
    281           *
    282           * @brief       This builds and send a request message that has
    283           *              NWKAddrOfInterest as its only parameter.
    284           *
    285           * @param       dstAddr - destination address
    286           * @param       nwkAddr - 16 bit address
    287           * @param       SecurityEnable - Security Options
    288           *
    289           * @return      afStatus_t
    290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    292                                               byte cmd, byte SecurityEnable )
    293          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    294            (void)SecurityEnable;  // Intentionally unreferenced parameter
    295          
    296            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000007   12....       LCALL     ?Subroutine17 & 0xFFFF
    297            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_16:
   \   00000A   F0           MOVX      @DPTR,A
    298          
    299            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   EE           MOV       A,R6
   \   00000C   F5..         MOV       ?V0,A
   \   00000E   75..00       MOV       ?V1,#0x0
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   7902         MOV       R1,#0x2
   \   000018   02....       LJMP      ?Subroutine8 & 0xFFFF
    300          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   EC           MOV       A,R4
   \   000008   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00000B   ED           MOV       A,R5
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F02         MOV       R7,#0x2
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   EA           MOV       A,R2
   \   000001   FC           MOV       R4,A
   \   000002   EB           MOV       A,R3
   \   000003   FD           MOV       R5,A
   \   000004   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine99_0
   \   000008                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000003   7402         MOV       A,#0x2
   \   000005   02....       LJMP      ??Subroutine95_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F583         MOV       DPH,A
   \   00000A   8882         MOV       DPL,R0
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine119_0
   \   000003                ; // Fall through to label ??Subroutine119_0
    301          
    302          /*********************************************************************
    303           * Address Requests
    304           */
    305          
    306          /*********************************************************************
    307           * @fn          ZDP_NwkAddrReq
    308           *
    309           * @brief       This builds and send a NWK_addr_req message.  This
    310           *              function sends a broadcast message looking for a 16
    311           *              bit address with a 64 bit address as bait.
    312           *
    313           * @param       IEEEAddress - looking for this device
    314           * @param       SecurityEnable - Security Options
    315           *
    316           * @return      afStatus_t
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    319                                     byte StartIndex, byte SecurityEnable )
    320          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V2,R1
   \   000010   8C..         MOV       ?V3,R4
    321            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   12....       LCALL     ?Subroutine39 & 0xFFFF
    322            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    323            zAddrType_t dstAddr;
    324          
    325            (void)SecurityEnable;  // Intentionally unreferenced parameter
    326          
    327            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \                     ??CrossCallReturnLabel_140:
   \   000015                ; Setup parameters for call to function sAddrExtCmp
   \   000015   EE           MOV       A,R6
   \   000016   FC           MOV       R4,A
   \   000017   EF           MOV       A,R7
   \   000018   FD           MOV       R5,A
   \   000019   7A..         MOV       R2,#saveExtAddr & 0xff
   \   00001B   7B..         MOV       R3,#(saveExtAddr >> 8) & 0xff
   \   00001D   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000020   E9           MOV       A,R1
   \   000021   700A         JNZ       ??ZDP_NwkAddrReq_0
    328            {
    329              dstAddr.addrMode = AddrBroadcast;
   \   000023   7408         MOV       A,#0x8
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   12....       LCALL     ?Subroutine80 & 0xFFFF
    330              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    331            }
   \                     ??CrossCallReturnLabel_123:
   \   00002B   8012         SJMP      ??ZDP_NwkAddrReq_1
    332            else
    333            {
    334              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   00002D   7408         MOV       A,#0x8
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   7402         MOV       A,#0x2
   \   000034   F0           MOVX      @DPTR,A
    335              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   000035   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000038   12....       LCALL     ?Subroutine48 & 0xFFFF
    336            }
   \                     ??CrossCallReturnLabel_71:
   \   00003B   E8           MOV       A,R0
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   E9           MOV       A,R1
   \                     ??ZDP_NwkAddrReq_1:
   \   00003F   F0           MOVX      @DPTR,A
    337          
    338            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   000040                ; Setup parameters for call to function sAddrExtCpy
   \   000040   EE           MOV       A,R6
   \   000041   FC           MOV       R4,A
   \   000042   EF           MOV       A,R7
   \   000043   FD           MOV       R5,A
   \   000044   AA..         MOV       R2,?V0
   \   000046   AB..         MOV       R3,?V1
   \   000048   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00004B   8A82         MOV       DPL,R2
   \   00004D   8B83         MOV       DPH,R3
    339          
    340            *pBuf++ = ReqType;
   \   00004F   E5..         MOV       A,?V2
   \   000051   F0           MOVX      @DPTR,A
    341            *pBuf++ = StartIndex;
   \   000052   A3           INC       DPTR
   \   000053   E5..         MOV       A,?V3
   \   000055   F0           MOVX      @DPTR,A
    342          
    343            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   000056                ; Setup parameters for call to function fillAndSend
   \   000056   E4           CLR       A
   \   000057   F5..         MOV       ?V0,A
   \   000059   F5..         MOV       ?V1,A
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   790A         MOV       R1,#0xa
   \   000062   7402         MOV       A,#0x2
   \   000064   12....       LCALL     ?XSTACK_DISP102_8
   \   000067                REQUIRE ?Subroutine9
   \   000067                ; // Fall through to label ?Subroutine9
    344          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000002   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000004   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000007   7402         MOV       A,#0x2
   \   000009   12....       LCALL     ?DEALLOC_XSTACK8
   \   00000C   7409         MOV       A,#0x9
   \   00000E   80..         SJMP      ??Subroutine91_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine89_0
   \   000003                ; // Fall through to label ??Subroutine89_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine92_0
   \   000003                ; // Fall through to label ??Subroutine92_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   740F         MOV       A,#0xf
   \   000002   F0           MOVX      @DPTR,A
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   74FD         MOV       A,#-0x3
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   74FF         MOV       A,#-0x1
   \   00000F   22           RET
    345          
    346          /*********************************************************************
    347           * @fn          ZDP_IEEEAddrReq
    348           *
    349           * @brief       This builds and send a IEEE_addr_req message.  This
    350           *              function sends a unicast message looking for a 64
    351           *              bit IEEE address with a 16 bit address as bait.
    352           *
    353           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    354           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    355           * @param       SecurityEnable - Security Options
    356           *
    357           * @return      afStatus_t
    358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    359          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    360                                      byte StartIndex, byte SecurityEnable )
    361          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
   \   00000D   12....       LCALL     ??Subroutine116_0 & 0xFFFF
    362            uint8 *pBuf = ZDP_TmpBuf;
    363            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    364            zAddrType_t dstAddr;
    365          
    366            (void)SecurityEnable;  // Intentionally unreferenced parameter
    367          
    368            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_229:
   \   000010   7408         MOV       A,#0x8
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   7402         MOV       A,#0x2
   \   000017   F0           MOVX      @DPTR,A
    369            dstAddr.addr.shortAddr = shortAddr;
   \   000018   85..82       MOV       DPL,?XSP + 0
   \   00001B   85..83       MOV       DPH,?XSP + 1
   \   00001E   EA           MOV       A,R2
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   EB           MOV       A,R3
   \   000022   F0           MOVX      @DPTR,A
    370          
    371            *pBuf++ = LO_UINT16( shortAddr );
   \   000023   EA           MOV       A,R2
   \   000024   8882         MOV       DPL,R0
   \   000026   8983         MOV       DPH,R1
   \   000028   F0           MOVX      @DPTR,A
    372            *pBuf++ = HI_UINT16( shortAddr );
   \   000029   EB           MOV       A,R3
   \   00002A   12....       LCALL     ?Subroutine35 & 0xFFFF
    373          
    374            *pBuf++ = ReqType;
   \                     ??CrossCallReturnLabel_46:
   \   00002D   F0           MOVX      @DPTR,A
    375            *pBuf++ = StartIndex;
   \   00002E   EF           MOV       A,R7
   \   00002F   8882         MOV       DPL,R0
   \   000031   8983         MOV       DPH,R1
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   F0           MOVX      @DPTR,A
    376          
    377            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   75..01       MOV       ?V0,#0x1
   \   00003A   75..00       MOV       ?V1,#0x0
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   7904         MOV       R1,#0x4
   \   000044   02....       LJMP      ?Subroutine2 & 0xFFFF
    378          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   A3           INC       DPTR
   \   000001   F0           MOVX      @DPTR,A
   \   000002   EE           MOV       A,R6
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7402         MOV       A,#0x2
   \   000002   12....       LCALL     ?XSTACK_DISP102_8
   \   000005   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000007   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000009   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00000C   7402         MOV       A,#0x2
   \   00000E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000011                REQUIRE ??Subroutine94_0
   \   000011                ; // Fall through to label ??Subroutine94_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000   7409         MOV       A,#0x9
   \   000002                REQUIRE ??Subroutine95_0
   \   000002                ; // Fall through to label ??Subroutine95_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   FF           MOV       R7,A
   \   000001                REQUIRE ??Subroutine117_0
   \   000001                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine118_0
   \   000003                ; // Fall through to label ??Subroutine118_0
    379          
    380          /*********************************************************************
    381           * @fn          ZDP_MatchDescReq
    382           *
    383           * @brief       This builds and send a Match_Desc_req message.  This
    384           *              function sends a broadcast or unicast message
    385           *              requesting the list of endpoint/interfaces that
    386           *              match profile ID and cluster IDs.
    387           *
    388           * @param       dstAddr - destination address
    389           * @param       nwkAddr - network address of interest
    390           * @param       ProfileID - Profile ID
    391           * @param       NumInClusters - number of input clusters
    392           * @param       InClusterList - input cluster ID list
    393           * @param       NumOutClusters - number of output clusters
    394           * @param       OutClusterList - output cluster ID list
    395           * @param       SecurityEnable - Security Options
    396           *
    397           * @return      afStatus_t
    398           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    399          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    400                                          uint16 ProfileID,
    401                                          byte NumInClusters, cId_t *InClusterList,
    402                                          byte NumOutClusters, cId_t *OutClusterList,
    403                                          byte SecurityEnable )
    404          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    405            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   12....       LCALL     ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   00000A   7412         MOV       A,#0x12
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F5..         MOV       ?V0,A
    406            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    407            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    408          
    409            (void)SecurityEnable;  // Intentionally unreferenced parameter
    410          
    411            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000012   EE           MOV       A,R6
   \   000013   25..         ADD       A,?V0
   \   000015   C3           CLR       C
   \   000016   33           RLC       A
   \   000017   2406         ADD       A,#0x6
   \   000019   FF           MOV       R7,A
    412          
    413            if ( len >= ZDP_BUF_SZ-1 )
   \   00001A   C3           CLR       C
   \   00001B   944F         SUBB      A,#0x4f
   \   00001D   4005         JC        ??ZDP_MatchDescReq_0
    414            {
    415              return afStatus_MEM_FAIL;
   \   00001F   7910         MOV       R1,#0x10
   \   000021   02....       LJMP      ??ZDP_MatchDescReq_1 & 0xFFFF
    416            }
    417          
    418            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    419            // this command to 0xFFFF.  So, here we will filter this and replace
    420            // with 0xFFFD to only send to devices with RX ON.  This includes the
    421            // network address of interest.
    422            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    423                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F5..         MOV       ?V1,A
   \   000033   740F         MOV       A,#0xf
   \   000035   65..         XRL       A,?V1
   \   000037   6006         JZ        ??ZDP_MatchDescReq_2
   \   000039   7402         MOV       A,#0x2
   \   00003B   65..         XRL       A,?V1
   \   00003D   7018         JNZ       ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   00003F   8A82         MOV       DPL,R2
   \   000041   8B83         MOV       DPH,R3
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F4           CPL       A
   \   000045   7003         JNZ       ??ZDP_MatchDescReq_4
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F4           CPL       A
   \                     ??ZDP_MatchDescReq_4:
   \   00004A   700B         JNZ       ??ZDP_MatchDescReq_3
    424            {
    425              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00004C   8A82         MOV       DPL,R2
   \   00004E   8B83         MOV       DPH,R3
   \   000050   74FD         MOV       A,#-0x3
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   74FF         MOV       A,#-0x1
   \   000056   F0           MOVX      @DPTR,A
    426            }
    427            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   000057   74FF         MOV       A,#-0x1
   \   000059   6C           XRL       A,R4
   \   00005A   7003         JNZ       ??ZDP_MatchDescReq_5
   \   00005C   74FF         MOV       A,#-0x1
   \   00005E   6D           XRL       A,R5
   \                     ??ZDP_MatchDescReq_5:
   \   00005F   7004         JNZ       ??ZDP_MatchDescReq_6
    428            {
    429              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000061   7CFD         MOV       R4,#-0x3
   \   000063   7DFF         MOV       R5,#-0x1
    430            }
    431          
    432            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   000065   EC           MOV       A,R4
   \   000066   8882         MOV       DPL,R0
   \   000068   8983         MOV       DPH,R1
   \   00006A   F0           MOVX      @DPTR,A
    433            *pBuf++ = HI_UINT16( nwkAddr );
   \   00006B   ED           MOV       A,R5
   \   00006C   A3           INC       DPTR
   \   00006D   F0           MOVX      @DPTR,A
   \   00006E   740E         MOV       A,#0xe
   \   000070   12....       LCALL     ?XSTACK_DISP0_8
   \   000073   12....       LCALL     ?Subroutine44 & 0xFFFF
    434          
    435            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \                     ??CrossCallReturnLabel_62:
   \   000076   EC           MOV       A,R4
   \   000077   8882         MOV       DPL,R0
   \   000079   8983         MOV       DPH,R1
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   F0           MOVX      @DPTR,A
    436            *pBuf++ = HI_UINT16( ProfileID );
   \   00007E   ED           MOV       A,R5
   \   00007F   8882         MOV       DPL,R0
   \   000081   8983         MOV       DPH,R1
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   12....       LCALL     ?Subroutine35 & 0xFFFF
    437          
    438            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_47:
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   E8           MOV       A,R0
   \   00008C   2405         ADD       A,#0x5
   \   00008E   F8           MOV       R0,A
   \   00008F   5001         JNC       ??ZDP_MatchDescReq_7
   \   000091   09           INC       R1
    439            if ( NumInClusters )
   \                     ??ZDP_MatchDescReq_7:
   \   000092   EE           MOV       A,R6
   \   000093   6019         JZ        ??ZDP_MatchDescReq_8
    440            {
    441              for (i=0; i<NumInClusters; ++i)  {
   \   000095   75..00       MOV       ?V1,#0x0
   \   000098   7410         MOV       A,#0x10
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   12....       LCALL     ?Subroutine44 & 0xFFFF
    442                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??CrossCallReturnLabel_63:
   \   0000A0   12....       LCALL     ?Subroutine11 & 0xFFFF
    443                *pBuf++ = HI_UINT16( InClusterList[i] );
    444              }
   \                     ??CrossCallReturnLabel_2:
   \   0000A3   5001         JNC       ??ZDP_MatchDescReq_9
   \   0000A5   09           INC       R1
   \                     ??ZDP_MatchDescReq_9:
   \   0000A6   05..         INC       ?V1
   \   0000A8   E5..         MOV       A,?V1
   \   0000AA   C3           CLR       C
   \   0000AB   9E           SUBB      A,R6
   \   0000AC   40F2         JC        ??CrossCallReturnLabel_63
    445            }
    446          
    447            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_8:
   \   0000AE   8882         MOV       DPL,R0
   \   0000B0   8983         MOV       DPH,R1
   \   0000B2   E5..         MOV       A,?V0
   \   0000B4   F0           MOVX      @DPTR,A
   \   0000B5   A3           INC       DPTR
   \   0000B6   A882         MOV       R0,DPL
   \   0000B8   A983         MOV       R1,DPH
    448            if ( NumOutClusters )
   \   0000BA   601A         JZ        ??ZDP_MatchDescReq_10
    449            {
    450              for (i=0; i<NumOutClusters; ++i)  {
   \   0000BC   75..00       MOV       ?V1,#0x0
   \   0000BF   7413         MOV       A,#0x13
   \   0000C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C4   12....       LCALL     ?Subroutine44 & 0xFFFF
    451                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??CrossCallReturnLabel_64:
   \   0000C7   12....       LCALL     ?Subroutine11 & 0xFFFF
    452                *pBuf++ = HI_UINT16( OutClusterList[i] );
    453              }
   \                     ??CrossCallReturnLabel_3:
   \   0000CA   5001         JNC       ??ZDP_MatchDescReq_11
   \   0000CC   09           INC       R1
   \                     ??ZDP_MatchDescReq_11:
   \   0000CD   05..         INC       ?V1
   \   0000CF   E5..         MOV       A,?V1
   \   0000D1   C3           CLR       C
   \   0000D2   95..         SUBB      A,?V0
   \   0000D4   40F1         JC        ??CrossCallReturnLabel_64
    454            }
    455          
    456            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_10:
   \   0000D6                ; Setup parameters for call to function fillAndSend
   \   0000D6   75..06       MOV       ?V0,#0x6
   \   0000D9   75..00       MOV       ?V1,#0x0
   \   0000DC   78..         MOV       R0,#?V0
   \   0000DE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E1   EF           MOV       A,R7
   \   0000E2   F9           MOV       R1,A
   \   0000E3   EA           MOV       A,R2
   \   0000E4   FC           MOV       R4,A
   \   0000E5   EB           MOV       A,R3
   \   0000E6   FD           MOV       R5,A
   \   0000E7   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   0000E9   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   0000EB   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000EE   7402         MOV       A,#0x2
   \   0000F0   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0000F3   80..         SJMP      ??Subroutine93_0
    457          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E5..         MOV       A,?V1
   \   000002   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000005   EC           MOV       A,R4
   \   000006   25..         ADD       A,?V2
   \   000008   F5..         MOV       ?V2,A
   \   00000A   ED           MOV       A,R5
   \   00000B   35..         ADDC      A,?V3
   \   00000D   F5..         MOV       ?V3,A
   \   00000F   85..82       MOV       DPL,?V2
   \   000012   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000015   F0           MOVX      @DPTR,A
   \   000016   85..82       MOV       DPL,?V2
   \   000019   85..83       MOV       DPH,?V3
   \   00001C   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   F5..         MOV       ?V2,A
   \   000004   E4           CLR       A
   \   000005   33           RLC       A
   \   000006   F5..         MOV       ?V3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   8882         MOV       DPL,R0
   \   000004   8983         MOV       DPH,R1
   \   000006   A3           INC       DPTR
   \   000007   F0           MOVX      @DPTR,A
   \   000008   E8           MOV       A,R0
   \   000009   2402         ADD       A,#0x2
   \   00000B   F8           MOV       R0,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine110_0
   \   000002                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET
    458          
    459          /*********************************************************************
    460           * @fn          ZDP_SimpleDescReq
    461           *
    462           * @brief       This builds and send a NWK_Simple_Desc_req
    463           *              message.  This function sends unicast message to the
    464           *              destination device.
    465           *
    466           * @param       dstAddr - destination address
    467           * @param       nwkAddr - 16 bit address
    468           * @param       epIntf - endpoint/interface
    469           * @param       SecurityEnable - Security Options
    470           *
    471           * @return      afStatus_t
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    474                                              byte endPoint, byte SecurityEnable )
    475          
    476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    477            (void)SecurityEnable;  // Intentionally unreferenced parameter
    478          
    479            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL     ?Subroutine17 & 0xFFFF
    480            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_17:
   \   000008   12....       LCALL     ?Subroutine13 & 0xFFFF
    481            ZDP_TmpBuf[2] = endPoint;
    482          
    483            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \                     ??CrossCallReturnLabel_6:
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   75..04       MOV       ?V0,#0x4
   \   00000E   75..00       MOV       ?V1,#0x0
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   7903         MOV       R1,#0x3
   \   000018   02....       LJMP      ?Subroutine8 & 0xFFFF
    484          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000003   A3           INC       DPTR
   \   000004   E9           MOV       A,R1
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET
    485          
    486          /*********************************************************************
    487           * @fn          ZDP_UserDescSet
    488           *
    489           * @brief       This builds and send a User_Desc_set message to set
    490           *              the user descriptor.  This function sends unicast
    491           *              message to the destination device.
    492           *
    493           * @param       dstAddr - destination address
    494           * @param       nwkAddr - 16 bit address
    495           * @param       UserDescriptor - user descriptor
    496           * @param       SecurityEnable - Security Options
    497           *
    498           * @return      afStatus_t
    499           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    500          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    501                                    UserDescriptorFormat_t *UserDescriptor,
    502                                    byte SecurityEnable )
    503          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine56 & 0xFFFF
    504            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_227:
   \   000008   88..         MOV       ?V2,R0
   \   00000A   89..         MOV       ?V3,R1
   \   00000C   740F         MOV       A,#0xf
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine40 & 0xFFFF
    505            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    506                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \                     ??CrossCallReturnLabel_52:
   \   000014   FA           MOV       R2,A
   \   000015   C3           CLR       C
   \   000016   9410         SUBB      A,#0x10
   \   000018   5004         JNC       ??ZDP_UserDescSet_0
   \   00001A   8A..         MOV       ?V0,R2
   \   00001C   8003         SJMP      ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   00001E   75..10       MOV       ?V0,#0x10
    507            byte addrLen = 2;
    508          
    509            (void)SecurityEnable;  // Intentionally unreferenced parameter
    510          
    511            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   000021   EC           MOV       A,R4
   \   000022   85..82       MOV       DPL,?V2
   \   000025   85..83       MOV       DPH,?V3
   \   000028   F0           MOVX      @DPTR,A
    512            *pBuf++ = HI_UINT16( nwkAddr );
   \   000029   ED           MOV       A,R5
   \   00002A   A3           INC       DPTR
   \   00002B   12....       LCALL     ?Subroutine30 & 0xFFFF
    513          
    514            *pBuf++ = len;
   \                     ??CrossCallReturnLabel_40:
   \   00002E   E5..         MOV       A,?V0
   \   000030   12....       LCALL     ?Subroutine10 & 0xFFFF
    515            addrLen = 3;
    516          
    517            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
   \                     ??CrossCallReturnLabel_0:
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000036   AC..         MOV       R4,?V0
   \   000038   7D00         MOV       R5,#0x0
   \   00003A   E5..         MOV       A,?V2
   \   00003C   2403         ADD       A,#0x3
   \   00003E   FA           MOV       R2,A
   \   00003F   E4           CLR       A
   \   000040   35..         ADDC      A,?V3
   \   000042   FB           MOV       R3,A
   \   000043   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000046   7403         MOV       A,#0x3
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
    518            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   00004B                ; Setup parameters for call to function osal_memset
   \   00004B   A8..         MOV       R0,?V0
   \   00004D   7410         MOV       A,#0x10
   \   00004F   C3           CLR       C
   \   000050   98           SUBB      A,R0
   \   000051   FC           MOV       R4,A
   \   000052   95E0         SUBB      A,0xE0 /* A   */
   \   000054   FD           MOV       R5,A
   \   000055   7920         MOV       R1,#0x20
   \   000057   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    519          
    520            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   00005A                ; Setup parameters for call to function fillAndSend
   \   00005A   75..14       MOV       ?V2,#0x14
   \   00005D   75..00       MOV       ?V3,#0x0
   \   000060   78..         MOV       R0,#?V2
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   7913         MOV       R1,#0x13
   \   000067   EE           MOV       A,R6
   \   000068   FC           MOV       R4,A
   \   000069   EF           MOV       A,R7
   \   00006A   FD           MOV       R5,A
   \   00006B   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   00006D   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00006F   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000072   7402         MOV       A,#0x2
   \   000074                REQUIRE ?Subroutine3
   \   000074                ; // Fall through to label ?Subroutine3
    521          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine96_0
   \   000003                ; // Fall through to label ??Subroutine96_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   8983         MOV       DPH,R1
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000003   A982         MOV       R1,DPL
   \   000005   AA83         MOV       R2,DPH
   \   000007   89..         MOV       ?V4,R1
   \   000009   8A..         MOV       ?V5,R2
   \   00000B   75..00       MOV       ?V6,#0x0
   \   00000E   78..         MOV       R0,#?V4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003                REQUIRE ??Subroutine116_0
   \   000003                ; // Fall through to label ??Subroutine116_0
    522          
    523          /*********************************************************************
    524           * @fn          ZDP_ServerDiscReq
    525           *
    526           * @brief       Build and send a Server_Discovery_req request message.
    527           *
    528           * @param       serverMask - 16-bit bit-mask of server services being sought.
    529           * @param       SecurityEnable - Security Options
    530           *
    531           * @return      afStatus_t
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    534          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    535            uint8 *pBuf = ZDP_TmpBuf;
   \   00000C   12....       LCALL     ??Subroutine117_0 & 0xFFFF
    536            zAddrType_t dstAddr;
    537          
    538            dstAddr.addrMode = AddrBroadcast;
   \                     ??CrossCallReturnLabel_241:
   \   00000F   7408         MOV       A,#0x8
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ?Subroutine18 & 0xFFFF
    539            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    540          
    541            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_18:
   \   000017   EA           MOV       A,R2
   \   000018   8882         MOV       DPL,R0
   \   00001A   8983         MOV       DPH,R1
   \   00001C   F0           MOVX      @DPTR,A
    542            *pBuf = HI_UINT16( serverMask );
   \   00001D   EB           MOV       A,R3
   \   00001E   A3           INC       DPTR
   \   00001F   F0           MOVX      @DPTR,A
    543          
    544            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    545                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   000020   EE           MOV       A,R6
   \   000021   90....       MOV       DPTR,#ZDP_TxOptions
   \   000024   6004         JZ        ??ZDP_ServerDiscReq_0
   \   000026   7440         MOV       A,#0x40
   \   000028   8001         SJMP      ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   00002A   E4           CLR       A
   \                     ??ZDP_ServerDiscReq_1:
   \   00002B   F0           MOVX      @DPTR,A
   \   00002C                ; Setup parameters for call to function fillAndSend
   \   00002C   75..15       MOV       ?V0,#0x15
   \   00002F   75..00       MOV       ?V1,#0x0
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   7902         MOV       R1,#0x2
   \   000039   E9           MOV       A,R1
   \   00003A   12....       LCALL     ?XSTACK_DISP102_8
   \   00003D   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   00003F   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000041   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000044   7402         MOV       A,#0x2
   \   000046   12....       LCALL     ?DEALLOC_XSTACK8
   \   000049   E9           MOV       A,R1
   \   00004A   F9           MOV       R1,A
   \   00004B   90....       MOV       DPTR,#ZDP_TxOptions
   \   00004E   E4           CLR       A
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   02....       LJMP      ??Subroutine94_0 & 0xFFFF
    546          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
    547          
    548          /*********************************************************************
    549           * @fn          ZDP_DeviceAnnce
    550           *
    551           * @brief       This builds and send a Device_Annce message.  This
    552           *              function sends a broadcast message.
    553           *
    554           * @param       nwkAddr - 16 bit address of the device
    555           * @param       IEEEAddr - 64 bit address of the device
    556           * @param       capabilities - device capabilities.  This field is only
    557           *                 sent for v1.1 networks.
    558           * @param       SecurityEnable - Security Options
    559           *
    560           * @return      afStatus_t
    561           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    562          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    563                                        byte capabilities, byte SecurityEnable )
    564          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    565            zAddrType_t dstAddr;
    566            uint8 len;
    567          
    568            (void)SecurityEnable;  // Intentionally unreferenced parameter
    569          
    570            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV       A,#0x8
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine18 & 0xFFFF
    571            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    572          
    573            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_19:
   \   000014   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000017   EA           MOV       A,R2
   \   000018   12....       LCALL     ?Subroutine21 & 0xFFFF
    574            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_24:
   \   00001B   EB           MOV       A,R3
   \   00001C   F0           MOVX      @DPTR,A
    575            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   00001D                ; Setup parameters for call to function sAddrExtCpy
   \   00001D   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX      A,@DPTR
   \   000021   2402         ADD       A,#0x2
   \   000023   FA           MOV       R2,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   3400         ADDC      A,#0x0
   \   000028   FB           MOV       R3,A
   \   000029   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    576            len = 2 + Z_EXTADDR_LEN;
    577          
    578            ZDP_TmpBuf[10] = capabilities;
   \   00002C   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   00002F   C8           XCH       A,R0
   \   000030   240A         ADD       A,#0xa
   \   000032   F582         MOV       DPL,A
   \   000034   E4           CLR       A
   \   000035   38           ADDC      A,R0
   \   000036   F583         MOV       DPH,A
   \   000038   EE           MOV       A,R6
   \   000039   F0           MOVX      @DPTR,A
    579            len++;
    580          
    581            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   75..13       MOV       ?V0,#0x13
   \   00003D   75..00       MOV       ?V1,#0x0
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000045   790B         MOV       R1,#0xb
   \   000047   02....       LJMP      ?Subroutine2 & 0xFFFF
    582          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003   E0           MOVX      A,@DPTR
   \   000004                REQUIRE ??Subroutine103_0
   \   000004                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000003   22           RET
    583          
    584          /*********************************************************************
    585           * @fn          ZDP_ParentAnnce
    586           *
    587           * @brief       This builds and send a Parent_Annce and Parent_Annce_Rsp
    588           *              messages, it will depend on the clusterID parameter.
    589           *
    590           * @param       TransSeq - ZDP Transaction Sequence Number
    591           * @param       dstAddr - destination address
    592           * @param       numberOfChildren - 8 bit number of children
    593           * @param       childInfo - list of children information (ExtAddr and Age)
    594           * @param       clusterID - Parent_annce or Parent_annce_rsp
    595           * @param       SecurityEnable - Security Options
    596           *
    597           * @return      afStatus_t
    598           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    599          afStatus_t ZDP_ParentAnnce( uint8 *TransSeq,
   \                     ZDP_ParentAnnce:
    600                                      zAddrType_t *dstAddr,
    601                                      uint8 numberOfChildren,
    602                                      uint8 *childInfo,
    603                                      cId_t clusterID,
    604                                      uint8 SecurityEnable )
    605          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   \   00000D   89..         MOV       ?V8,R1
    606            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL     ??Subroutine107_0 & 0xFFFF
    607            ZDO_ChildInfo_t *pChildInfo;
    608            uint8 i, len;
    609          
    610            (void)SecurityEnable;  // Intentionally unreferenced parameter
    611          
    612            // NumberOfChildren + ( numberOfChildren * ChildInfo).
    613            len = 1 + ( numberOfChildren * sizeof(ZDO_ChildInfo_t) );
   \                     ??CrossCallReturnLabel_188:
   \   000012   75F00C       MOV       B,#0xc
   \   000015   E9           MOV       A,R1
   \   000016   A4           MUL       AB
   \   000017   04           INC       A
   \   000018   F5..         MOV       ?V6,A
    614          
    615            if ( len >= ZDP_BUF_SZ-1 )
   \   00001A   944F         SUBB      A,#0x4f
   \   00001C   4005         JC        ??ZDP_ParentAnnce_0
    616            {
    617              return afStatus_MEM_FAIL;
   \   00001E   7910         MOV       R1,#0x10
   \   000020   02....       LJMP      ??ZDP_ParentAnnce_1 & 0xFFFF
    618            }
    619          
    620            pChildInfo = (ZDO_ChildInfo_t *)childInfo;
    621          
    622            if ( dstAddr->addrMode == AddrBroadcast )
   \                     ??ZDP_ParentAnnce_0:
   \   000023   8E82         MOV       DPL,R6
   \   000025   8F83         MOV       DPH,R7
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   640F         XRL       A,#0xf
   \   000032   700B         JNZ       ??ZDP_ParentAnnce_2
    623            {
    624              // Make sure is sent to 0xFFFC
    625              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   000034   8E82         MOV       DPL,R6
   \   000036   8F83         MOV       DPH,R7
   \   000038   74FC         MOV       A,#-0x4
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   74FF         MOV       A,#-0x1
   \   00003E   F0           MOVX      @DPTR,A
    626            }
    627          
    628            *pBuf++ = numberOfChildren;
   \                     ??ZDP_ParentAnnce_2:
   \   00003F   8A82         MOV       DPL,R2
   \   000041   8B83         MOV       DPH,R3
   \   000043   E9           MOV       A,R1
   \   000044   12....       LCALL     ??Subroutine97_0 & 0xFFFF
    629          
    630            for ( i = 0; i < numberOfChildren; i++ )
   \                     ??CrossCallReturnLabel_142:
   \   000047   75..00       MOV       ?V7,#0x0
   \   00004A   7414         MOV       A,#0x14
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000052   8034         SJMP      ??ZDP_ParentAnnce_3
    631            {
    632              pBuf = osal_cpyExtAddr( pBuf, pChildInfo[i].extAddr );
   \                     ??ZDP_ParentAnnce_4:
   \   000054   E5..         MOV       A,?V7
   \   000056   75F00C       MOV       B,#0xc
   \   000059   A4           MUL       AB
   \   00005A   F8           MOV       R0,A
   \   00005B   A9F0         MOV       R1,B
   \   00005D   E5..         MOV       A,?V0
   \   00005F   28           ADD       A,R0
   \   000060   F5..         MOV       ?V4,A
   \   000062   E5..         MOV       A,?V1
   \   000064   39           ADDC      A,R1
   \   000065   F5..         MOV       ?V5,A
   \   000067                ; Setup parameters for call to function sAddrExtCpy
   \   000067   AC..         MOV       R4,?V4
   \   000069   FD           MOV       R5,A
   \   00006A   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    633          
    634              pBuf = osal_buffer_uint32( pBuf, pChildInfo[i].age );
   \   00006D                ; Setup parameters for call to function osal_buffer_uint32
   \   00006D   85..82       MOV       DPL,?V4
   \   000070   85..83       MOV       DPH,?V5
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00007E   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000081   7404         MOV       A,#0x4
   \   000083   12....       LCALL     ?DEALLOC_XSTACK8
    635            }
   \   000086   05..         INC       ?V7
   \                     ??ZDP_ParentAnnce_3:
   \   000088   E5..         MOV       A,?V7
   \   00008A   C3           CLR       C
   \   00008B   95..         SUBB      A,?V8
   \   00008D   40C5         JC        ??ZDP_ParentAnnce_4
    636          
    637            return fillAndSend( TransSeq, dstAddr, clusterID, len );
   \   00008F                ; Setup parameters for call to function fillAndSend
   \   00008F   7416         MOV       A,#0x16
   \   000091   12....       LCALL     ?XSTACK_DISP0_8
   \   000094   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000097   A9..         MOV       R1,?V6
   \   000099   EE           MOV       A,R6
   \   00009A   FC           MOV       R4,A
   \   00009B   EF           MOV       A,R7
   \   00009C   FD           MOV       R5,A
   \   00009D   AA..         MOV       R2,?V2
   \   00009F   AB..         MOV       R3,?V3
   \   0000A1   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000A4   7402         MOV       A,#0x2
   \   0000A6   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_ParentAnnce_1:
   \   0000A9                REQUIRE ?Subroutine4
   \   0000A9                ; // Fall through to label ?Subroutine4
    638          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F0C         MOV       R7,#0xc
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   AA82         MOV       R2,DPL
   \   000004   AB83         MOV       R3,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine108_0
   \   000003                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    639          
    640          /*********************************************************************
    641           * Address Responses
    642           */
    643          
    644          /*********************************************************************
    645           * @fn      zdpProcessAddrReq
    646           *
    647           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    648           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    649           *
    650           * @param   inMsg - incoming message
    651           *
    652           * @return  none
    653           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    654          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    655          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    656            associated_devices_t *pAssoc;
    657            uint8 reqType;
    658            uint16 aoi = INVALID_NODE_ADDR;
   \   000009   7EFE         MOV       R6,#-0x2
   \   00000B   7FFF         MOV       R7,#-0x1
    659            uint8 *ieee = NULL;
   \   00000D   75..00       MOV       ?V2,#0x0
   \   000010   75..00       MOV       ?V3,#0x0
    660          
    661            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   000013   EA           MOV       A,R2
   \   000014   240C         ADD       A,#0xc
   \   000016   F5..         MOV       ?V4,A
   \   000018   E4           CLR       A
   \   000019   35..         ADDC      A,?V1
   \   00001B   F5..         MOV       ?V5,A
   \   00001D   85..82       MOV       DPL,?V4
   \   000020   F583         MOV       DPH,A
   \   000022   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000025   EA           MOV       A,R2
   \   000026   4B           ORL       A,R3
   \   000027   7004         JNZ       ??zdpProcessAddrReq_0
   \   000029   7C08         MOV       R4,#0x8
   \   00002B   8002         SJMP      ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   00002D   7C02         MOV       R4,#0x2
   \                     ??zdpProcessAddrReq_1:
   \   00002F   E5..         MOV       A,?V0
   \   000031   2413         ADD       A,#0x13
   \   000033   F582         MOV       DPL,A
   \   000035   E4           CLR       A
   \   000036   35..         ADDC      A,?V1
   \   000038   F583         MOV       DPH,A
   \   00003A   12....       LCALL     ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00003D   2C           ADD       A,R4
   \   00003E   F582         MOV       DPL,A
   \   000040   E4           CLR       A
   \   000041   39           ADDC      A,R1
   \   000042   F583         MOV       DPH,A
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F5..         MOV       ?V6,A
    662          
    663            if ( inMsg->clusterID == NWK_addr_req )
   \   000047   EA           MOV       A,R2
   \   000048   4B           ORL       A,R3
   \   000049   7017         JNZ       ??zdpProcessAddrReq_2
    664          
    665            {
    666              ieee = inMsg->asdu;
   \   00004B   88..         MOV       ?V2,R0
   \   00004D   89..         MOV       ?V3,R1
    667          
    668              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   00004F                ; Setup parameters for call to function sAddrExtCmp
   \   00004F   AC..         MOV       R4,?V2
   \   000051   AD..         MOV       R5,?V3
   \   000053   7A..         MOV       R2,#saveExtAddr & 0xff
   \   000055   7B..         MOV       R3,#(saveExtAddr >> 8) & 0xff
   \   000057   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00005A   E9           MOV       A,R1
   \   00005B   6039         JZ        ??zdpProcessAddrReq_3
    669              {
    670                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   00005D   12....       LCALL     ?Subroutine46 & 0xFFFF
    671              }
    672              // Handle response for sleeping end devices
    673              else if ( (ZSTACK_ROUTER_BUILD)
    674                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    675                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    676              {
    677                aoi = pAssoc->shortAddr;
    678                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    679                  reqType = 0xFF; // Force Invalid
    680              }
    681            }
   \                     ??CrossCallReturnLabel_210:
   \   000060   8024         SJMP      ??zdpProcessAddrReq_4
    682            else  // if ( inMsg->clusterID == IEEE_addr_req )
    683            {
    684              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   000062   8882         MOV       DPL,R0
   \   000064   8983         MOV       DPH,R1
   \   000066   E0           MOVX      A,@DPTR
   \   000067   FA           MOV       R2,A
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F8           MOV       R0,A
   \   00006B   E4           CLR       A
   \   00006C   C8           XCH       A,R0
   \   00006D   F9           MOV       R1,A
   \   00006E   EA           MOV       A,R2
   \   00006F   28           ADD       A,R0
   \   000070   FE           MOV       R6,A
   \   000071   E4           CLR       A
   \   000072   39           ADDC      A,R1
   \   000073   FF           MOV       R7,A
    685          
    686              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000074   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000077   E0           MOVX      A,@DPTR
   \   000078   6E           XRL       A,R6
   \   000079   7003         JNZ       ??zdpProcessAddrReq_5
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_5:
   \   00007E   7016         JNZ       ??zdpProcessAddrReq_3
    687              {
    688                ieee = saveExtAddr;
   \   000080   75....       MOV       ?V2,#saveExtAddr & 0xff
   \   000083   75....       MOV       ?V3,#(saveExtAddr >> 8) & 0xff
    689              }
    690              else if ( (ZSTACK_ROUTER_BUILD)
    691                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    692                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    693              {
    694                AddrMgrEntry_t addrEntry;
    695                addrEntry.user = ADDRMGR_USER_DEFAULT;
    696                addrEntry.index = pAssoc->addrIdx;
    697                if ( AddrMgrEntryGet( &addrEntry ) )
    698                {
    699                  ieee = addrEntry.extAddr;
    700                }
    701          
    702                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    703                  reqType = 0xFF; // Force Invalid
    704              }
    705            }
    706          
    707            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_4:
   \   000086   74FE         MOV       A,#-0x2
   \   000088   6E           XRL       A,R6
   \   000089   7003         JNZ       ??zdpProcessAddrReq_6
   \   00008B   74FF         MOV       A,#-0x1
   \   00008D   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_6:
   \   00008E   6006         JZ        ??zdpProcessAddrReq_3
   \   000090   E5..         MOV       A,?V2
   \   000092   45..         ORL       A,?V3
   \   000094   700E         JNZ       ??zdpProcessAddrReq_7
   \                     ??zdpProcessAddrReq_3:
   \   000096   E5..         MOV       A,?V0
   \   000098   240B         ADD       A,#0xb
   \   00009A   F582         MOV       DPL,A
   \   00009C   E4           CLR       A
   \   00009D   35..         ADDC      A,?V1
   \   00009F   F583         MOV       DPH,A
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   707F         JNZ       ??zdpProcessAddrReq_8
    708            {
    709              uint8 stat;
    710              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_7:
   \   0000A4   12....       LCALL     ??Subroutine107_0 & 0xFFFF
    711              // Status + IEEE-Addr + Nwk-Addr.
    712              uint8 len = 1 + Z_EXTADDR_LEN + 2;
    713          
    714              // If aoi and iee are both setup, we found results
    715              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \                     ??CrossCallReturnLabel_189:
   \   0000A7   74FE         MOV       A,#-0x2
   \   0000A9   6E           XRL       A,R6
   \   0000AA   7003         JNZ       ??zdpProcessAddrReq_9
   \   0000AC   74FF         MOV       A,#-0x1
   \   0000AE   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_9:
   \   0000AF   6018         JZ        ??zdpProcessAddrReq_10
   \   0000B1   E5..         MOV       A,?V2
   \   0000B3   45..         ORL       A,?V3
   \   0000B5   6012         JZ        ??zdpProcessAddrReq_10
    716              {
    717                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED))
    718                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   0000B7   E5..         MOV       A,?V6
   \   0000B9   6006         JZ        ??zdpProcessAddrReq_11
   \   0000BB   7401         MOV       A,#0x1
   \   0000BD   65..         XRL       A,?V6
   \   0000BF   7004         JNZ       ??zdpProcessAddrReq_12
   \                     ??zdpProcessAddrReq_11:
   \   0000C1   7800         MOV       R0,#0x0
   \   0000C3   801E         SJMP      ??zdpProcessAddrReq_13
   \                     ??zdpProcessAddrReq_12:
   \   0000C5   7880         MOV       R0,#-0x80
   \   0000C7   801A         SJMP      ??zdpProcessAddrReq_13
    719              }
    720              else
    721              {
    722                // not found and the req was unicast to this device
    723                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_10:
   \   0000C9   7881         MOV       R0,#-0x7f
    724          
    725                // Fill in the missing field with this device's address
    726                if ( inMsg->clusterID == NWK_addr_req )
   \   0000CB   85..82       MOV       DPL,?V4
   \   0000CE   85..83       MOV       DPH,?V5
   \   0000D1   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000D4   EC           MOV       A,R4
   \   0000D5   4D           ORL       A,R5
   \   0000D6   7005         JNZ       ??zdpProcessAddrReq_14
    727                {
    728                  aoi = ZDAppNwkAddr.addr.shortAddr;
   \   0000D8   12....       LCALL     ?Subroutine46 & 0xFFFF
    729                }
   \                     ??CrossCallReturnLabel_211:
   \   0000DB   8006         SJMP      ??zdpProcessAddrReq_13
    730                else
    731                {
    732                  ieee = saveExtAddr;
   \                     ??zdpProcessAddrReq_14:
   \   0000DD   75....       MOV       ?V2,#saveExtAddr & 0xff
   \   0000E0   75....       MOV       ?V3,#(saveExtAddr >> 8) & 0xff
    733                }
    734              }
    735          
    736              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_13:
   \   0000E3   E8           MOV       A,R0
   \   0000E4   12....       LCALL     ?Subroutine22 & 0xFFFF
    737          
    738              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \                     ??CrossCallReturnLabel_144:
   \   0000E7                ; Setup parameters for call to function sAddrExtCpy
   \   0000E7   AC..         MOV       R4,?V2
   \   0000E9   AD..         MOV       R5,?V3
   \   0000EB   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000EE   8A82         MOV       DPL,R2
   \   0000F0   8B83         MOV       DPH,R3
    739          
    740              *pBuf++ = LO_UINT16( aoi );
   \   0000F2   EE           MOV       A,R6
   \   0000F3   F0           MOVX      @DPTR,A
    741              *pBuf++ = HI_UINT16( aoi );
   \   0000F4   EF           MOV       A,R7
   \   0000F5   A3           INC       DPTR
   \   0000F6   F0           MOVX      @DPTR,A
    742          
    743              if ( ZSTACK_ROUTER_BUILD )
    744              {
    745                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    746                     && (stat == ZDP_SUCCESS) )
    747                {
    748                  uint8  cnt = 0;
    749                  uint16 *list = AssocMakeList( &cnt );
    750          
    751                  if ( list != NULL )
    752                  {
    753                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
    754                    uint16 *pList = list + idx;
    755          
    756                    // NumAssocDev field is only present on success.
    757                    if ( cnt > idx )
    758                    {
    759                      cnt -= idx;
    760                      len += (cnt * sizeof( uint16 ));
    761                    }
    762                    else
    763                    {
    764                      cnt = 0;
    765                    }
    766                    *pBuf++ = cnt;
    767                    len++;
    768          
    769                    // StartIndex field is only present if NumAssocDev field is non-zero.
    770                    *pBuf++ = idx;
    771                    len++;
    772          
    773                    while ( cnt != 0 )
    774                    {
    775                      *pBuf++ = LO_UINT16( *pList );
    776                      *pBuf++ = HI_UINT16( *pList );
    777                      pList++;
    778                      cnt--;
    779                    }
    780          
    781                    osal_mem_free( (uint8 *)list );
    782                  }
    783                  else
    784                  {
    785                    // NumAssocDev field is only present on success.
    786                    *pBuf++ = 0;
    787                    len++;
    788                  }
    789                }
    790              }
    791          
    792              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   0000F7   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000FA   7410         MOV       A,#0x10
   \   0000FC   F0           MOVX      @DPTR,A
    793              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   0000FD                ; Setup parameters for call to function fillAndSend
   \   0000FD   85..82       MOV       DPL,?V4
   \   000100   85..83       MOV       DPH,?V5
   \   000103   E0           MOVX      A,@DPTR
   \   000104   F5..         MOV       ?V2,A
   \   000106   A3           INC       DPTR
   \   000107   E0           MOVX      A,@DPTR
   \   000108   4480         ORL       A,#0x80
   \   00010A   F5..         MOV       ?V3,A
   \   00010C   78..         MOV       R0,#?V2
   \   00010E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000111   790B         MOV       R1,#0xb
   \   000113   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000116   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000119   7402         MOV       A,#0x2
   \   00011B   12....       LCALL     ?DEALLOC_XSTACK8
    794              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   00011E   90....       MOV       DPTR,#ZDP_TxOptions
   \   000121   E4           CLR       A
   \   000122   F0           MOVX      @DPTR,A
    795            }
    796          }
   \                     ??zdpProcessAddrReq_8:
   \   000123   02....       LJMP      ??Subroutine96_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004                REQUIRE ??Subroutine97_0
   \   000004                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   E5..         MOV       A,?V0
   \   000002   2402         ADD       A,#0x2
   \   000004   FC           MOV       R4,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V1
   \   000008   FD           MOV       R5,A
   \   000009   E5..         MOV       A,?V0
   \   00000B   240F         ADD       A,#0xf
   \   00000D   FA           MOV       R2,A
   \   00000E   E4           CLR       A
   \   00000F   35..         ADDC      A,?V1
   \   000011   FB           MOV       R3,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000003                REQUIRE ??Subroutine112_0
   \   000003                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET
    797          
    798          /*********************************************************************
    799           * @fn          ZDP_NodeDescMsg
    800           *
    801           * @brief       Builds and sends a Node Descriptor message, unicast to the
    802           *              specified device.
    803           *
    804           * @param       inMsg - incoming message
    805           * @param       nwkAddr - 16 bit network address for device
    806           * @param       pNodeDesc - pointer to the node descriptor
    807           *
    808           * @return      afStatus_t
    809           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    810          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    811                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    812          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    813            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FE           MOV       R6,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   12....       LCALL     ?Subroutine19 & 0xFFFF
    814            byte len;
    815          
    816            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    817          
    818            *pBuf++ = ZDP_SUCCESS;
    819          
    820            *pBuf++ = LO_UINT16( nwkAddr );
    821            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_20:
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?Subroutine40 & 0xFFFF
    822          
    823            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    824                               (pNodeDesc->UserDescAvail << 4) |
    825                               (pNodeDesc->LogicalType & 0x07));
   \                     ??CrossCallReturnLabel_53:
   \   000015   541F         ANL       A,#0x1f
   \   000017   8E82         MOV       DPL,R6
   \   000019   8F83         MOV       DPH,R7
   \   00001B   12....       LCALL     ?Subroutine27 & 0xFFFF
    826          
    827            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_216:
   \   00001E   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000021   12....       LCALL     ?Subroutine27 & 0xFFFF
    828            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_217:
   \   000024   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000027   12....       LCALL     ?Subroutine26 & 0xFFFF
    829            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_146:
   \   00002A   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00002D   12....       LCALL     ?Subroutine26 & 0xFFFF
    830            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_147:
   \   000030   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000033   12....       LCALL     ?Subroutine25 & 0xFFFF
    831            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_31:
   \   000036   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000039   12....       LCALL     ?Subroutine25 & 0xFFFF
    832            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \                     ??CrossCallReturnLabel_32:
   \   00003C   A3           INC       DPTR
   \   00003D   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000040   12....       LCALL     ?Subroutine23 & 0xFFFF
    833            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \                     ??CrossCallReturnLabel_26:
   \   000043   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000046   A3           INC       DPTR
   \   000047   F0           MOVX      @DPTR,A
    834          
    835            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \   000048   E8           MOV       A,R0
   \   000049   2408         ADD       A,#0x8
   \   00004B   FC           MOV       R4,A
   \   00004C   E4           CLR       A
   \   00004D   39           ADDC      A,R1
   \   00004E   FD           MOV       R5,A
   \   00004F   8C82         MOV       DPL,R4
   \   000051   8D83         MOV       DPH,R5
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F5..         MOV       ?V0,A
   \   000056   EE           MOV       A,R6
   \   000057   240B         ADD       A,#0xb
   \   000059   F582         MOV       DPL,A
   \   00005B   E4           CLR       A
   \   00005C   3F           ADDC      A,R7
   \   00005D   F583         MOV       DPH,A
   \   00005F   E5..         MOV       A,?V0
   \   000061   12....       LCALL     ??Subroutine102_0 & 0xFFFF
    836            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_161:
   \   000064   E0           MOVX      A,@DPTR
   \   000065   C0E0         PUSH      A
   \   000067   EE           MOV       A,R6
   \   000068   240C         ADD       A,#0xc
   \   00006A   F582         MOV       DPL,A
   \   00006C   E4           CLR       A
   \   00006D   3F           ADDC      A,R7
   \   00006E   F583         MOV       DPH,A
   \   000070   D0E0         POP       A
   \   000072   12....       LCALL     ?Subroutine23 & 0xFFFF
    837            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \                     ??CrossCallReturnLabel_27:
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   C0E0         PUSH      A
   \   00007B   EE           MOV       A,R6
   \   00007C   240D         ADD       A,#0xd
   \   00007E   F582         MOV       DPL,A
   \   000080   E4           CLR       A
   \   000081   3F           ADDC      A,R7
   \   000082   F583         MOV       DPH,A
   \   000084   D0E0         POP       A
   \   000086   F0           MOVX      @DPTR,A
    838            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \   000087   E8           MOV       A,R0
   \   000088   240B         ADD       A,#0xb
   \   00008A   F582         MOV       DPL,A
   \   00008C   E4           CLR       A
   \   00008D   39           ADDC      A,R1
   \   00008E   F583         MOV       DPH,A
   \   000090   E0           MOVX      A,@DPTR
   \   000091   C0E0         PUSH      A
   \   000093   EE           MOV       A,R6
   \   000094   240E         ADD       A,#0xe
   \   000096   F582         MOV       DPL,A
   \   000098   E4           CLR       A
   \   000099   3F           ADDC      A,R7
   \   00009A   F583         MOV       DPH,A
   \   00009C   D0E0         POP       A
   \   00009E   F0           MOVX      @DPTR,A
    839            *pBuf = pNodeDesc->DescriptorCapability;
   \   00009F   E8           MOV       A,R0
   \   0000A0   240C         ADD       A,#0xc
   \   0000A2   F582         MOV       DPL,A
   \   0000A4   E4           CLR       A
   \   0000A5   39           ADDC      A,R1
   \   0000A6   F583         MOV       DPH,A
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   C0E0         PUSH      A
   \   0000AB   EE           MOV       A,R6
   \   0000AC   240F         ADD       A,#0xf
   \   0000AE   F582         MOV       DPL,A
   \   0000B0   E4           CLR       A
   \   0000B1   3F           ADDC      A,R7
   \   0000B2   F583         MOV       DPH,A
   \   0000B4   D0E0         POP       A
   \   0000B6   F0           MOVX      @DPTR,A
    840          
    841            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   0000B7                ; Setup parameters for call to function fillAndSend
   \   0000B7   75..02       MOV       ?V0,#0x2
   \   0000BA   75..80       MOV       ?V1,#-0x80
   \   0000BD   78..         MOV       R0,#?V0
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C2   7910         MOV       R1,#0x10
   \   0000C4   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0000C7   5001         JNC       ??ZDP_NodeDescMsg_0
   \   0000C9   0B           INC       R3
   \                     ??ZDP_NodeDescMsg_0:
   \   0000CA   80..         SJMP      ??Subroutine99_0
    842          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL     ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005                REQUIRE ??Subroutine98_0
   \   000005                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   EA           MOV       A,R2
   \   000001   2402         ADD       A,#0x2
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   FD           MOV       R5,A
   \   000007   EA           MOV       A,R2
   \   000008   240F         ADD       A,#0xf
   \   00000A   FA           MOV       R2,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   FF           MOV       R7,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   E4           CLR       A
   \   000006   F0           MOVX      @DPTR,A
   \   000007   EC           MOV       A,R4
   \   000008   A3           INC       DPTR
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   ED           MOV       A,R5
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   8F83         MOV       DPH,R7
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   F0           MOVX      @DPTR,A
   \   000012   740A         MOV       A,#0xa
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine111_0
   \   000001                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine114_0
   \   000002                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine115_0
   \   000001                ; // Fall through to label ??Subroutine115_0
    843          
    844          /*********************************************************************
    845           * @fn          ZDP_PowerDescMsg
    846           *
    847           * @brief       Builds and sends a Power Descriptor message, unicast to the
    848           *              specified device.
    849           *
    850           * @param       inMsg - incoming message (request)
    851           * @param       nwkAddr - 16 bit network address for device
    852           * @param       pPowerDesc - pointer to the node descriptor
    853           *
    854           * @return      afStatus_t
    855           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    856          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    857                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    858          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    859            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000008   FE           MOV       R6,A
   \   000009   E9           MOV       A,R1
   \   00000A   12....       LCALL     ?Subroutine19 & 0xFFFF
    860            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    861          
    862            *pBuf++ = ZDP_SUCCESS;
    863          
    864            *pBuf++ = LO_UINT16( nwkAddr );
    865            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_21:
   \   00000D   12....       LCALL     ?XSTACK_DISP0_8
   \   000010   12....       LCALL     ?Subroutine40 & 0xFFFF
    866          
    867            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    868                              | (pPowerDesc->PowerMode & 0x0F));
   \                     ??CrossCallReturnLabel_54:
   \   000013   8E82         MOV       DPL,R6
   \   000015   8F83         MOV       DPH,R7
   \   000017   A3           INC       DPTR
   \   000018   12....       LCALL     ?Subroutine32 & 0xFFFF
    869            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    870                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_156:
   \   00001B   F5..         MOV       ?V0,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V1,A
   \   000021   540F         ANL       A,#0xf
   \   000023   F9           MOV       R1,A
   \   000024   740C         MOV       A,#0xc
   \   000026   78..         MOV       R0,#?V0
   \   000028   12....       LCALL     ?US_SHR
   \   00002B   E5..         MOV       A,?V0
   \   00002D   C4           SWAP      A
   \   00002E   49           ORL       A,R1
   \   00002F   8E82         MOV       DPL,R6
   \   000031   8F83         MOV       DPH,R7
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   F0           MOVX      @DPTR,A
    871          
    872            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   000038                ; Setup parameters for call to function fillAndSend
   \   000038   75..03       MOV       ?V0,#0x3
   \   00003B   75..80       MOV       ?V1,#-0x80
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   7905         MOV       R1,#0x5
   \   000045   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000048   5001         JNC       ??ZDP_PowerDescMsg_0
   \   00004A   0B           INC       R3
   \                     ??ZDP_PowerDescMsg_0:
   \   00004B   80..         SJMP      ??Subroutine99_0
    873          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine100_0
   \   000003                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine101_0
   \   000002                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    874          
    875          /*********************************************************************
    876           * @fn          ZDP_SimpleDescMsg
    877           *
    878           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    879           *              specified device.
    880           *
    881           * @param       inMsg - incoming message (request)
    882           * @param       Status - message status (ZDP_SUCCESS or other)
    883           * @param       pSimpleDesc - pointer to the node descriptor
    884           *
    885           * @return      afStatus_t
    886           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    887          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    888                                        SimpleDescriptionFormat_t *pSimpleDesc )
    889          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   E9           MOV       A,R1
   \   00000A   FE           MOV       R6,A
    890            uint8 *pBuf = ZDP_TmpBuf;
   \   00000B   12....       LCALL     ??Subroutine117_0 & 0xFFFF
    891            uint8 i, len;
    892          
    893            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \                     ??CrossCallReturnLabel_242:
   \   00000E   EC           MOV       A,R4
   \   00000F   2409         ADD       A,#0x9
   \   000011   FA           MOV       R2,A
   \   000012   E4           CLR       A
   \   000013   3D           ADDC      A,R5
   \   000014   FB           MOV       R3,A
   \   000015   8A..         MOV       ?V4,R2
   \   000017   8B..         MOV       ?V5,R3
   \   000019   EC           MOV       A,R4
   \   00001A   2406         ADD       A,#0x6
   \   00001C   FA           MOV       R2,A
   \   00001D   E4           CLR       A
   \   00001E   3D           ADDC      A,R5
   \   00001F   FB           MOV       R3,A
   \   000020   8A..         MOV       ?V6,R2
   \   000022   8B..         MOV       ?V7,R3
   \   000024   EE           MOV       A,R6
   \   000025   7022         JNZ       ??ZDP_SimpleDescMsg_0
   \   000027   EC           MOV       A,R4
   \   000028   4D           ORL       A,R5
   \   000029   601E         JZ        ??ZDP_SimpleDescMsg_0
    894            {
    895              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    896              len = 1 + 2 + 1 + 8;
    897              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   00002B   85..82       MOV       DPL,?V4
   \   00002E   85..83       MOV       DPH,?V5
   \   000031   E0           MOVX      A,@DPTR
   \   000032   FA           MOV       R2,A
   \   000033   85..82       MOV       DPL,?V6
   \   000036   8B83         MOV       DPH,R3
   \   000038   E0           MOVX      A,@DPTR
   \   000039   2A           ADD       A,R2
   \   00003A   C3           CLR       C
   \   00003B   33           RLC       A
   \   00003C   240C         ADD       A,#0xc
   \   00003E   FA           MOV       R2,A
    898            }
    899            else
    900            {
    901              len = 1 + 2 + 1; // Status + desc length
    902            }
    903            if ( len >= ZDP_BUF_SZ-1 )
   \   00003F   C3           CLR       C
   \   000040   944F         SUBB      A,#0x4f
   \   000042   4007         JC        ??ZDP_SimpleDescMsg_1
    904            {
    905              return afStatus_MEM_FAIL;
   \   000044   7910         MOV       R1,#0x10
   \   000046   02....       LJMP      ??ZDP_SimpleDescMsg_2 & 0xFFFF
    906            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   000049   7A04         MOV       R2,#0x4
    907          
    908            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_1:
   \   00004B   EE           MOV       A,R6
   \   00004C   8882         MOV       DPL,R0
   \   00004E   8983         MOV       DPH,R1
   \   000050   F0           MOVX      @DPTR,A
    909          
    910            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   000051   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000054   12....       LCALL     ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000057   A3           INC       DPTR
   \   000058   F0           MOVX      @DPTR,A
    911            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   000059   90....       MOV       DPTR,#ZDAppNwkAddr + 1
   \   00005C   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00005F   F0           MOVX      @DPTR,A
    912          
    913            if ( len > 4 )
   \   000060   E8           MOV       A,R0
   \   000061   2403         ADD       A,#0x3
   \   000063   F582         MOV       DPL,A
   \   000065   E4           CLR       A
   \   000066   39           ADDC      A,R1
   \   000067   F583         MOV       DPH,A
   \   000069   EA           MOV       A,R2
   \   00006A   C3           CLR       C
   \   00006B   9405         SUBB      A,#0x5
   \   00006D   5003         JNC       $+5
   \   00006F   02....       LJMP      ??ZDP_SimpleDescMsg_3 & 0xFFFF
    914            {
    915              *pBuf++ = len - 4;   // Simple descriptor length
   \   000072   74FC         MOV       A,#-0x4
   \   000074   2A           ADD       A,R2
   \   000075   F0           MOVX      @DPTR,A
    916          
    917              *pBuf++ = pSimpleDesc->EndPoint;
   \   000076   8C82         MOV       DPL,R4
   \   000078   8D83         MOV       DPH,R5
   \   00007A   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00007D   12....       LCALL     ?Subroutine31 & 0xFFFF
    918              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_159:
   \   000080   8582..       MOV       ?V2,DPL
   \   000083   8583..       MOV       ?V3,DPH
   \   000086   12....       LCALL     ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000089   12....       LCALL     ?Subroutine12 & 0xFFFF
    919              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_4:
   \   00008C   F0           MOVX      @DPTR,A
    920              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \   00008D   EC           MOV       A,R4
   \   00008E   2403         ADD       A,#0x3
   \   000090   F5..         MOV       ?V2,A
   \   000092   E4           CLR       A
   \   000093   3D           ADDC      A,R5
   \   000094   F5..         MOV       ?V3,A
   \   000096   85..82       MOV       DPL,?V2
   \   000099   F583         MOV       DPH,A
   \   00009B   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00009E   12....       LCALL     ?Subroutine12 & 0xFFFF
    921              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_5:
   \   0000A1   12....       LCALL     ?Subroutine31 & 0xFFFF
    922          
    923              *pBuf++ = (byte)(pSimpleDesc->AppDevVer & 0x0F);
   \                     ??CrossCallReturnLabel_160:
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   540F         ANL       A,#0xf
   \   0000AB   8882         MOV       DPL,R0
   \   0000AD   8983         MOV       DPH,R1
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   F0           MOVX      @DPTR,A
    924          
    925              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \   0000B9   85..82       MOV       DPL,?V6
   \   0000BC   8B83         MOV       DPH,R3
   \   0000BE   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   F0           MOVX      @DPTR,A
   \   0000C7   E8           MOV       A,R0
   \   0000C8   240B         ADD       A,#0xb
   \   0000CA   F8           MOV       R0,A
   \   0000CB   5001         JNC       ??ZDP_SimpleDescMsg_4
   \   0000CD   09           INC       R1
    926              if ( pSimpleDesc->AppNumInClusters )
   \                     ??ZDP_SimpleDescMsg_4:
   \   0000CE   85..82       MOV       DPL,?V6
   \   0000D1   8B83         MOV       DPH,R3
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   6031         JZ        ??ZDP_SimpleDescMsg_5
    927              {
    928                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   0000D6   7B00         MOV       R3,#0x0
   \   0000D8   EC           MOV       A,R4
   \   0000D9   2407         ADD       A,#0x7
   \   0000DB   F5..         MOV       ?V2,A
   \   0000DD   E4           CLR       A
   \   0000DE   3D           ADDC      A,R5
   \   0000DF   85....       MOV       ?V8,?V2
   \   0000E2   F5..         MOV       ?V9,A
   \   0000E4   8014         SJMP      ??ZDP_SimpleDescMsg_6
    929                {
    930                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_7:
   \   0000E6   EB           MOV       A,R3
   \   0000E7   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0000EA   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000ED   12....       LCALL     ?Subroutine41 & 0xFFFF
    931                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??CrossCallReturnLabel_171:
   \   0000F0   12....       LCALL     ?Subroutine61 & 0xFFFF
    932                }
   \                     ??CrossCallReturnLabel_94:
   \   0000F3   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0000F6   5001         JNC       ??ZDP_SimpleDescMsg_8
   \   0000F8   09           INC       R1
   \                     ??ZDP_SimpleDescMsg_8:
   \   0000F9   0B           INC       R3
   \                     ??ZDP_SimpleDescMsg_6:
   \   0000FA   85..82       MOV       DPL,?V6
   \   0000FD   85..83       MOV       DPH,?V7
   \   000100   E0           MOVX      A,@DPTR
   \   000101   FF           MOV       R7,A
   \   000102   EB           MOV       A,R3
   \   000103   C3           CLR       C
   \   000104   9F           SUBB      A,R7
   \   000105   40DF         JC        ??ZDP_SimpleDescMsg_7
    933              }
    934          
    935              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_5:
   \   000107   85..82       MOV       DPL,?V4
   \   00010A   85..83       MOV       DPH,?V5
   \   00010D   12....       LCALL     ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000110   A3           INC       DPTR
   \   000111   A882         MOV       R0,DPL
   \   000113   A983         MOV       R1,DPH
    936              if ( pSimpleDesc->AppNumOutClusters )
   \   000115   85..82       MOV       DPL,?V4
   \   000118   85..83       MOV       DPH,?V5
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   6047         JZ        ??ZDP_SimpleDescMsg_9
    937              {
    938                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   00011E   7B00         MOV       R3,#0x0
   \   000120   EC           MOV       A,R4
   \   000121   240A         ADD       A,#0xa
   \   000123   FC           MOV       R4,A
   \   000124   5001         JNC       ??ZDP_SimpleDescMsg_10
   \   000126   0D           INC       R5
   \                     ??ZDP_SimpleDescMsg_10:
   \   000127   8C..         MOV       ?V2,R4
   \   000129   8D..         MOV       ?V3,R5
   \                     ??ZDP_SimpleDescMsg_11:
   \   00012B   85..82       MOV       DPL,?V4
   \   00012E   85..83       MOV       DPH,?V5
   \   000131   E0           MOVX      A,@DPTR
   \   000132   FC           MOV       R4,A
   \   000133   EB           MOV       A,R3
   \   000134   C3           CLR       C
   \   000135   9C           SUBB      A,R4
   \   000136   502D         JNC       ??ZDP_SimpleDescMsg_9
    939                {
    940                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   000138   EB           MOV       A,R3
   \   000139   25E0         ADD       A,0xE0 /* A   */
   \   00013B   FC           MOV       R4,A
   \   00013C   E4           CLR       A
   \   00013D   33           RLC       A
   \   00013E   FD           MOV       R5,A
   \   00013F   85..82       MOV       DPL,?V2
   \   000142   85..83       MOV       DPH,?V3
   \   000145   E0           MOVX      A,@DPTR
   \   000146   2C           ADD       A,R4
   \   000147   FF           MOV       R7,A
   \   000148   A3           INC       DPTR
   \   000149   E0           MOVX      A,@DPTR
   \   00014A   3D           ADDC      A,R5
   \   00014B   12....       LCALL     ?Subroutine41 & 0xFFFF
    941                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \                     ??CrossCallReturnLabel_172:
   \   00014E   85..82       MOV       DPL,?V2
   \   000151   85..83       MOV       DPH,?V3
   \   000154   E0           MOVX      A,@DPTR
   \   000155   2C           ADD       A,R4
   \   000156   FF           MOV       R7,A
   \   000157   A3           INC       DPTR
   \   000158   E0           MOVX      A,@DPTR
   \   000159   3D           ADDC      A,R5
   \   00015A   12....       LCALL     ?Subroutine50 & 0xFFFF
    942                }
   \                     ??CrossCallReturnLabel_76:
   \   00015D   5001         JNC       ??ZDP_SimpleDescMsg_12
   \   00015F   09           INC       R1
   \                     ??ZDP_SimpleDescMsg_12:
   \   000160   0B           INC       R3
   \   000161   80C8         SJMP      ??ZDP_SimpleDescMsg_11
    943              }
    944            }
    945          
    946            else
    947            {
    948              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_3:
   \   000163   E4           CLR       A
   \   000164   F0           MOVX      @DPTR,A
    949            }
    950          
    951            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_9:
   \   000165                ; Setup parameters for call to function fillAndSend
   \   000165   75..04       MOV       ?V2,#0x4
   \   000168   75..80       MOV       ?V3,#-0x80
   \   00016B   78..         MOV       R0,#?V2
   \   00016D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000170   EA           MOV       A,R2
   \   000171   F9           MOV       R1,A
   \   000172   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000175   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000178   7402         MOV       A,#0x2
   \   00017A   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_2:
   \   00017D   02....       LJMP      ?Subroutine4 & 0xFFFF
    952          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   85..82       MOV       DPL,?V8
   \   000003   85..83       MOV       DPH,?V9
   \   000006   E0           MOVX      A,@DPTR
   \   000007   25..         ADD       A,?V2
   \   000009   FF           MOV       R7,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   35..         ADDC      A,?V3
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   8F82         MOV       DPL,R7
   \   000002   F583         MOV       DPH,A
   \   000004   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine102_0
   \   000002                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000008   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   8F82         MOV       DPL,R7
   \   000002   F583         MOV       DPH,A
   \   000004                REQUIRE ??Subroutine104_0
   \   000004                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET
    953          
    954          /*********************************************************************
    955           * @fn          ZDP_EPRsp
    956           *
    957           * @brief       This builds and send an endpoint list. Used in
    958           *              Active_EP_rsp and Match_Desc_Rsp
    959           *              message.  This function sends unicast message to the
    960           *              requesting device.
    961           *
    962           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    963           * @param       dstAddr - destination address
    964           * @param       Status - message status (ZDP_SUCCESS or other)
    965           * @param       nwkAddr - Device's short address that this response describes
    966           * @param       Count - number of endpoint/interfaces in list
    967           * @param       pEPIntfList - Array of Endpoint/Interfaces
    968           * @param       SecurityEnable - Security Options
    969           *
    970           * @return      afStatus_t
    971           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    972          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    973                                  byte Status, uint16 nwkAddr, byte Count,
    974                                  uint8 *pEPList,
    975                                  byte SecurityEnable )
    976          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V2,R2
   \   000014   8B..         MOV       ?V3,R3
   \   000016   EC           MOV       A,R4
   \   000017   FE           MOV       R6,A
   \   000018   ED           MOV       A,R5
   \   000019   FF           MOV       R7,A
    977            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00001D   12....       LCALL     ?Subroutine54 & 0xFFFF
    978            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \                     ??CrossCallReturnLabel_83:
   \   000020   75..04       MOV       ?V0,#0x4
    979            byte txOptions;
    980          
    981            (void)SecurityEnable;  // Intentionally unreferenced parameter
    982          
    983            if ( MsgType == Match_Desc_rsp )
   \   000023   7406         MOV       A,#0x6
   \   000025   65..         XRL       A,?V2
   \   000027   7004         JNZ       ??ZDP_EPRsp_0
   \   000029   7480         MOV       A,#-0x80
   \   00002B   65..         XRL       A,?V3
   \                     ??ZDP_EPRsp_0:
   \   00002D   7005         JNZ       ??ZDP_EPRsp_1
    984              txOptions = AF_MSG_ACK_REQUEST;
   \   00002F   75..10       MOV       ?V1,#0x10
   \   000032   8003         SJMP      ??ZDP_EPRsp_2
    985            else
    986              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   000034   75..00       MOV       ?V1,#0x0
    987          
    988              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000037   7410         MOV       A,#0x10
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00003F   7411         MOV       A,#0x11
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ?Subroutine15 & 0xFFFF
    989            *pBuf++ = LO_UINT16( nwkAddr );
    990            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_10:
   \   000047   7413         MOV       A,#0x13
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F9           MOV       R1,A
    991          
    992            *pBuf++ = Count;   // Endpoint/Interface count
   \   00004E   8A82         MOV       DPL,R2
   \   000050   8B83         MOV       DPH,R3
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   F0           MOVX      @DPTR,A
    993          
    994            if ( Count )
   \   000056   6023         JZ        ??ZDP_EPRsp_3
    995            {
    996              len += Count;
   \   000058   7404         MOV       A,#0x4
   \   00005A   29           ADD       A,R1
   \   00005B   F5..         MOV       ?V0,A
    997              osal_memcpy( pBuf, pEPList, Count );
   \   00005D                ; Setup parameters for call to function osal_memcpy
   \   00005D   7414         MOV       A,#0x14
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   12....       LCALL     ?Subroutine47 & 0xFFFF
    998            }
   \                     ??CrossCallReturnLabel_68:
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000068   E9           MOV       A,R1
   \   000069   FC           MOV       R4,A
   \   00006A   7D00         MOV       R5,#0x0
   \   00006C   EA           MOV       A,R2
   \   00006D   2404         ADD       A,#0x4
   \   00006F   FA           MOV       R2,A
   \   000070   5001         JNC       ??ZDP_EPRsp_4
   \   000072   0B           INC       R3
   \                     ??ZDP_EPRsp_4:
   \   000073   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000076   7403         MOV       A,#0x3
   \   000078   12....       LCALL     ?DEALLOC_XSTACK8
    999          
   1000            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   00007B   E5..         MOV       A,?V1
   \   00007D   90....       MOV       DPTR,#ZDP_TxOptions
   \   000080   F0           MOVX      @DPTR,A
   \   000081                ; Setup parameters for call to function fillAndSend
   \   000081   78..         MOV       R0,#?V2
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000086   A9..         MOV       R1,?V0
   \   000088   EE           MOV       A,R6
   \   000089   FC           MOV       R4,A
   \   00008A   EF           MOV       A,R7
   \   00008B   FD           MOV       R5,A
   \   00008C   7402         MOV       A,#0x2
   \   00008E   12....       LCALL     ?XSTACK_DISP101_8
   \   000091   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000094   7402         MOV       A,#0x2
   \   000096   12....       LCALL     ?DEALLOC_XSTACK8
   \   000099   E9           MOV       A,R1
   \   00009A   F9           MOV       R1,A
   \   00009B   90....       MOV       DPTR,#ZDP_TxOptions
   \   00009E   E4           CLR       A
   \   00009F   F0           MOVX      @DPTR,A
   \   0000A0   04           INC       A
   \   0000A1   02....       LJMP      ?Subroutine3 & 0xFFFF
   1001          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000003   FA           MOV       R2,A
   \   000004   E9           MOV       A,R1
   \   000005   FB           MOV       R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   8A82         MOV       DPL,R2
   \   000008   8B83         MOV       DPH,R3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   75..00       MOV       ?V6,#0x0
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   E9           MOV       A,R1
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET
   1002          
   1003          /*********************************************************************
   1004           * @fn          ZDP_UserDescRsp
   1005           *
   1006           * @brief       Build and send the User Decriptor Response.
   1007           *
   1008           *
   1009           * @param       dstAddr - destination address
   1010           * @param       nwkAddrOfInterest -
   1011           * @param       userDesc -
   1012           * @param       SecurityEnable - Security Options
   1013           *
   1014           * @return      ZStatus_t
   1015           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1016          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
   1017                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
   1018                          byte SecurityEnable )
   1019          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   12....       LCALL     ?Subroutine56 & 0xFFFF
   1020            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_228:
   \   000015   88..         MOV       ?V0,R0
   \   000017   89..         MOV       ?V1,R1
   \   000019   7413         MOV       A,#0x13
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000021   88..         MOV       ?V8,R0
   \   000023   89..         MOV       ?V9,R1
   1021            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
   1022          
   1023            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1024          
   1025            len += userDesc->len;
   \   000025   8882         MOV       DPL,R0
   \   000027   F583         MOV       DPH,A
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   2404         ADD       A,#0x4
   \   00002C   F5..         MOV       ?V2,A
   1026          
   1027            *pBuf++ = ZSUCCESS;
   \   00002E   85..82       MOV       DPL,?V0
   \   000031   85..83       MOV       DPH,?V1
   \   000034   E4           CLR       A
   \   000035   F0           MOVX      @DPTR,A
   1028          
   1029            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   \   000036   EC           MOV       A,R4
   \   000037   A3           INC       DPTR
   \   000038   F0           MOVX      @DPTR,A
   1030            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \   000039   ED           MOV       A,R5
   \   00003A   85..82       MOV       DPL,?V0
   \   00003D   85..83       MOV       DPH,?V1
   \   000040   12....       LCALL     ?Subroutine32 & 0xFFFF
   1031          
   1032            *pBuf++ = userDesc->len;
   \                     ??CrossCallReturnLabel_157:
   \   000043   85..82       MOV       DPL,?V0
   \   000046   85..83       MOV       DPH,?V1
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   12....       LCALL     ?Subroutine10 & 0xFFFF
   1033            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \                     ??CrossCallReturnLabel_1:
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000052   85..82       MOV       DPL,?V8
   \   000055   85..83       MOV       DPH,?V9
   \   000058   E0           MOVX      A,@DPTR
   \   000059   FC           MOV       R4,A
   \   00005A   7D00         MOV       R5,#0x0
   \   00005C   E5..         MOV       A,?V0
   \   00005E   2404         ADD       A,#0x4
   \   000060   FA           MOV       R2,A
   \   000061   E4           CLR       A
   \   000062   35..         ADDC      A,?V1
   \   000064   FB           MOV       R3,A
   \   000065   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000068   7403         MOV       A,#0x3
   \   00006A   12....       LCALL     ?DEALLOC_XSTACK8
   1034          
   1035            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   00006D                ; Setup parameters for call to function fillAndSend
   \   00006D   75..11       MOV       ?V0,#0x11
   \   000070   75..80       MOV       ?V1,#-0x80
   \   000073   78..         MOV       R0,#?V0
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   A9..         MOV       R1,?V2
   \   00007A   EE           MOV       A,R6
   \   00007B   FC           MOV       R4,A
   \   00007C   EF           MOV       A,R7
   \   00007D   FD           MOV       R5,A
   \   00007E   7402         MOV       A,#0x2
   \   000080   12....       LCALL     ?XSTACK_DISP101_8
   \   000083   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000086   7402         MOV       A,#0x2
   \   000088   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008B   02....       LJMP      ?Subroutine5 & 0xFFFF
   1036          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7401         MOV       A,#0x1
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine105_0
   \   000005                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   7F0A         MOV       R7,#0xa
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1037          
   1038          /*********************************************************************
   1039           * @fn          ZDP_ServerDiscRsp
   1040           *
   1041           * @brief       Build and send the Server_Discovery_rsp response.
   1042           *
   1043           * @param       transID - Transaction sequence number of request.
   1044           * @param       dstAddr - Network Destination Address.
   1045           * @param       status - Status of response to request.
   1046           * @param       aoi - Network Address of Interest of request.
   1047           * @param       serverMask - Bit map of service(s) being sought.
   1048           * @param       SecurityEnable - Security Options
   1049           *
   1050           * @return      ZStatus_t
   1051           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1052          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
   1053                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
   1054          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   EC           MOV       A,R4
   \   000013   FE           MOV       R6,A
   1055            const byte len = 1  + 2;  // status + aoi + mask.
   1056            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000017   FC           MOV       R4,A
   \   000018   E9           MOV       A,R1
   \   000019   FD           MOV       R5,A
   1057            ZStatus_t stat;
   1058          
   1059            // Intentionally unreferenced parameters
   1060            (void)aoi;
   1061            (void)SecurityEnable;
   1062          
   1063            *pBuf++ = status;
   \   00001A   EE           MOV       A,R6
   \   00001B   8C82         MOV       DPL,R4
   \   00001D   8D83         MOV       DPH,R5
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   740D         MOV       A,#0xd
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine51 & 0xFFFF
   1064          
   1065            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_77:
   \   000028   A3           INC       DPTR
   \   000029   F0           MOVX      @DPTR,A
   1066            *pBuf++ = HI_UINT16( serverMask );
   \   00002A   E9           MOV       A,R1
   \   00002B   8C82         MOV       DPL,R4
   \   00002D   8D83         MOV       DPH,R5
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   F0           MOVX      @DPTR,A
   1067          
   1068            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   000032   90....       MOV       DPTR,#ZDP_TxOptions
   \   000035   7410         MOV       A,#0x10
   \   000037   F0           MOVX      @DPTR,A
   1069            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   000038                ; Setup parameters for call to function fillAndSend
   \   000038   75..15       MOV       ?V0,#0x15
   \   00003B   75..80       MOV       ?V1,#-0x80
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   7903         MOV       R1,#0x3
   \   000045   EA           MOV       A,R2
   \   000046   FC           MOV       R4,A
   \   000047   EB           MOV       A,R3
   \   000048   FD           MOV       R5,A
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?XSTACK_DISP101_8
   \   00004E   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000051   7402         MOV       A,#0x2
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
   \   000056   E9           MOV       A,R1
   \   000057   F9           MOV       R1,A
   1070            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000058   90....       MOV       DPTR,#ZDP_TxOptions
   \   00005B   E4           CLR       A
   \   00005C   F0           MOVX      @DPTR,A
   1071          
   1072            return ( stat );
   \   00005D   04           INC       A
   \   00005E   02....       LJMP      ??Subroutine95_0 & 0xFFFF
   1073          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000003   8C82         MOV       DPL,R4
   \   000005   8D83         MOV       DPH,R5
   \   000007   22           RET
   1074          
   1075          /*********************************************************************
   1076           * @fn          ZDP_GenericRsp
   1077           *
   1078           * @brief       Sends a response message with only the parameter status
   1079           *              byte and the addr of interest for data.
   1080           *              This function sends unicast message to the
   1081           *              requesting device.
   1082           *
   1083           * @param       dstAddr - destination address
   1084           * @param       status  - generic status for response
   1085           * @param       aoi     - address of interest
   1086           * @param       dstAddr - destination address
   1087           * @param       rspId   - response cluster ID
   1088           * @param       SecurityEnable - Security Options
   1089           *
   1090           * @return      afStatus_t
   1091           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1092          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1093                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1094          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   1095            uint8 len;
   1096          
   1097            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1098          
   1099            ZDP_TmpBuf[0] = status;
   \   000012   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000015   EC           MOV       A,R4
   \   000016   F0           MOVX      @DPTR,A
   \   000017   740A         MOV       A,#0xa
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   1100            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \                     ??CrossCallReturnLabel_232:
   \   00001F   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FC           MOV       R4,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F583         MOV       DPH,A
   \   000028   8C82         MOV       DPL,R4
   \   00002A   A3           INC       DPTR
   \   00002B   E8           MOV       A,R0
   \   00002C   12....       LCALL     ?Subroutine13 & 0xFFFF
   1101            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   1102          
   1103            // Length byte
   1104            ZDP_TmpBuf[3] = 0;
   \                     ??CrossCallReturnLabel_7:
   \   00002F   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E4           CLR       A
   \   000036   F0           MOVX      @DPTR,A
   1105            len = 4;
   1106          
   1107            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   740C         MOV       A,#0xc
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003F   7904         MOV       R1,#0x4
   \   000041   EA           MOV       A,R2
   \   000042   FC           MOV       R4,A
   \   000043   EB           MOV       A,R3
   \   000044   FD           MOV       R5,A
   \   000045   7402         MOV       A,#0x2
   \   000047   12....       LCALL     ?XSTACK_DISP101_8
   \   00004A   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00004D   7402         MOV       A,#0x2
   \   00004F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000052   7401         MOV       A,#0x1
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   \   000057                REQUIRE ?Subroutine6
   \   000057                ; // Fall through to label ?Subroutine6
   1108          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1109          
   1110          /*********************************************************************
   1111           * Binding
   1112           */
   1113          /*********************************************************************
   1114           * @fn          ZDP_EndDeviceBindReq
   1115           *
   1116           * @brief       This builds and sends a End_Device_Bind_req message.
   1117           *              This function sends a unicast message.
   1118           *
   1119           * @param       dstAddr - destination address
   1120           * @param       LocalCoordinator - short address of local coordinator
   1121           * @param       epIntf - Endpoint/Interface of Simple Desc
   1122           * @param       ProfileID - Profile ID
   1123           *
   1124           *   The Input cluster list is the opposite of what you would think.
   1125           *   This is the output cluster list of this device
   1126           * @param       NumInClusters - number of input clusters
   1127           * @param       InClusterList - input cluster ID list
   1128           *
   1129           *   The Output cluster list is the opposite of what you would think.
   1130           *   This is the input cluster list of this device
   1131           * @param       NumOutClusters - number of output clusters
   1132           * @param       OutClusterList - output cluster ID list
   1133           *
   1134           * @param       SecurityEnable - Security Options
   1135           *
   1136           * @return      afStatus_t
   1137           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1138          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1139                                           uint16 LocalCoordinator,
   1140                                           byte endPoint,
   1141                                           uint16 ProfileID,
   1142                                           byte NumInClusters, cId_t *InClusterList,
   1143                                           byte NumOutClusters, cId_t *OutClusterList,
   1144                                           byte SecurityEnable )
   1145          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   \   00000D   89..         MOV       ?V3,R1
   1146            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000012   7414         MOV       A,#0x14
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V2,A
   \   00001A   7417         MOV       A,#0x17
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FF           MOV       R7,A
   1147            uint8 i, len;
   1148            uint8 *ieeeAddr;
   1149          
   1150            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1151          
   1152            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1153            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1154            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   000021   E5..         MOV       A,?V2
   \   000023   2F           ADD       A,R7
   \   000024   C3           CLR       C
   \   000025   33           RLC       A
   \   000026   240F         ADD       A,#0xf
   \   000028   FE           MOV       R6,A
   1155          
   1156            if ( len >= ZDP_BUF_SZ-1 )
   \   000029   C3           CLR       C
   \   00002A   944F         SUBB      A,#0x4f
   \   00002C   4005         JC        ??ZDP_EndDeviceBindReq_0
   1157            {
   1158              return afStatus_MEM_FAIL;
   \   00002E   7910         MOV       R1,#0x10
   \   000030   02....       LJMP      ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1159            }
   1160          
   1161            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   000033                ; Setup parameters for call to function NLME_GetShortAddr
   \   000033   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000036   EA           MOV       A,R2
   \   000037   65..         XRL       A,?V4
   \   000039   7003         JNZ       ??ZDP_EndDeviceBindReq_2
   \   00003B   EB           MOV       A,R3
   \   00003C   65..         XRL       A,?V5
   \                     ??ZDP_EndDeviceBindReq_2:
   \   00003E   6005         JZ        ??ZDP_EndDeviceBindReq_3
   1162            {
   1163              return afStatus_INVALID_PARAMETER;
   \   000040   7902         MOV       R1,#0x2
   \   000042   02....       LJMP      ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1164            }
   1165          
   1166            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000045   85..82       MOV       DPL,?V0
   \   000048   85..83       MOV       DPH,?V1
   \   00004B   E5..         MOV       A,?V4
   \   00004D   F0           MOVX      @DPTR,A
   1167            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   00004E   E5..         MOV       A,?V5
   \   000050   A3           INC       DPTR
   \   000051   F0           MOVX      @DPTR,A
   1168          
   1169            ieeeAddr = NLME_GetExtAddr();
   \   000052                ; Setup parameters for call to function NLME_GetExtAddr
   \   000052   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000055   8A..         MOV       ?V4,R2
   \   000057   8B..         MOV       ?V5,R3
   \   000059   AC..         MOV       R4,?V4
   \   00005B   AD..         MOV       R5,?V5
   1170            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   00005D                ; Setup parameters for call to function sAddrExtCpy
   \   00005D   E5..         MOV       A,?V0
   \   00005F   2402         ADD       A,#0x2
   \   000061   FA           MOV       R2,A
   \   000062   E4           CLR       A
   \   000063   35..         ADDC      A,?V1
   \   000065   FB           MOV       R3,A
   \   000066   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1171          
   1172            *pBuf++ = endPoint;
   \   000069   8A82         MOV       DPL,R2
   \   00006B   8B83         MOV       DPH,R3
   \   00006D   E5..         MOV       A,?V3
   \   00006F   F0           MOVX      @DPTR,A
   \   000070   7412         MOV       A,#0x12
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   12....       LCALL     ?Subroutine15 & 0xFFFF
   1173          
   1174            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   1175            *pBuf++ = HI_UINT16( ProfileID );
   1176          
   1177            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_11:
   \   000078   8A82         MOV       DPL,R2
   \   00007A   8B83         MOV       DPH,R3
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   E5..         MOV       A,?V2
   \   000081   F0           MOVX      @DPTR,A
   \   000082   EA           MOV       A,R2
   \   000083   2404         ADD       A,#0x4
   \   000085   F5..         MOV       ?V0,A
   \   000087   E4           CLR       A
   \   000088   3B           ADDC      A,R3
   \   000089   F5..         MOV       ?V1,A
   1178            for ( i = 0; i < NumInClusters; ++i )
   \   00008B   7C00         MOV       R4,#0x0
   \   00008D   7415         MOV       A,#0x15
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000095   8030         SJMP      ??ZDP_EndDeviceBindReq_4
   1179            {
   1180              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   000097   EC           MOV       A,R4
   \   000098   25E0         ADD       A,0xE0 /* A   */
   \   00009A   F5..         MOV       ?V4,A
   \   00009C   E4           CLR       A
   \   00009D   33           RLC       A
   \   00009E   F5..         MOV       ?V5,A
   \   0000A0   EA           MOV       A,R2
   \   0000A1   25..         ADD       A,?V4
   \   0000A3   F5..         MOV       ?V4,A
   \   0000A5   EB           MOV       A,R3
   \   0000A6   35..         ADDC      A,?V5
   \   0000A8   F5..         MOV       ?V5,A
   \   0000AA   85..82       MOV       DPL,?V4
   \   0000AD   F583         MOV       DPH,A
   \   0000AF   12....       LCALL     ?Subroutine62 & 0xFFFF
   1181              *pBuf++ = HI_UINT16(InClusterList[i]);
   \                     ??CrossCallReturnLabel_95:
   \   0000B2   85..82       MOV       DPL,?V4
   \   0000B5   85..83       MOV       DPH,?V5
   \   0000B8   A3           INC       DPTR
   \   0000B9   12....       LCALL     ??Subroutine104_0 & 0xFFFF
   1182            }
   \                     ??CrossCallReturnLabel_169:
   \   0000BC   E5..         MOV       A,?V0
   \   0000BE   2402         ADD       A,#0x2
   \   0000C0   F5..         MOV       ?V0,A
   \   0000C2   5002         JNC       ??ZDP_EndDeviceBindReq_6
   \   0000C4   05..         INC       ?V1
   \                     ??ZDP_EndDeviceBindReq_6:
   \   0000C6   0C           INC       R4
   \                     ??ZDP_EndDeviceBindReq_4:
   \   0000C7   85..82       MOV       DPL,?V0
   \   0000CA   85..83       MOV       DPH,?V1
   \   0000CD   A3           INC       DPTR
   \   0000CE   A882         MOV       R0,DPL
   \   0000D0   A983         MOV       R1,DPH
   \   0000D2   EC           MOV       A,R4
   \   0000D3   C3           CLR       C
   \   0000D4   95..         SUBB      A,?V2
   \   0000D6   40BF         JC        ??ZDP_EndDeviceBindReq_5
   1183          
   1184            *pBuf++ = NumOutClusters; // Output cluster list
   \   0000D8   EF           MOV       A,R7
   \   0000D9   85..82       MOV       DPL,?V0
   \   0000DC   85..83       MOV       DPH,?V1
   \   0000DF   F0           MOVX      @DPTR,A
   \   0000E0   88..         MOV       ?V0,R0
   \   0000E2   89..         MOV       ?V1,R1
   1185            for ( i = 0; i < NumOutClusters; ++i )
   \   0000E4   7C00         MOV       R4,#0x0
   \   0000E6   7418         MOV       A,#0x18
   \   0000E8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EB   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   0000EE   8028         SJMP      ??ZDP_EndDeviceBindReq_7
   1186            {
   1187              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_8:
   \   0000F0   EC           MOV       A,R4
   \   0000F1   25E0         ADD       A,0xE0 /* A   */
   \   0000F3   FA           MOV       R2,A
   \   0000F4   E4           CLR       A
   \   0000F5   33           RLC       A
   \   0000F6   FB           MOV       R3,A
   \   0000F7   E8           MOV       A,R0
   \   0000F8   2A           ADD       A,R2
   \   0000F9   FA           MOV       R2,A
   \   0000FA   E9           MOV       A,R1
   \   0000FB   3B           ADDC      A,R3
   \   0000FC   FB           MOV       R3,A
   \   0000FD   8A82         MOV       DPL,R2
   \   0000FF   8B83         MOV       DPH,R3
   \   000101   12....       LCALL     ?Subroutine62 & 0xFFFF
   1188              *pBuf++ = HI_UINT16(OutClusterList[i]);
   \                     ??CrossCallReturnLabel_96:
   \   000104   8A82         MOV       DPL,R2
   \   000106   8B83         MOV       DPH,R3
   \   000108   A3           INC       DPTR
   \   000109   12....       LCALL     ?Subroutine63 & 0xFFFF
   1189            }
   \                     ??CrossCallReturnLabel_97:
   \   00010C   F0           MOVX      @DPTR,A
   \   00010D   E5..         MOV       A,?V0
   \   00010F   2402         ADD       A,#0x2
   \   000111   F5..         MOV       ?V0,A
   \   000113   5002         JNC       ??ZDP_EndDeviceBindReq_9
   \   000115   05..         INC       ?V1
   \                     ??ZDP_EndDeviceBindReq_9:
   \   000117   0C           INC       R4
   \                     ??ZDP_EndDeviceBindReq_7:
   \   000118   EC           MOV       A,R4
   \   000119   C3           CLR       C
   \   00011A   9F           SUBB      A,R7
   \   00011B   40D3         JC        ??ZDP_EndDeviceBindReq_8
   1190          
   1191            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   00011D                ; Setup parameters for call to function fillAndSend
   \   00011D   75..20       MOV       ?V0,#0x20
   \   000120   75..00       MOV       ?V1,#0x0
   \   000123   78..         MOV       R0,#?V0
   \   000125   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000128   EE           MOV       A,R6
   \   000129   F9           MOV       R1,A
   \   00012A   AC..         MOV       R4,?V6
   \   00012C   AD..         MOV       R5,?V7
   \   00012E   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000130   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000132   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000135   7402         MOV       A,#0x2
   \   000137   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   00013A   80..         SJMP      ??Subroutine105_0
   1192          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET
   1193          
   1194          /*********************************************************************
   1195           * @fn          ZDP_BindUnbindReq
   1196           *
   1197           * @brief       This builds and send a Bind_req or Unbind_req message
   1198           *              Depending on the ClusterID. This function
   1199           *              sends a unicast message to the local coordinator.
   1200           *
   1201           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1202           * @param       dstAddr - destination address of the message
   1203           * @param       SourceAddr - source 64 bit address of the binding
   1204           * @param       SrcEPIntf - Source endpoint/interface
   1205           * @param       ClusterID - Binding cluster ID
   1206           * @param       DestinationAddr - destination 64 bit addr of binding
   1207           * @param       DstEPIntf - destination endpoint/interface
   1208           * @param       SecurityEnable - Security Options
   1209           *
   1210           * @return      afStatus_t
   1211           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1212          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1213                                        uint8 *SourceAddr, byte SrcEndPoint,
   1214                                        cId_t ClusterID,
   1215                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1216                                        byte SecurityEnable )
   1217          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   \   00000D   89..         MOV       ?V3,R1
   1218            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL     ??Subroutine107_0 & 0xFFFF
   1219            byte len;
   1220          
   1221            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1222          
   1223            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1224            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \                     ??CrossCallReturnLabel_190:
   \   000012   75..0C       MOV       ?V2,#0xc
   \   000015   7416         MOV       A,#0x16
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   12....       LCALL     ??Subroutine112_0 & 0xFFFF
   1225            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_206:
   \   00001D   EE           MOV       A,R6
   \   00001E   2408         ADD       A,#0x8
   \   000020   F5..         MOV       ?V0,A
   \   000022   E4           CLR       A
   \   000023   3F           ADDC      A,R7
   \   000024   F5..         MOV       ?V1,A
   \   000026   85..82       MOV       DPL,?V0
   \   000029   F583         MOV       DPH,A
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F8           MOV       R0,A
   \   00002D   7403         MOV       A,#0x3
   \   00002F   68           XRL       A,R0
   \   000030   7005         JNZ       ??ZDP_BindUnbindReq_0
   1226              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   000032   75..15       MOV       ?V2,#0x15
   \   000035   8008         SJMP      ??ZDP_BindUnbindReq_1
   1227            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000037   7401         MOV       A,#0x1
   \   000039   68           XRL       A,R0
   \   00003A   7003         JNZ       ??ZDP_BindUnbindReq_1
   1228              len += sizeof ( uint16 );
   \   00003C   75..0E       MOV       ?V2,#0xe
   1229          
   1230            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   00003F                ; Setup parameters for call to function sAddrExtCpy
   \   00003F   7412         MOV       A,#0x12
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000047   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1231            *pBuf++ = SrcEndPoint;
   \   00004A   8A82         MOV       DPL,R2
   \   00004C   8B83         MOV       DPH,R3
   \   00004E   E5..         MOV       A,?V3
   \   000050   F0           MOVX      @DPTR,A
   \   000051   7414         MOV       A,#0x14
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   12....       LCALL     ?Subroutine15 & 0xFFFF
   1232          
   1233            *pBuf++ = LO_UINT16( ClusterID );
   1234          
   1235            *pBuf++ = HI_UINT16( ClusterID );
   1236            *pBuf++ = destinationAddr->addrMode;
   \                     ??CrossCallReturnLabel_12:
   \   000059   85..82       MOV       DPL,?V0
   \   00005C   85..83       MOV       DPH,?V1
   \   00005F   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000062   5001         JNC       ??ZDP_BindUnbindReq_2
   \   000064   0B           INC       R3
   1237            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??ZDP_BindUnbindReq_2:
   \   000065   85..82       MOV       DPL,?V0
   \   000068   85..83       MOV       DPH,?V1
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F8           MOV       R0,A
   \   00006D   7403         MOV       A,#0x3
   \   00006F   68           XRL       A,R0
   \   000070   7017         JNZ       ??ZDP_BindUnbindReq_3
   1238            {
   1239              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1240              *pBuf = DstEndPoint;
   \   000072   7418         MOV       A,#0x18
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   E0           MOVX      A,@DPTR
   \   000078   C0E0         PUSH      A
   \   00007A                ; Setup parameters for call to function sAddrExtCpy
   \   00007A   EE           MOV       A,R6
   \   00007B   FC           MOV       R4,A
   \   00007C   EF           MOV       A,R7
   \   00007D   FD           MOV       R5,A
   \   00007E   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000081   8A82         MOV       DPL,R2
   \   000083   8B83         MOV       DPH,R3
   \   000085   D0E0         POP       A
   \   000087   8014         SJMP      ??ZDP_BindUnbindReq_4
   1241            }
   1242            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_3:
   \   000089   7401         MOV       A,#0x1
   \   00008B   68           XRL       A,R0
   \   00008C   7010         JNZ       ??ZDP_BindUnbindReq_5
   1243            {
   1244              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   00008E   8E82         MOV       DPL,R6
   \   000090   8F83         MOV       DPH,R7
   \   000092   12....       LCALL     ?Subroutine57 & 0xFFFF
   1245              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \                     ??CrossCallReturnLabel_86:
   \   000095   8E82         MOV       DPL,R6
   \   000097   8F83         MOV       DPH,R7
   \   000099   12....       LCALL     ?Subroutine65 & 0xFFFF
   1246            }
   \                     ??CrossCallReturnLabel_175:
   \   00009C   A3           INC       DPTR
   \                     ??ZDP_BindUnbindReq_4:
   \   00009D   F0           MOVX      @DPTR,A
   1247          
   1248            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_5:
   \   00009E   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000A1   7410         MOV       A,#0x10
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4                ; Setup parameters for call to function fillAndSend
   \   0000A4   78..         MOV       R0,#?V6
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A9   A9..         MOV       R1,?V2
   \   0000AB   AC..         MOV       R4,?V4
   \   0000AD   AD..         MOV       R5,?V5
   \   0000AF   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   0000B1   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   0000B3   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000B6   7402         MOV       A,#0x2
   \   0000B8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BB   E9           MOV       A,R1
   \   0000BC   F9           MOV       R1,A
   \   0000BD   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000C0   E4           CLR       A
   \   0000C1   F0           MOVX      @DPTR,A
   \   0000C2   02....       LJMP      ??Subroutine105_0 & 0xFFFF
   1249          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine106_0
   \   000001                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000003                REQUIRE ??Subroutine113_0
   \   000003                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EA           MOV       A,R2
   \   000002   2404         ADD       A,#0x4
   \   000004   FA           MOV       R2,A
   \   000005   22           RET
   1250          
   1251          /*********************************************************************
   1252           * Network Management
   1253           */
   1254          
   1255          /*********************************************************************
   1256           * @fn          ZDP_MgmtNwkDiscReq
   1257           *
   1258           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1259           *              function sends a unicast message.
   1260           *
   1261           * @param       dstAddr - destination address of the message
   1262           * @param       ScanChannels - 32 bit address bit map
   1263           * @param       StartIndex - Starting index within the reporting network
   1264           *                           list
   1265           * @param       SecurityEnable - Security Options
   1266           *
   1267           * @return      afStatus_t
   1268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000   EE           MOV       A,R6
   \   000001   FC           MOV       R4,A
   \   000002   EF           MOV       A,R7
   \   000003   FD           MOV       R5,A
   \   000004   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000008   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00000B   7402         MOV       A,#0x2
   \   00000D                REQUIRE ??Subroutine91_0
   \   00000D                ; // Fall through to label ??Subroutine91_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1269          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1270                                         uint32 ScanChannels,
   1271                                         byte ScanDuration,
   1272                                         byte StartIndex,
   1273                                         byte SecurityEnable )
   1274          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
   \   00000B   8C..         MOV       ?V1,R4
   1275            uint8 *pBuf = ZDP_TmpBuf;
   1276            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1277          
   1278            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1279          
   1280            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   00000D                ; Setup parameters for call to function osal_buffer_uint32
   \   00000D   740C         MOV       A,#0xc
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000015   12....       LCALL     ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000018   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00001B   7404         MOV       A,#0x4
   \   00001D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   1281          
   1282            *pBuf++ = ScanDuration;
   \   000024   E5..         MOV       A,?V0
   \   000026   F0           MOVX      @DPTR,A
   1283            *pBuf = StartIndex;
   \   000027   A3           INC       DPTR
   \   000028   E5..         MOV       A,?V1
   \   00002A   F0           MOVX      @DPTR,A
   1284          
   1285            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   00002B                ; Setup parameters for call to function fillAndSend
   \   00002B   75..30       MOV       ?V2,#0x30
   \   00002E   75..00       MOV       ?V3,#0x0
   \   000031   78..         MOV       R0,#?V2
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   7906         MOV       R1,#0x6
   \   000038   02....       LJMP      ??Subroutine90_0 & 0xFFFF
   1286          }
   1287          
   1288          /*********************************************************************
   1289           * @fn          ZDP_MgmtDirectJoinReq
   1290           *
   1291           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1292           *              function sends a unicast message.
   1293           *
   1294           * @param       dstAddr - destination address of the message
   1295           * @param       deviceAddr - 64 bit IEEE Address
   1296           * @param       SecurityEnable - Security Options
   1297           *
   1298           * @return      afStatus_t
   1299           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75..00       MOV       ?V3,#0x0
   \   000003   78..         MOV       R0,#?V2
   \   000005   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000008   7909         MOV       R1,#0x9
   \   00000A                REQUIRE ??Subroutine90_0
   \   00000A                ; // Fall through to label ??Subroutine90_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   89..         MOV       ?V0,R1
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                REQUIRE ??Subroutine107_0
   \   000006                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1300          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1301                                         uint8 *deviceAddr,
   1302                                         byte capInfo,
   1303                                         byte SecurityEnable )
   1304          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine38 & 0xFFFF
   1305            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1306          
   1307            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \                     ??CrossCallReturnLabel_182:
   \   000008   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1308            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \   00000B   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   00000E   C8           XCH       A,R0
   \   00000F   2408         ADD       A,#0x8
   \   000011   F582         MOV       DPL,A
   \   000013   E4           CLR       A
   \   000014   38           ADDC      A,R0
   \   000015   F583         MOV       DPH,A
   \   000017   E5..         MOV       A,?V0
   \   000019   F0           MOVX      @DPTR,A
   1309          
   1310            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   00001A                ; Setup parameters for call to function fillAndSend
   \   00001A   75..35       MOV       ?V2,#0x35
   \   00001D   02....       LJMP      ?Subroutine1 & 0xFFFF
   1311          }
   1312          
   1313          /*********************************************************************
   1314           * @fn          ZDP_MgmtPermitJoinReq
   1315           *
   1316           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1317           *
   1318           * @param       dstAddr - destination address of the message
   1319           * @param       duration - Permit duration
   1320           * @param       TcSignificance - Trust Center Significance
   1321           *
   1322           * @return      afStatus_t
   1323           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1324          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1325                                            byte TcSignificance, byte SecurityEnable )
   1326          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1327            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1328          
   1329            // Build buffer
   1330            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   00000E   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000011   E9           MOV       A,R1
   \   000012   12....       LCALL     ?Subroutine21 & 0xFFFF
   1331            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \                     ??CrossCallReturnLabel_25:
   \   000015   EC           MOV       A,R4
   \   000016   F0           MOVX      @DPTR,A
   1332          
   1333            // Check of this is a broadcast message
   1334            if ( (dstAddr) && ((dstAddr->addrMode == Addr16Bit) || (dstAddr->addrMode == AddrBroadcast))
   1335                && ((dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL)
   1336                    || (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR)
   1337                    || (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVRXON)) )
   \   000017   EE           MOV       A,R6
   \   000018   4F           ORL       A,R7
   \   000019   6070         JZ        ??ZDP_MgmtPermitJoinReq_0
   \   00001B   8E82         MOV       DPL,R6
   \   00001D   8F83         MOV       DPH,R7
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F8           MOV       R0,A
   \   000029   7402         MOV       A,#0x2
   \   00002B   68           XRL       A,R0
   \   00002C   6005         JZ        ??ZDP_MgmtPermitJoinReq_1
   \   00002E   740F         MOV       A,#0xf
   \   000030   68           XRL       A,R0
   \   000031   7058         JNZ       ??ZDP_MgmtPermitJoinReq_0
   \                     ??ZDP_MgmtPermitJoinReq_1:
   \   000033   8E82         MOV       DPL,R6
   \   000035   8F83         MOV       DPH,R7
   \   000037   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   00003A   74FF         MOV       A,#-0x1
   \   00003C   68           XRL       A,R0
   \   00003D   7003         JNZ       ??ZDP_MgmtPermitJoinReq_2
   \   00003F   74FF         MOV       A,#-0x1
   \   000041   69           XRL       A,R1
   \                     ??ZDP_MgmtPermitJoinReq_2:
   \   000042   6014         JZ        ??ZDP_MgmtPermitJoinReq_3
   \   000044   74FC         MOV       A,#-0x4
   \   000046   68           XRL       A,R0
   \   000047   7003         JNZ       ??ZDP_MgmtPermitJoinReq_4
   \   000049   74FF         MOV       A,#-0x1
   \   00004B   69           XRL       A,R1
   \                     ??ZDP_MgmtPermitJoinReq_4:
   \   00004C   600A         JZ        ??ZDP_MgmtPermitJoinReq_3
   \   00004E   74FD         MOV       A,#-0x3
   \   000050   68           XRL       A,R0
   \   000051   7003         JNZ       ??ZDP_MgmtPermitJoinReq_5
   \   000053   74FF         MOV       A,#-0x1
   \   000055   69           XRL       A,R1
   \                     ??ZDP_MgmtPermitJoinReq_5:
   \   000056   7033         JNZ       ??ZDP_MgmtPermitJoinReq_0
   1338            {
   1339              // Send this to our self as well as broadcast to network
   1340              zAddrType_t tmpAddr;
   1341          
   1342              tmpAddr.addrMode = Addr16Bit;
   \                     ??ZDP_MgmtPermitJoinReq_3:
   \   000058   7408         MOV       A,#0x8
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   7402         MOV       A,#0x2
   \   00005F   F0           MOVX      @DPTR,A
   1343              tmpAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000060                ; Setup parameters for call to function NLME_GetShortAddr
   \   000060   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000063   85..82       MOV       DPL,?XSP + 0
   \   000066   85..83       MOV       DPH,?XSP + 1
   \   000069   EA           MOV       A,R2
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   A3           INC       DPTR
   \   00006C   EB           MOV       A,R3
   \   00006D   F0           MOVX      @DPTR,A
   1344          
   1345              fillAndSend( &ZDP_TransID, &tmpAddr, Mgmt_Permit_Join_req,
   1346                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   00006E                ; Setup parameters for call to function fillAndSend
   \   00006E   75..36       MOV       ?V2,#0x36
   \   000071   75..00       MOV       ?V3,#0x0
   \   000074   78..         MOV       R0,#?V2
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000079   7902         MOV       R1,#0x2
   \   00007B   E9           MOV       A,R1
   \   00007C   12....       LCALL     ?XSTACK_DISP102_8
   \   00007F   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000081   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000083   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000086   7402         MOV       A,#0x2
   \   000088   12....       LCALL     ?DEALLOC_XSTACK8
   1347            }
   1348          
   1349            // Send the message
   1350            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1351                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \                     ??ZDP_MgmtPermitJoinReq_0:
   \   00008B                ; Setup parameters for call to function fillAndSend
   \   00008B   75..36       MOV       ?V2,#0x36
   \   00008E   75..00       MOV       ?V3,#0x0
   \   000091   78..         MOV       R0,#?V2
   \   000093   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000096   7902         MOV       R1,#0x2
   \   000098   EE           MOV       A,R6
   \   000099   FC           MOV       R4,A
   \   00009A   EF           MOV       A,R7
   \   00009B   FD           MOV       R5,A
   \   00009C   02....       LJMP      ?Subroutine9 & 0xFFFF
   1352          }
   1353          
   1354          /*********************************************************************
   1355           * @fn          ZDP_MgmtLeaveReq
   1356           *
   1357           * @brief       This builds and send a Mgmt_Leave_req message.
   1358           *
   1359           * @param       dstAddr - destination address of the message
   1360           *              IEEEAddr - IEEE adddress of device that is removed
   1361           *              RemoveChildren - set to 1 to remove the children of the
   1362           *                                device as well. 0 otherwise.
   1363           *              Rejoin - set to 1 if the removed device should rejoin
   1364                                   afterwards. 0 otherwise.
   1365           *
   1366           * @return      afStatus_t
   1367           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1368          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1369                           uint8 Rejoin, uint8 SecurityEnable )
   1370          
   1371          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine38 & 0xFFFF
   1372            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1373          
   1374            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \                     ??CrossCallReturnLabel_183:
   \   000008   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1375            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   00000B   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   2408         ADD       A,#0x8
   \   000011   F8           MOV       R0,A
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   3400         ADDC      A,#0x0
   \   000016   F9           MOV       R1,A
   \   000017   8882         MOV       DPL,R0
   \   000019   8983         MOV       DPH,R1
   \   00001B   E4           CLR       A
   \   00001C   F0           MOVX      @DPTR,A
   1376          
   1377            if ( RemoveChildren == TRUE )
   \   00001D   04           INC       A
   \   00001E   65..         XRL       A,?V0
   \   000020   7003         JNZ       ??ZDP_MgmtLeaveReq_0
   1378            {
   1379              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   000022   7440         MOV       A,#0x40
   \   000024   F0           MOVX      @DPTR,A
   1380            }
   1381            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   000025   740C         MOV       A,#0xc
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6401         XRL       A,#0x1
   \   00002D   7008         JNZ       ??ZDP_MgmtLeaveReq_1
   1382            {
   1383              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   00002F   8882         MOV       DPL,R0
   \   000031   8983         MOV       DPH,R1
   \   000033   E0           MOVX      A,@DPTR
   \   000034   D2E7         SETB      0xE0 /* A   */.7
   \   000036   F0           MOVX      @DPTR,A
   1384            }
   1385          
   1386            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   75..34       MOV       ?V2,#0x34
   \   00003A   02....       LJMP      ?Subroutine1 & 0xFFFF
   1387          }
   1388          
   1389          /*********************************************************************
   1390           * @fn          ZDP_MgmtNwkUpdateReq
   1391           *
   1392           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1393           *              function sends a unicast or broadcast message.
   1394           *
   1395           * @param       dstAddr - destination address of the message
   1396           * @param       ChannelMask - 32 bit address bit map
   1397           * @param       ScanDuration - length of time to spend scanning each channel
   1398           * @param       ScanCount - number of energy scans to be conducted
   1399           * @param       NwkUpdateId - NWk Update Id value
   1400           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1401           *                               bit set in its Node Descriptor
   1402           *
   1403           * @return      afStatus_t
   1404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1405          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1406                                           uint32 ChannelMask,
   1407                                           uint8 ScanDuration,
   1408                                           uint8 ScanCount,
   1409                                           uint8 NwkUpdateId,
   1410                                           uint16 NwkManagerAddr )
   1411          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   E9           MOV       A,R1
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V2,R4
   \   00000D   8D..         MOV       ?V3,R5
   1412            uint8 *pBuf = ZDP_TmpBuf;
   1413            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   00000F   7E05         MOV       R6,#0x5
   1414          
   1415            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000011                ; Setup parameters for call to function osal_buffer_uint32
   \   000011   740E         MOV       A,#0xe
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000019   12....       LCALL     ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   00001C   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00001F   7404         MOV       A,#0x4
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
   1416          
   1417            *pBuf++ = ScanDuration;
   \   000024   EF           MOV       A,R7
   \   000025   8A82         MOV       DPL,R2
   \   000027   8B83         MOV       DPH,R3
   \   000029   F0           MOVX      @DPTR,A
   1418          
   1419            if ( ScanDuration <= 0x05 )
   \   00002A   EA           MOV       A,R2
   \   00002B   2402         ADD       A,#0x2
   \   00002D   FC           MOV       R4,A
   \   00002E   E4           CLR       A
   \   00002F   3B           ADDC      A,R3
   \   000030   FD           MOV       R5,A
   \   000031   A3           INC       DPTR
   \   000032   EF           MOV       A,R7
   \   000033   C3           CLR       C
   \   000034   9406         SUBB      A,#0x6
   \   000036   5007         JNC       ??ZDP_MgmtNwkUpdateReq_0
   1420            {
   1421              // Request is to scan over channelMask
   1422              len += sizeof( uint8 );
   \   000038   7E06         MOV       R6,#0x6
   1423          
   1424              *pBuf++ = ScanCount;
   \   00003A   E5..         MOV       A,?V2
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   8025         SJMP      ??ZDP_MgmtNwkUpdateReq_1
   1425            }
   1426            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   00003F   74FE         MOV       A,#-0x2
   \   000041   6F           XRL       A,R7
   \   000042   6005         JZ        ??ZDP_MgmtNwkUpdateReq_2
   \   000044   74FF         MOV       A,#-0x1
   \   000046   6F           XRL       A,R7
   \   000047   701B         JNZ       ??ZDP_MgmtNwkUpdateReq_1
   1427            {
   1428              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1429              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000049   7E06         MOV       R6,#0x6
   1430          
   1431              *pBuf++ = NwkUpdateId;
   \   00004B   E5..         MOV       A,?V3
   \   00004D   F0           MOVX      @DPTR,A
   1432          
   1433              if ( ScanDuration == 0xFF )
   \   00004E   74FF         MOV       A,#-0x1
   \   000050   6F           XRL       A,R7
   \   000051   7011         JNZ       ??ZDP_MgmtNwkUpdateReq_1
   1434              {
   1435                len += sizeof( uint16 );
   \   000053   7E08         MOV       R6,#0x8
   \   000055   7412         MOV       A,#0x12
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   12....       LCALL     ?Subroutine51 & 0xFFFF
   1436          
   1437                *pBuf++  = LO_UINT16( NwkManagerAddr );
   1438                *pBuf++  = HI_UINT16( NwkManagerAddr );
   1439              }
   1440            }
   \                     ??CrossCallReturnLabel_78:
   \   00005D   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000060   F0           MOVX      @DPTR,A
   \   000061   EA           MOV       A,R2
   \   000062   2404         ADD       A,#0x4
   1441          
   1442            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   000064                ; Setup parameters for call to function fillAndSend
   \   000064   75..38       MOV       ?V4,#0x38
   \   000067   75..00       MOV       ?V5,#0x0
   \   00006A   78..         MOV       R0,#?V4
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006F   EE           MOV       A,R6
   \   000070   F9           MOV       R1,A
   \   000071   AC..         MOV       R4,?V0
   \   000073   AD..         MOV       R5,?V1
   \   000075   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000077   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000079   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00007C   7402         MOV       A,#0x2
   \   00007E   02....       LJMP      ?Subroutine0 & 0xFFFF
   1443          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
   1444          
   1445          
   1446          /*********************************************************************
   1447           * Network Management Responses
   1448           */
   1449          
   1450          /*********************************************************************
   1451           * @fn          ZDP_MgmtNwkDiscRsp
   1452           *
   1453           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1454           *              function sends a unicast message.
   1455           *
   1456           * @param       dstAddr - destination address of the message
   1457           * @param       Status - message status (ZDP_SUCCESS or other)
   1458           * @param       NetworkCount - Total number of networks found
   1459           * @param       StartIndex - Starting index within the reporting network
   1460           *                           list
   1461           * @param       NetworkListCount - number of network lists included
   1462           *                                 in this message
   1463           * @param       NetworkList - List of network descriptors
   1464           * @param       SecurityEnable - Security Options
   1465           *
   1466           * @return      afStatus_t
   1467           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1468          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1469                                      byte Status,
   1470                                      byte NetworkCount,
   1471                                      byte StartIndex,
   1472                                      byte NetworkListCount,
   1473                                      networkDesc_t *NetworkList,
   1474                                      byte SecurityEnable )
   1475          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V12,R2
   \   000014   8B..         MOV       ?V13,R3
   \   000016   8C..         MOV       ?V10,R4
   \   000018   8D..         MOV       ?V7,R5
   \   00001A   7418         MOV       A,#0x18
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V4,A
   1476            uint8 *buf;
   1477            uint8 *pBuf;
   1478            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1479            byte idx;
   1480          
   1481            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1482          
   1483            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   000022   75F00C       MOV       B,#0xc
   \   000025   A4           MUL       AB
   \   000026   2404         ADD       A,#0x4
   \   000028   F5..         MOV       ?V5,A
   1484          
   1485            buf = osal_mem_alloc( len+1 );
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00002D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000030   8A..         MOV       ?V0,R2
   \   000032   8B..         MOV       ?V1,R3
   1486            if ( buf == NULL )
   \   000034   EA           MOV       A,R2
   \   000035   45..         ORL       A,?V1
   \   000037   7005         JNZ       ??ZDP_MgmtNwkDiscRsp_0
   1487            {
   1488              return afStatus_MEM_FAIL;
   \   000039   7910         MOV       R1,#0x10
   \   00003B   02....       LJMP      ??CrossCallReturnLabel_28 & 0xFFFF
   1489            }
   1490          
   1491            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   00003E   8A82         MOV       DPL,R2
   \   000040   8B83         MOV       DPH,R3
   \   000042   A3           INC       DPTR
   \   000043   8582..       MOV       ?V8,DPL
   \   000046   8583..       MOV       ?V9,DPH
   \   000049   AE..         MOV       R6,?V8
   \   00004B   AF..         MOV       R7,?V9
   1492          
   1493            *pBuf++ = Status;
   \   00004D   E5..         MOV       A,?V10
   \   00004F   F0           MOVX      @DPTR,A
   1494            *pBuf++ = NetworkCount;
   \   000050   A3           INC       DPTR
   \   000051   E5..         MOV       A,?V7
   \   000053   F0           MOVX      @DPTR,A
   1495            *pBuf++ = StartIndex;
   \   000054   7417         MOV       A,#0x17
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00005C   A3           INC       DPTR
   \   00005D   12....       LCALL     ?Subroutine83 & 0xFFFF
   1496            *pBuf++ = NetworkListCount;
   \                     ??CrossCallReturnLabel_127:
   \   000060   E5..         MOV       A,?V4
   \   000062   F0           MOVX      @DPTR,A
   \   000063   EE           MOV       A,R6
   \   000064   2404         ADD       A,#0x4
   \   000066   FE           MOV       R6,A
   \   000067   5001         JNC       ??ZDP_MgmtNwkDiscRsp_1
   \   000069   0F           INC       R7
   1497          
   1498            for ( idx = 0; idx < NetworkListCount; idx++ )
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   00006A   75..00       MOV       ?V6,#0x0
   \   00006D   7419         MOV       A,#0x19
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000075   8016         SJMP      ??ZDP_MgmtNwkDiscRsp_2
   1499            {
   1500              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1501              pBuf += Z_EXTADDR_LEN;
   1502          
   1503              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1504              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1505              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1506              *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
   1507              *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
   1508          
   1509              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1510              {
   1511                *pBuf++ = TRUE;                         // Permit Joining
   1512              }
   1513              else
   1514              {
   1515                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   000077   E4           CLR       A
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   000078   F0           MOVX      @DPTR,A
   \   000079   E8           MOV       A,R0
   \   00007A   FE           MOV       R6,A
   \   00007B   E9           MOV       A,R1
   \   00007C   FF           MOV       R7,A
   1516              }
   1517          
   1518              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \   00007D   E5..         MOV       A,?V2
   \   00007F   2414         ADD       A,#0x14
   \   000081   F582         MOV       DPL,A
   \   000083   E4           CLR       A
   \   000084   35..         ADDC      A,?V3
   \   000086   F583         MOV       DPH,A
   \   000088   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00008B   05..         INC       ?V6
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   00008D   E5..         MOV       A,?V6
   \   00008F   C3           CLR       C
   \   000090   95..         SUBB      A,?V4
   \   000092   507D         JNC       ??ZDP_MgmtNwkDiscRsp_5
   \   000094                ; Setup parameters for call to function sAddrExtCpy
   \   000094   E5..         MOV       A,?V2
   \   000096   240B         ADD       A,#0xb
   \   000098   FC           MOV       R4,A
   \   000099   E4           CLR       A
   \   00009A   35..         ADDC      A,?V3
   \   00009C   FD           MOV       R5,A
   \   00009D   EE           MOV       A,R6
   \   00009E   FA           MOV       R2,A
   \   00009F   EF           MOV       A,R7
   \   0000A0   FB           MOV       R3,A
   \   0000A1   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000A4   85..82       MOV       DPL,?V2
   \   0000A7   85..83       MOV       DPH,?V3
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000B9   85..82       MOV       DPL,?V2
   \   0000BC   85..83       MOV       DPH,?V3
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   0000C7   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   C4           SWAP      A
   \   0000CF   54F0         ANL       A,#0xf0
   \   0000D1   FA           MOV       R2,A
   \   0000D2   8882         MOV       DPL,R0
   \   0000D4   8983         MOV       DPH,R1
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   4A           ORL       A,R2
   \   0000D8   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   74FF         MOV       A,#-0x1
   \   0000DF   F0           MOVX      @DPTR,A
   \   0000E0   EE           MOV       A,R6
   \   0000E1   240C         ADD       A,#0xc
   \   0000E3   F8           MOV       R0,A
   \   0000E4   E4           CLR       A
   \   0000E5   3F           ADDC      A,R7
   \   0000E6   F9           MOV       R1,A
   \   0000E7   EE           MOV       A,R6
   \   0000E8   240B         ADD       A,#0xb
   \   0000EA   FA           MOV       R2,A
   \   0000EB   E4           CLR       A
   \   0000EC   3F           ADDC      A,R7
   \   0000ED   FB           MOV       R3,A
   \   0000EE   85..82       MOV       DPL,?V2
   \   0000F1   85..83       MOV       DPH,?V3
   \   0000F4   A3           INC       DPTR
   \   0000F5   A3           INC       DPTR
   \   0000F6   A3           INC       DPTR
   \   0000F7   A3           INC       DPTR
   \   0000F8   A3           INC       DPTR
   \   0000F9   A3           INC       DPTR
   \   0000FA   A3           INC       DPTR
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   64FE         XRL       A,#0xfe
   \   0000FE   7003         JNZ       ??ZDP_MgmtNwkDiscRsp_6
   \   000100   A3           INC       DPTR
   \   000101   E0           MOVX      A,@DPTR
   \   000102   F4           CPL       A
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   000103   8A82         MOV       DPL,R2
   \   000105   8B83         MOV       DPH,R3
   \   000107   7003         JNZ       $+5
   \   000109   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   \   00010C   7401         MOV       A,#0x1
   \   00010E   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_4 & 0xFFFF
   1519            }
   1520          
   1521            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   000111   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000114   E5..         MOV       A,?V8
   \   000116   F0           MOVX      @DPTR,A
   \   000117   A3           INC       DPTR
   \   000118   E5..         MOV       A,?V9
   \   00011A   F0           MOVX      @DPTR,A
   \   00011B                ; Setup parameters for call to function fillAndSend
   \   00011B   75..30       MOV       ?V2,#0x30
   \   00011E   75..80       MOV       ?V3,#-0x80
   \   000121   78..         MOV       R0,#?V2
   \   000123   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000126   A9..         MOV       R1,?V5
   \   000128   AC..         MOV       R4,?V12
   \   00012A   AD..         MOV       R5,?V13
   \   00012C   7402         MOV       A,#0x2
   \   00012E   12....       LCALL     ?XSTACK_DISP101_8
   \   000131   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000134   7402         MOV       A,#0x2
   \   000136   12....       LCALL     ?DEALLOC_XSTACK8
   \   000139   E9           MOV       A,R1
   \   00013A   FE           MOV       R6,A
   \   00013B                ; Setup parameters for call to function osal_mem_free
   \   00013B   AA..         MOV       R2,?V0
   \   00013D   AB..         MOV       R3,?V1
   \   00013F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000142   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000145                REQUIRE ?Subroutine7
   \   000145                ; // Fall through to label ?Subroutine7
   1522          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7401         MOV       A,#0x1
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005   7F0E         MOV       R7,#0xe
   \   000007   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine109_0
   \   000001                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   EE           MOV       A,R6
   \   00000B   F9           MOV       R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   2401         ADD       A,#0x1
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   3400         ADDC      A,#0x0
   \   000006   FB           MOV       R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   2409         ADD       A,#0x9
   \   000004   F8           MOV       R0,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F9           MOV       R1,A
   \   000008   22           RET
   1523          
   1524          /*********************************************************************
   1525           * @fn          ZDP_MgmtLqiRsp
   1526           *
   1527           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1528           *              function sends a unicast message.
   1529           *
   1530           * @param       dstAddr - destination address of the message
   1531           * @param       Status - message status (ZDP_SUCCESS or other)
   1532           * @param       NeighborLqiEntries - Total number of entries found
   1533           * @param       StartIndex - Starting index within the reporting list
   1534           * @param       NeighborLqiCount - number of lists included
   1535           *                                 in this message
   1536           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1537           *                is the list to be sent, not the entire list
   1538           * @param       SecurityEnable - true if secure
   1539           *
   1540           * @return      ZStatus_t
   1541           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1542          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1543                                    byte Status,
   1544                                    byte NeighborLqiEntries,
   1545                                    byte StartIndex,
   1546                                    byte NeighborLqiCount,
   1547                                    ZDP_MgmtLqiItem_t* NeighborList,
   1548                                    byte SecurityEnable )
   1549          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000   74EB         MOV       A,#-0x15
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V10,R2
   \   000014   8B..         MOV       ?V11,R3
   \   000016   8D..         MOV       ?V12,R5
   1550            ZDP_MgmtLqiItem_t* list = NeighborList;
   \   000018   7418         MOV       A,#0x18
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ??Subroutine112_0 & 0xFFFF
   1551            uint8 *buf, *pBuf;
   1552            byte len, x;
   1553          
   1554            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1555          
   1556            if ( ZSuccess != Status )
   \                     ??CrossCallReturnLabel_207:
   \   000020   EC           MOV       A,R4
   \   000021   6020         JZ        ??ZDP_MgmtLqiRsp_0
   1557            {
   1558              ZDP_TmpBuf[0] = Status;
   \   000023   12....       LCALL     ?Subroutine45 & 0xFFFF
   1559              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   1560            }
   \                     ??CrossCallReturnLabel_167:
   \   000026   EC           MOV       A,R4
   \   000027   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   7901         MOV       R1,#0x1
   \   00002F   AC..         MOV       R4,?V10
   \   000031   AD..         MOV       R5,?V11
   \   000033   7402         MOV       A,#0x2
   \   000035   12....       LCALL     ?XSTACK_DISP101_8
   \   000038   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00003B   7402         MOV       A,#0x2
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000040   02....       LJMP      ??CrossCallReturnLabel_29 & 0xFFFF
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000043   7417         MOV       A,#0x17
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F5..         MOV       ?V5,A
   1561          
   1562            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1563            //  neighbor LQI data.
   1564            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \   00004B   75F016       MOV       B,#0x16
   \   00004E   A4           MUL       AB
   \   00004F   2404         ADD       A,#0x4
   \   000051   F5..         MOV       ?V6,A
   1565          
   1566            buf = osal_mem_alloc( len+1 );
   \   000053                ; Setup parameters for call to function osal_mem_alloc
   \   000053   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000056   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000059   8A..         MOV       ?V2,R2
   \   00005B   8B..         MOV       ?V3,R3
   1567            if ( buf == NULL )
   \   00005D   EA           MOV       A,R2
   \   00005E   45..         ORL       A,?V3
   \   000060   7005         JNZ       ??ZDP_MgmtLqiRsp_1
   1568            {
   1569              return afStatus_MEM_FAIL;
   \   000062   7910         MOV       R1,#0x10
   \   000064   02....       LJMP      ??CrossCallReturnLabel_29 & 0xFFFF
   1570            }
   1571          
   1572            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_1:
   \   000067   8A82         MOV       DPL,R2
   \   000069   8B83         MOV       DPH,R3
   \   00006B   A3           INC       DPTR
   \   00006C   8582..       MOV       ?V8,DPL
   \   00006F   8583..       MOV       ?V9,DPH
   \   000072   85....       MOV       ?V0,?V8
   \   000075   85....       MOV       ?V1,?V9
   1573          
   1574            *pBuf++ = Status;
   \   000078   E4           CLR       A
   \   000079   F0           MOVX      @DPTR,A
   1575            *pBuf++ = NeighborLqiEntries;
   \   00007A   A3           INC       DPTR
   \   00007B   E5..         MOV       A,?V12
   \   00007D   F0           MOVX      @DPTR,A
   1576            *pBuf++ = StartIndex;
   \   00007E   7416         MOV       A,#0x16
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000086   A3           INC       DPTR
   \   000087   F0           MOVX      @DPTR,A
   1577            *pBuf++ = NeighborLqiCount;
   \   000088   85..82       MOV       DPL,?V0
   \   00008B   85..83       MOV       DPH,?V1
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   E5..         MOV       A,?V5
   \   000093   F0           MOVX      @DPTR,A
   \   000094   E5..         MOV       A,?V0
   \   000096   2404         ADD       A,#0x4
   \   000098   F5..         MOV       ?V0,A
   \   00009A   5002         JNC       ??ZDP_MgmtLqiRsp_2
   \   00009C   05..         INC       ?V1
   1578          
   1579            for ( x = 0; x < NeighborLqiCount; x++ )
   \                     ??ZDP_MgmtLqiRsp_2:
   \   00009E   75..00       MOV       ?V4,#0x0
   \   0000A1   02....       LJMP      ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1580            {
   1581              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_4:
   \   0000A4                ; Setup parameters for call to function sAddrExtCpy
   \   0000A4   EE           MOV       A,R6
   \   0000A5   2402         ADD       A,#0x2
   \   0000A7   FC           MOV       R4,A
   \   0000A8   E4           CLR       A
   \   0000A9   3F           ADDC      A,R7
   \   0000AA   FD           MOV       R5,A
   \   0000AB   AA..         MOV       R2,?V0
   \   0000AD   AB..         MOV       R3,?V1
   \   0000AF   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1582              pBuf += Z_EXTADDR_LEN;
   1583          
   1584              // EXTADDR
   1585              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \   0000B2                ; Setup parameters for call to function sAddrExtCpy
   \   0000B2   EE           MOV       A,R6
   \   0000B3   240A         ADD       A,#0xa
   \   0000B5   FC           MOV       R4,A
   \   0000B6   E4           CLR       A
   \   0000B7   3F           ADDC      A,R7
   \   0000B8   FD           MOV       R5,A
   \   0000B9   E5..         MOV       A,?V0
   \   0000BB   2408         ADD       A,#0x8
   \   0000BD   FA           MOV       R2,A
   \   0000BE   E4           CLR       A
   \   0000BF   35..         ADDC      A,?V1
   \   0000C1   FB           MOV       R3,A
   \   0000C2   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000C5   8A..         MOV       ?V0,R2
   \   0000C7   8B..         MOV       ?V1,R3
   \   0000C9   A8..         MOV       R0,?V0
   \   0000CB   A9..         MOV       R1,?V1
   1586          
   1587              // NWKADDR
   1588              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   0000CD   EE           MOV       A,R6
   \   0000CE   2412         ADD       A,#0x12
   \   0000D0   FA           MOV       R2,A
   \   0000D1   E4           CLR       A
   \   0000D2   3F           ADDC      A,R7
   \   0000D3   FB           MOV       R3,A
   \   0000D4   8A82         MOV       DPL,R2
   \   0000D6   8B83         MOV       DPH,R3
   \   0000D8   12....       LCALL     ??Subroutine104_0 & 0xFFFF
   1589              *pBuf++ = HI_UINT16( list->nwkAddr );
   \                     ??CrossCallReturnLabel_170:
   \   0000DB   8A82         MOV       DPL,R2
   \   0000DD   8B83         MOV       DPH,R3
   \   0000DF   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   0000E2   A3           INC       DPTR
   \   0000E3   F0           MOVX      @DPTR,A
   1590          
   1591              // DEVICETYPE
   1592              *pBuf = list->devType;
   \   0000E4   E8           MOV       A,R0
   \   0000E5   2402         ADD       A,#0x2
   \   0000E7   FA           MOV       R2,A
   \   0000E8   E4           CLR       A
   \   0000E9   39           ADDC      A,R1
   \   0000EA   FB           MOV       R3,A
   \   0000EB   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   0000EE   12....       LCALL     ?Subroutine57 & 0xFFFF
   1593          
   1594              // RXONIDLE
   1595              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \                     ??CrossCallReturnLabel_87:
   \   0000F1   EE           MOV       A,R6
   \   0000F2   2415         ADD       A,#0x15
   \   0000F4   F582         MOV       DPL,A
   \   0000F6   E4           CLR       A
   \   0000F7   3F           ADDC      A,R7
   \   0000F8   F583         MOV       DPH,A
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   33           RLC       A
   \   0000FC   33           RLC       A
   \   0000FD   54FC         ANL       A,#0xfc
   \   0000FF   FC           MOV       R4,A
   \   000100   8A82         MOV       DPL,R2
   \   000102   8B83         MOV       DPH,R3
   \   000104   E0           MOVX      A,@DPTR
   \   000105   4C           ORL       A,R4
   \   000106   F0           MOVX      @DPTR,A
   1596          
   1597              // RELATIONSHIP
   1598              *pBuf++ |= (uint8)(list->relation << 4);
   \   000107   EE           MOV       A,R6
   \   000108   2416         ADD       A,#0x16
   \   00010A   F582         MOV       DPL,A
   \   00010C   E4           CLR       A
   \   00010D   3F           ADDC      A,R7
   \   00010E   F583         MOV       DPH,A
   \   000110   E0           MOVX      A,@DPTR
   \   000111   C4           SWAP      A
   \   000112   54F0         ANL       A,#0xf0
   \   000114   FC           MOV       R4,A
   \   000115   8A82         MOV       DPL,R2
   \   000117   8B83         MOV       DPH,R3
   \   000119   E0           MOVX      A,@DPTR
   \   00011A   4C           ORL       A,R4
   \   00011B   F0           MOVX      @DPTR,A
   1599          
   1600              // PERMITJOINING
   1601              *pBuf++ = (uint8)(list->permit);
   \   00011C   EE           MOV       A,R6
   \   00011D   2417         ADD       A,#0x17
   \   00011F   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000122   F0           MOVX      @DPTR,A
   1602          
   1603              // DEPTH
   1604              *pBuf++ = list->depth;
   \   000123   EE           MOV       A,R6
   \   000124   2418         ADD       A,#0x18
   \   000126   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000129   A3           INC       DPTR
   \   00012A   F0           MOVX      @DPTR,A
   1605          
   1606              // LQI
   1607              *pBuf++ = list->lqi;
   \   00012B   EE           MOV       A,R6
   \   00012C   2419         ADD       A,#0x19
   \   00012E   F582         MOV       DPL,A
   \   000130   E4           CLR       A
   \   000131   3F           ADDC      A,R7
   \   000132   F583         MOV       DPH,A
   \   000134   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000137   F0           MOVX      @DPTR,A
   \   000138   E8           MOV       A,R0
   \   000139   2406         ADD       A,#0x6
   \   00013B   F5..         MOV       ?V0,A
   \   00013D   E4           CLR       A
   \   00013E   39           ADDC      A,R1
   \   00013F   F5..         MOV       ?V1,A
   1608          
   1609              list++; // next list entry
   \   000141   EE           MOV       A,R6
   \   000142   241A         ADD       A,#0x1a
   \   000144   FE           MOV       R6,A
   \   000145   5001         JNC       ??ZDP_MgmtLqiRsp_5
   \   000147   0F           INC       R7
   1610            }
   \                     ??ZDP_MgmtLqiRsp_5:
   \   000148   05..         INC       ?V4
   \                     ??ZDP_MgmtLqiRsp_3:
   \   00014A   E5..         MOV       A,?V4
   \   00014C   C3           CLR       C
   \   00014D   95..         SUBB      A,?V5
   \   00014F   5003         JNC       $+5
   \   000151   02....       LJMP      ??ZDP_MgmtLqiRsp_4 & 0xFFFF
   1611          
   1612            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   000154   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000157   E5..         MOV       A,?V8
   \   000159   F0           MOVX      @DPTR,A
   \   00015A   A3           INC       DPTR
   \   00015B   E5..         MOV       A,?V9
   \   00015D   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000160   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000163   A9..         MOV       R1,?V6
   \   000165   AC..         MOV       R4,?V10
   \   000167   AD..         MOV       R5,?V11
   \   000169   7402         MOV       A,#0x2
   \   00016B   12....       LCALL     ?XSTACK_DISP101_8
   \   00016E   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000171   7402         MOV       A,#0x2
   \   000173   12....       LCALL     ?DEALLOC_XSTACK8
   \   000176   E9           MOV       A,R1
   \   000177   FE           MOV       R6,A
   \   000178                ; Setup parameters for call to function osal_mem_free
   \   000178   AA..         MOV       R2,?V2
   \   00017A   AB..         MOV       R3,?V3
   \   00017C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00017F   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000182   7401         MOV       A,#0x1
   \   000184   12....       LCALL     ?DEALLOC_XSTACK8
   \   000187   7F0D         MOV       R7,#0xd
   \   000189   02....       LJMP      ?BANKED_LEAVE_XDATA
   1613          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001   75..31       MOV       ?V0,#0x31
   \   000004   75..80       MOV       ?V1,#-0x80
   \   000007   78..         MOV       R0,#?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET
   1614          
   1615          /*********************************************************************
   1616           * @fn          ZDP_MgmtRtgRsp
   1617           *
   1618           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1619           *              function sends a unicast message.
   1620           *
   1621           * @param       dstAddr - destination address of the message
   1622           * @param       Status - message status (ZDP_SUCCESS or other)
   1623           * @param       RoutingTableEntries - Total number of entries
   1624           * @param       StartIndex - Starting index within the reporting list
   1625           * @param       RoutingTableListCount - number of entries included
   1626           *                                      in this message
   1627           * @param       RoutingTableList - List of Routing Table entries
   1628           * @param       SecurityEnable - true to enable security for this message
   1629           *
   1630           * @return      ZStatus_t
   1631           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1632          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1633                                      byte Status,
   1634                                      byte RoutingTableEntries,
   1635                                      byte StartIndex,
   1636                                      byte RoutingListCount,
   1637                                      rtgItem_t *RoutingTableList,
   1638                                      byte SecurityEnable )
   1639          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V2,R2
   \   000014   8B..         MOV       ?V3,R3
   \   000016   8C..         MOV       ?V1,R4
   \   000018   8D..         MOV       ?V0,R5
   \   00001A   7416         MOV       A,#0x16
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V5,A
   1640            uint8 *buf;
   1641            uint8 *pBuf;
   1642            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1643            byte len = 1 + 1 + 1 + 1;
   1644            byte x;
   1645          
   1646            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1647          
   1648            // Add an array for Routing List data
   1649            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   000022   75F005       MOV       B,#0x5
   \   000025   A4           MUL       AB
   \   000026   2404         ADD       A,#0x4
   \   000028   F5..         MOV       ?V4,A
   1650          
   1651            buf = osal_mem_alloc( (short)(len+1) );
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00002D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000030   8A..         MOV       ?V6,R2
   \   000032   8B..         MOV       ?V7,R3
   \   000034   AE..         MOV       R6,?V6
   \   000036   AF..         MOV       R7,?V7
   1652            if ( buf == NULL )
   \   000038   EE           MOV       A,R6
   \   000039   4F           ORL       A,R7
   \   00003A   7005         JNZ       ??ZDP_MgmtRtgRsp_0
   1653            {
   1654              return afStatus_MEM_FAIL;
   \   00003C   7910         MOV       R1,#0x10
   \   00003E   02....       LJMP      ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1655            }
   1656          
   1657            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   000041   8E82         MOV       DPL,R6
   \   000043   8F83         MOV       DPH,R7
   \   000045   A3           INC       DPTR
   \   000046   A882         MOV       R0,DPL
   \   000048   A983         MOV       R1,DPH
   \   00004A   E8           MOV       A,R0
   \   00004B   FA           MOV       R2,A
   \   00004C   E9           MOV       A,R1
   \   00004D   FB           MOV       R3,A
   1658          
   1659            *pBuf++ = Status;
   \   00004E   E5..         MOV       A,?V1
   \   000050   F0           MOVX      @DPTR,A
   1660            *pBuf++ = RoutingTableEntries;
   \   000051   A3           INC       DPTR
   \   000052   E5..         MOV       A,?V0
   \   000054   F0           MOVX      @DPTR,A
   1661            *pBuf++ = StartIndex;
   \   000055   7415         MOV       A,#0x15
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   12....       LCALL     ?Subroutine37 & 0xFFFF
   1662            *pBuf++ = RoutingListCount;
   \                     ??CrossCallReturnLabel_50:
   \   00005D   E5..         MOV       A,?V5
   \   00005F   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000062   5001         JNC       ??ZDP_MgmtRtgRsp_2
   \   000064   0B           INC       R3
   1663          
   1664            for ( x = 0; x < RoutingListCount; x++ )
   \                     ??ZDP_MgmtRtgRsp_2:
   \   000065   75..00       MOV       ?V6,#0x0
   \   000068   7417         MOV       A,#0x17
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000070   02....       LJMP      ??ZDP_MgmtRtgRsp_3 & 0xFFFF
   1665            {
   1666              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_4:
   \   000073   12....       LCALL     ?Subroutine14 & 0xFFFF
   1667              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   1668          
   1669              *pBuf = (RoutingTableList->status & 0x07);
   \                     ??CrossCallReturnLabel_8:
   \   000076   F5..         MOV       ?V8,A
   \   000078   E4           CLR       A
   \   000079   3B           ADDC      A,R3
   \   00007A   F5..         MOV       ?V9,A
   \   00007C   8C82         MOV       DPL,R4
   \   00007E   8D83         MOV       DPH,R5
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   E0           MOVX      A,@DPTR
   \   000086   5407         ANL       A,#0x7
   \   000088   85..82       MOV       DPL,?V8
   \   00008B   85..83       MOV       DPH,?V9
   \   00008E   F0           MOVX      @DPTR,A
   1670              if ( RoutingTableList->options & (ZP_MTO_ROUTE_RC | ZP_MTO_ROUTE_NRC) )
   \   00008F   EC           MOV       A,R4
   \   000090   2406         ADD       A,#0x6
   \   000092   F582         MOV       DPL,A
   \   000094   E4           CLR       A
   \   000095   3D           ADDC      A,R5
   \   000096   F583         MOV       DPH,A
   \   000098   E0           MOVX      A,@DPTR
   \   000099   5418         ANL       A,#0x18
   \   00009B   6029         JZ        ??ZDP_MgmtRtgRsp_5
   1671              {
   1672                uint8 options = 0;
   1673                options |= ZDO_MGMT_RTG_ENTRY_MANYTOONE;
   \   00009D   75..02       MOV       ?V7,#0x2
   1674          
   1675                if ( RoutingTableList->options & ZP_RTG_RECORD )
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   A2E2         MOV       C,0xE0 /* A   */.2
   \   0000A3   5003         JNC       ??ZDP_MgmtRtgRsp_6
   1676                {
   1677                  options |= ZDO_MGMT_RTG_ENTRY_ROUTE_RECORD_REQUIRED;
   \   0000A5   75..06       MOV       ?V7,#0x6
   1678                }
   1679          
   1680                if ( RoutingTableList->options & ZP_MTO_ROUTE_NRC )
   \                     ??ZDP_MgmtRtgRsp_6:
   \   0000A8   A2E4         MOV       C,0xE0 /* A   */.4
   \   0000AA   5007         JNC       ??ZDP_MgmtRtgRsp_7
   1681                {
   1682                  options |= ZDO_MGMT_RTG_ENTRY_MEMORY_CONSTRAINED;
   \   0000AC   D3           SETB      C
   \   0000AD   E5..         MOV       A,?V7
   \   0000AF   D2E0         SETB      0xE0 /* A   */.0
   \   0000B1   F5..         MOV       ?V7,A
   1683                }
   1684          
   1685                *pBuf |= (options << 3);
   \                     ??ZDP_MgmtRtgRsp_7:
   \   0000B3   E5..         MOV       A,?V7
   \   0000B5   33           RLC       A
   \   0000B6   33           RLC       A
   \   0000B7   33           RLC       A
   \   0000B8   54F8         ANL       A,#0xf8
   \   0000BA   F5..         MOV       ?V7,A
   \   0000BC   85..82       MOV       DPL,?V8
   \   0000BF   85..83       MOV       DPH,?V9
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   45..         ORL       A,?V7
   \   0000C5   F0           MOVX      @DPTR,A
   1686              }
   1687              pBuf++;
   1688          
   1689              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \                     ??ZDP_MgmtRtgRsp_5:
   \   0000C6   EC           MOV       A,R4
   \   0000C7   2402         ADD       A,#0x2
   \   0000C9   F5..         MOV       ?V8,A
   \   0000CB   E4           CLR       A
   \   0000CC   3D           ADDC      A,R5
   \   0000CD   F5..         MOV       ?V9,A
   \   0000CF   85..82       MOV       DPL,?V8
   \   0000D2   F583         MOV       DPH,A
   \   0000D4   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0000D7   F0           MOVX      @DPTR,A
   1690              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \   0000D8   85..82       MOV       DPL,?V8
   \   0000DB   85..83       MOV       DPH,?V9
   \   0000DE   A3           INC       DPTR
   \   0000DF   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0000E2   A3           INC       DPTR
   \   0000E3   F0           MOVX      @DPTR,A
   \   0000E4   EA           MOV       A,R2
   \   0000E5   2405         ADD       A,#0x5
   \   0000E7   FA           MOV       R2,A
   \   0000E8   5001         JNC       ??ZDP_MgmtRtgRsp_8
   \   0000EA   0B           INC       R3
   1691              RoutingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtRtgRsp_8:
   \   0000EB   EC           MOV       A,R4
   \   0000EC   2407         ADD       A,#0x7
   \   0000EE   FC           MOV       R4,A
   \   0000EF   5001         JNC       ??ZDP_MgmtRtgRsp_9
   \   0000F1   0D           INC       R5
   1692            }
   \                     ??ZDP_MgmtRtgRsp_9:
   \   0000F2   05..         INC       ?V6
   \                     ??ZDP_MgmtRtgRsp_3:
   \   0000F4   E5..         MOV       A,?V6
   \   0000F6   C3           CLR       C
   \   0000F7   95..         SUBB      A,?V5
   \   0000F9   5003         JNC       $+5
   \   0000FB   02....       LJMP      ??ZDP_MgmtRtgRsp_4 & 0xFFFF
   1693          
   1694            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   0000FE   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000101   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000104                ; Setup parameters for call to function fillAndSend
   \   000104   75..32       MOV       ?V6,#0x32
   \   000107   75..80       MOV       ?V7,#-0x80
   \   00010A   78..         MOV       R0,#?V6
   \   00010C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010F   A9..         MOV       R1,?V4
   \   000111   AC..         MOV       R4,?V2
   \   000113   AD..         MOV       R5,?V3
   \   000115   7402         MOV       A,#0x2
   \   000117   12....       LCALL     ?XSTACK_DISP101_8
   \   00011A   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00011D   7402         MOV       A,#0x2
   \   00011F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000122   E9           MOV       A,R1
   \   000123   F5..         MOV       ?V2,A
   \   000125                ; Setup parameters for call to function osal_mem_free
   \   000125   EE           MOV       A,R6
   \   000126   FA           MOV       R2,A
   \   000127   EF           MOV       A,R7
   \   000128   FB           MOV       R3,A
   \   000129   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00012C   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00012F   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   000131   F0           MOVX      @DPTR,A
   \   000132   A3           INC       DPTR
   \   000133   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000135   F0           MOVX      @DPTR,A
   \   000136   A9..         MOV       R1,?V2
   \                     ??ZDP_MgmtRtgRsp_1:
   \   000138   7401         MOV       A,#0x1
   \   00013A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00013D   02....       LJMP      ?Subroutine4 & 0xFFFF
   1695          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   8C82         MOV       DPL,R4
   \   000002   8D83         MOV       DPH,R5
   \   000004   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000007   F0           MOVX      @DPTR,A
   \   000008   8C82         MOV       DPL,R4
   \   00000A   8D83         MOV       DPH,R5
   \   00000C   A3           INC       DPTR
   \   00000D   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000010   A3           INC       DPTR
   \   000011   F0           MOVX      @DPTR,A
   \   000012   EA           MOV       A,R2
   \   000013   2402         ADD       A,#0x2
   \   000015   22           RET
   1696          
   1697          /*********************************************************************
   1698           * @fn          ZDP_MgmtBindRsp
   1699           *
   1700           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1701           *              function sends a unicast message.
   1702           *
   1703           * @param       dstAddr - destination address of the message
   1704           * @param       Status - message status (ZDP_SUCCESS or other)
   1705           * @param       BindingTableEntries - Total number of entries
   1706           * @param       StartIndex - Starting index within the reporting list
   1707           * @param       BindingTableListCount - number of entries included
   1708           *                                 in this message
   1709           * @param       BindingTableList - List of Binding Table entries
   1710           * @param       SecurityEnable - Security Options
   1711           *
   1712           * @return      ZStatus_t
   1713           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1714          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1715                                      byte Status,
   1716                                      byte BindingTableEntries,
   1717                                      byte StartIndex,
   1718                                      byte BindingTableListCount,
   1719                                      apsBindingItem_t *BindingTableList,
   1720                                      byte SecurityEnable )
   1721          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V12,R2
   \   000014   8B..         MOV       ?V13,R3
   \   000016   8C..         MOV       ?V10,R4
   \   000018   8D..         MOV       ?V5,R5
   \   00001A   7418         MOV       A,#0x18
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V4,A
   1722            uint8 *buf;
   1723            uint8 *pBuf;
   1724            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1725            uint8 len;    // Actual length varies due to different addrMode
   1726            uint8 x;
   1727            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1728            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1729          
   1730            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1731          
   1732            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1733            maxLen = 1 + 1 + 1 + 1;
   1734            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1735            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   75F015       MOV       B,#0x15
   \   000025   A4           MUL       AB
   \   000026   2404         ADD       A,#0x4
   \   000028   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00002B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002E   8A..         MOV       ?V2,R2
   \   000030   8B..         MOV       ?V3,R3
   1736          
   1737            if ( buf == NULL )
   \   000032   EA           MOV       A,R2
   \   000033   45..         ORL       A,?V3
   \   000035   7005         JNZ       ??ZDP_MgmtBindRsp_0
   1738            {
   1739              return afStatus_MEM_FAIL;
   \   000037   7910         MOV       R1,#0x10
   \   000039   02....       LJMP      ??CrossCallReturnLabel_30 & 0xFFFF
   1740            }
   1741          
   1742            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_0:
   \   00003C   8A82         MOV       DPL,R2
   \   00003E   8B83         MOV       DPH,R3
   \   000040   A3           INC       DPTR
   \   000041   8582..       MOV       ?V6,DPL
   \   000044   8583..       MOV       ?V7,DPH
   \   000047   AA..         MOV       R2,?V6
   \   000049   AB..         MOV       R3,?V7
   1743          
   1744            *pBuf++ = Status;
   \   00004B   E5..         MOV       A,?V10
   \   00004D   F0           MOVX      @DPTR,A
   1745            *pBuf++ = BindingTableEntries;
   \   00004E   A3           INC       DPTR
   \   00004F   E5..         MOV       A,?V5
   \   000051   F0           MOVX      @DPTR,A
   1746            *pBuf++ = StartIndex;
   \   000052   7417         MOV       A,#0x17
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   12....       LCALL     ?Subroutine37 & 0xFFFF
   1747            *pBuf++ = BindingTableListCount;
   \                     ??CrossCallReturnLabel_51:
   \   00005A   E5..         MOV       A,?V4
   \   00005C   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   00005F   5001         JNC       ??ZDP_MgmtBindRsp_1
   \   000061   0B           INC       R3
   1748          
   1749            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1750            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1751            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1752            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1753          
   1754            len = 1 + 1 + 1 + 1;
   \                     ??ZDP_MgmtBindRsp_1:
   \   000062   75..04       MOV       ?V0,#0x4
   1755            for ( x = 0; x < BindingTableListCount; x++ )
   \   000065   75..00       MOV       ?V1,#0x0
   \   000068   7419         MOV       A,#0x19
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   12....       LCALL     ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000070   8016         SJMP      ??ZDP_MgmtBindRsp_2
   1756            {
   1757              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1758              *pBuf++ = BindingTableList->srcEP;
   1759          
   1760              // Cluster ID
   1761              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1762              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1763          
   1764              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1765              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1766              {
   1767                len += extZdpBindEntrySize;
   1768                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1769                *pBuf++ = BindingTableList->dstEP;
   1770              }
   1771              else
   1772              {
   1773                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_3:
   \   000072   740E         MOV       A,#0xe
   \   000074   25..         ADD       A,?V0
   \   000076   F5..         MOV       ?V0,A
   1774                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   000078   12....       LCALL     ?Subroutine14 & 0xFFFF
   1775                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   1776              }
   \                     ??CrossCallReturnLabel_9:
   \   00007B   FA           MOV       R2,A
   \   00007C   5001         JNC       ??ZDP_MgmtBindRsp_4
   \   00007E   0B           INC       R3
   1777              BindingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtBindRsp_4:
   \   00007F   EE           MOV       A,R6
   \   000080   2415         ADD       A,#0x15
   \   000082   FE           MOV       R6,A
   \   000083   5001         JNC       ??ZDP_MgmtBindRsp_5
   \   000085   0F           INC       R7
   \                     ??ZDP_MgmtBindRsp_5:
   \   000086   05..         INC       ?V1
   \                     ??ZDP_MgmtBindRsp_2:
   \   000088   E5..         MOV       A,?V1
   \   00008A   C3           CLR       C
   \   00008B   95..         SUBB      A,?V4
   \   00008D   505B         JNC       ??ZDP_MgmtBindRsp_6
   \   00008F                ; Setup parameters for call to function sAddrExtCpy
   \   00008F   EE           MOV       A,R6
   \   000090   FC           MOV       R4,A
   \   000091   EF           MOV       A,R7
   \   000092   FD           MOV       R5,A
   \   000093   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000096   8E82         MOV       DPL,R6
   \   000098   8F83         MOV       DPH,R7
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   0000A4   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000A7   8882         MOV       DPL,R0
   \   0000A9   8983         MOV       DPH,R1
   \   0000AB   12....       LCALL     ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   0000AE   12....       LCALL     ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   0000B1   12....       LCALL     ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   F0           MOVX      @DPTR,A
   \   0000B7   EE           MOV       A,R6
   \   0000B8   2413         ADD       A,#0x13
   \   0000BA   F8           MOV       R0,A
   \   0000BB   E4           CLR       A
   \   0000BC   3F           ADDC      A,R7
   \   0000BD   F9           MOV       R1,A
   \   0000BE   8882         MOV       DPL,R0
   \   0000C0   8983         MOV       DPH,R1
   \   0000C2   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   0000C5   5001         JNC       ??ZDP_MgmtBindRsp_7
   \   0000C7   0B           INC       R3
   \                     ??ZDP_MgmtBindRsp_7:
   \   0000C8   EE           MOV       A,R6
   \   0000C9   240B         ADD       A,#0xb
   \   0000CB   FC           MOV       R4,A
   \   0000CC   E4           CLR       A
   \   0000CD   3F           ADDC      A,R7
   \   0000CE   FD           MOV       R5,A
   \   0000CF   8882         MOV       DPL,R0
   \   0000D1   8983         MOV       DPH,R1
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   6403         XRL       A,#0x3
   \   0000D6   709A         JNZ       ??ZDP_MgmtBindRsp_3
   \   0000D8   7415         MOV       A,#0x15
   \   0000DA   25..         ADD       A,?V0
   \   0000DC   F5..         MOV       ?V0,A
   \   0000DE                ; Setup parameters for call to function sAddrExtCpy
   \   0000DE   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000E1   12....       LCALL     ?Subroutine69 & 0xFFFF
   1778            }
   \                     ??CrossCallReturnLabel_111:
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   0000E8   8095         SJMP      ??ZDP_MgmtBindRsp_4
   1779          
   1780            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_6:
   \   0000EA   90....       MOV       DPTR,#ZDP_TmpBuf
   \   0000ED   E5..         MOV       A,?V6
   \   0000EF   F0           MOVX      @DPTR,A
   \   0000F0   A3           INC       DPTR
   \   0000F1   E5..         MOV       A,?V7
   \   0000F3   F0           MOVX      @DPTR,A
   \   0000F4                ; Setup parameters for call to function fillAndSend
   \   0000F4   75..33       MOV       ?V6,#0x33
   \   0000F7   75..80       MOV       ?V7,#-0x80
   \   0000FA   78..         MOV       R0,#?V6
   \   0000FC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FF   A9..         MOV       R1,?V0
   \   000101   AC..         MOV       R4,?V12
   \   000103   AD..         MOV       R5,?V13
   \   000105   7402         MOV       A,#0x2
   \   000107   12....       LCALL     ?XSTACK_DISP101_8
   \   00010A   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00010D   7402         MOV       A,#0x2
   \   00010F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000112   E9           MOV       A,R1
   \   000113   FE           MOV       R6,A
   \   000114                ; Setup parameters for call to function osal_mem_free
   \   000114   AA..         MOV       R2,?V2
   \   000116   AB..         MOV       R3,?V3
   \   000118   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00011B   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00011E   02....       LJMP      ?Subroutine7 & 0xFFFF
   1781          }
   1782          
   1783          /*********************************************************************
   1784           * @fn          ZDP_MgmtNwkUpdateNotify
   1785           *
   1786           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1787           *              function sends a unicast message.
   1788           *
   1789           * @param       dstAddr - destination address of the message
   1790           * @param       status - message status (ZDP_SUCCESS or other)
   1791           * @param       scannedChannels - List of channels scanned by the request
   1792           * @param       totalTransmissions - Total transmissions
   1793           * @param       transmissionFailures - Sum of transmission failures
   1794           * @param       listCount - Number of records contained in the energyValues list
   1795           * @param       energyValues - List of descriptors, one for each of ListCount,
   1796           *                             of the enegry detect descriptors
   1797           * @param       txOptions - Transmit options
   1798           * @param       securityEnable - Security options
   1799           *
   1800           * @return      afStatus_t
   1801           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1802          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1803                                              uint8 status, uint32 scannedChannels,
   1804                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1805                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1806                                              uint8 securityEnable )
   1807          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V8,R2
   \   000014   8B..         MOV       ?V9,R3
   \   000016   8C..         MOV       ?V7,R4
   \   000018   8D..         MOV       ?V0,R5
   1808            uint8 *buf;
   1809            uint8 *pBuf;
   1810            uint8 len;
   1811          
   1812            (void)securityEnable;  // Intentionally unreferenced parameter
   1813          
   1814            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1815            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   00001A   740A         MOV       A,#0xa
   \   00001C   2D           ADD       A,R5
   \   00001D   F5..         MOV       ?V1,A
   1816          
   1817            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000022   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000025   8A..         MOV       ?V2,R2
   \   000027   8B..         MOV       ?V3,R3
   \   000029   AE..         MOV       R6,?V2
   \   00002B   AF..         MOV       R7,?V3
   1818            if ( buf == NULL )
   \   00002D   EE           MOV       A,R6
   \   00002E   4F           ORL       A,R7
   \   00002F   7005         JNZ       ??ZDP_MgmtNwkUpdateNotify_0
   1819            {
   1820              return afStatus_MEM_FAIL;
   \   000031   7910         MOV       R1,#0x10
   \   000033   02....       LJMP      ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1821            }
   1822          
   1823            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   000036   8E82         MOV       DPL,R6
   \   000038   8F83         MOV       DPH,R7
   \   00003A   A3           INC       DPTR
   \   00003B   8582..       MOV       ?V2,DPL
   \   00003E   8583..       MOV       ?V3,DPH
   1824          
   1825            *pBuf++ = status;
   \   000041   E5..         MOV       A,?V7
   \   000043   12....       LCALL     ??Subroutine97_0 & 0xFFFF
   1826          
   1827            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \                     ??CrossCallReturnLabel_143:
   \   000046                ; Setup parameters for call to function osal_buffer_uint32
   \   000046   7413         MOV       A,#0x13
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00004E   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000051   7404         MOV       A,#0x4
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
   \   000056   7417         MOV       A,#0x17
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine52 & 0xFFFF
   1828          
   1829            *pBuf++ = LO_UINT16( totalTransmissions );
   \                     ??CrossCallReturnLabel_79:
   \   00005E   F0           MOVX      @DPTR,A
   1830            *pBuf++ = HI_UINT16( totalTransmissions );
   \   00005F   E9           MOV       A,R1
   \   000060   A3           INC       DPTR
   \   000061   F0           MOVX      @DPTR,A
   \   000062   7419         MOV       A,#0x19
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   12....       LCALL     ?Subroutine52 & 0xFFFF
   1831          
   1832            *pBuf++ = LO_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_80:
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   12....       LCALL     ?Subroutine33 & 0xFFFF
   1833            *pBuf++ = HI_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_43:
   \   00006F   12....       LCALL     ?Subroutine16 & 0xFFFF
   1834          
   1835            *pBuf++ = listCount;
   \                     ??CrossCallReturnLabel_13:
   \   000072   E5..         MOV       A,?V0
   \   000074   F0           MOVX      @DPTR,A
   1836          
   1837            if ( listCount > 0 )
   \   000075   601E         JZ        ??ZDP_MgmtNwkUpdateNotify_2
   1838              osal_memcpy( pBuf, energyValues, listCount );
   \   000077                ; Setup parameters for call to function osal_memcpy
   \   000077   741B         MOV       A,#0x1b
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000082   AC..         MOV       R4,?V0
   \   000084   7D00         MOV       R5,#0x0
   \   000086   EA           MOV       A,R2
   \   000087   2405         ADD       A,#0x5
   \   000089   FA           MOV       R2,A
   \   00008A   5001         JNC       ??ZDP_MgmtNwkUpdateNotify_3
   \   00008C   0B           INC       R3
   \                     ??ZDP_MgmtNwkUpdateNotify_3:
   \   00008D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000090   7403         MOV       A,#0x3
   \   000092   12....       LCALL     ?DEALLOC_XSTACK8
   1839          
   1840            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   000095   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000098   E5..         MOV       A,?V2
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B   A3           INC       DPTR
   \   00009C   E5..         MOV       A,?V3
   \   00009E   F0           MOVX      @DPTR,A
   \   00009F   741D         MOV       A,#0x1d
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000A8   F0           MOVX      @DPTR,A
   \   0000A9                ; Setup parameters for call to function fillAndSend
   \   0000A9   75..38       MOV       ?V2,#0x38
   \   0000AC   75..80       MOV       ?V3,#-0x80
   \   0000AF   78..         MOV       R0,#?V2
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B4   A9..         MOV       R1,?V1
   \   0000B6   AC..         MOV       R4,?V8
   \   0000B8   AD..         MOV       R5,?V9
   \   0000BA   7402         MOV       A,#0x2
   \   0000BC   12....       LCALL     ?XSTACK_DISP101_8
   \   0000BF   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000C2   7402         MOV       A,#0x2
   \   0000C4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C7   E9           MOV       A,R1
   \   0000C8   F5..         MOV       ?V1,A
   \   0000CA                ; Setup parameters for call to function osal_mem_free
   \   0000CA   EE           MOV       A,R6
   \   0000CB   FA           MOV       R2,A
   \   0000CC   EF           MOV       A,R7
   \   0000CD   FB           MOV       R3,A
   \   0000CE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000D1   90....       MOV       DPTR,#ZDP_TmpBuf
   \   0000D4   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   0000D6   F0           MOVX      @DPTR,A
   \   0000D7   A3           INC       DPTR
   \   0000D8   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0000DA   F0           MOVX      @DPTR,A
   \   0000DB   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000DE   E4           CLR       A
   \   0000DF   F0           MOVX      @DPTR,A
   \   0000E0   A9..         MOV       R1,?V1
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   0000E2   02....       LJMP      ?Subroutine5 & 0xFFFF
   1841          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
   1842          
   1843          /*********************************************************************
   1844           * Functions to register for ZDO Over-the-air messages
   1845           */
   1846          
   1847          /*********************************************************************
   1848           * @fn          ZDO_RegisterForZDOMsg
   1849           *
   1850           * @brief       Call this function to register of an incoming over
   1851           *              the air ZDO message - probably a response message
   1852           *              but requests can also be received.
   1853           *              Messages are delivered to the task with ZDO_CB_MSG
   1854           *              as the message ID.
   1855           *
   1856           * @param       taskID - Where you would like the message delivered
   1857           * @param       clusterID - What message?
   1858           *                          ZDO_ALL_MSGS_CLUSTERID - all responses
   1859           *                          and device announce
   1860           *
   1861           * @return      ZSuccess - successful, ZMemError if not
   1862           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1863          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1864          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   1865            ZDO_MsgCB_t *pList;
   1866            ZDO_MsgCB_t *pLast;
   1867            ZDO_MsgCB_t *pNew;
   1868          
   1869            // Look for duplicate
   1870            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV       DPTR,#zdoMsgCBs
   \   00000E   12....       LCALL     ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000011   EE           MOV       A,R6
   \   000012   F8           MOV       R0,A
   \   000013   EF           MOV       A,R7
   \   000014   8028         SJMP      ??CrossCallReturnLabel_243
   1871            while ( pList )
   1872            {
   1873              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000016   8882         MOV       DPL,R0
   \   000018   8983         MOV       DPH,R1
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   65..         XRL       A,?V2
   \   00001F   7012         JNZ       ??ZDO_RegisterForZDOMsg_1
   \   000021   8882         MOV       DPL,R0
   \   000023   8983         MOV       DPH,R1
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   65..         XRL       A,?V0
   \   00002B   7004         JNZ       ??ZDO_RegisterForZDOMsg_2
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   65..         XRL       A,?V1
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   000031   6051         JZ        ??CrossCallReturnLabel_35
   1874                return ( ZSuccess );
   1875              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000033   E8           MOV       A,R0
   \   000034   FE           MOV       R6,A
   \   000035   E9           MOV       A,R1
   \   000036   FF           MOV       R7,A
   1876              pList = (ZDO_MsgCB_t *)pList->next;
   \   000037   8882         MOV       DPL,R0
   \   000039   8983         MOV       DPH,R1
   \   00003B   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   1877            }
   \                     ??CrossCallReturnLabel_243:
   \   00003E   F9           MOV       R1,A
   \   00003F   E8           MOV       A,R0
   \   000040   49           ORL       A,R1
   \   000041   70D3         JNZ       ??ZDO_RegisterForZDOMsg_0
   1878          
   1879            // Add to the list
   1880            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   7A05         MOV       R2,#0x5
   \   000045   7B00         MOV       R3,#0x0
   \   000047   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004A   8A..         MOV       ?V4,R2
   \   00004C   8B..         MOV       ?V5,R3
   \   00004E   A8..         MOV       R0,?V4
   \   000050   A9..         MOV       R1,?V5
   1881            if ( pNew )
   \   000052   E8           MOV       A,R0
   \   000053   49           ORL       A,R1
   \   000054   6032         JZ        ??ZDO_RegisterForZDOMsg_3
   1882            {
   1883              pNew->taskID = taskID;
   \   000056   8882         MOV       DPL,R0
   \   000058   8983         MOV       DPH,R1
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   E5..         MOV       A,?V2
   \   00005E   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   1884              pNew->clusterID = clusterID;
   \                     ??CrossCallReturnLabel_148:
   \   000061   E5..         MOV       A,?V0
   \   000063   F0           MOVX      @DPTR,A
   \   000064   A3           INC       DPTR
   \   000065   E5..         MOV       A,?V1
   \   000067   12....       LCALL     ?Subroutine88 & 0xFFFF
   1885              pNew->next = NULL;
   \                     ??CrossCallReturnLabel_226:
   \   00006A   E4           CLR       A
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   F0           MOVX      @DPTR,A
   1886              if ( zdoMsgCBs )
   \   00006E   90....       MOV       DPTR,#zdoMsgCBs
   \   000071   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000074   EA           MOV       A,R2
   \   000075   4B           ORL       A,R3
   \   000076   6006         JZ        ??ZDO_RegisterForZDOMsg_4
   1887              {
   1888                pLast->next = pNew;
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   8003         SJMP      ??ZDO_RegisterForZDOMsg_5
   1889              }
   1890              else
   1891                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   00007E   90....       MOV       DPTR,#zdoMsgCBs
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   000081   12....       LCALL     ?Subroutine28 & 0xFFFF
   1892              return ( ZSuccess );
   \                     ??CrossCallReturnLabel_35:
   \   000084   7900         MOV       R1,#0x0
   \   000086   8002         SJMP      ??ZDO_RegisterForZDOMsg_6
   1893            }
   1894            else
   1895              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   000088   7910         MOV       R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   00008A   02....       LJMP      ??Subroutine93_0 & 0xFFFF
   1896          }
   1897          
   1898          /*********************************************************************
   1899           * @fn          ZDO_RemoveRegisteredCB
   1900           *
   1901           * @brief       Call this function if you don't want to receive the
   1902           *              incoming message.
   1903           *
   1904           * @param       taskID - Where the messages are being delivered.
   1905           * @param       clusterID - What message?
   1906           *
   1907           * @return      ZSuccess - successful, ZFailure if not found
   1908           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1909          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1910          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1911            ZDO_MsgCB_t *pList;
   1912            ZDO_MsgCB_t *pLast = NULL;
   \   000007   7C00         MOV       R4,#0x0
   \   000009   7D00         MOV       R5,#0x0
   1913          
   1914            pList = zdoMsgCBs;
   \   00000B   90....       MOV       DPTR,#zdoMsgCBs
   \   00000E   8008         SJMP      ??ZDO_RemoveRegisteredCB_0
   1915            while ( pList )
   1916            {
   1917              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1918              {
   1919                if ( pLast )
   1920                {
   1921                  // remove this one from the linked list
   1922                  pLast->next = pList->next;
   1923                }
   1924                else if ( pList->next )
   1925                {
   1926                  // remove the first one from the linked list
   1927                  zdoMsgCBs = pList->next;
   1928                }
   1929                else
   1930                {
   1931                  // remove the only item from the list
   1932                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1933                }
   1934                osal_mem_free( pList );
   1935                return ( ZSuccess );
   1936              }
   1937              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000010   E8           MOV       A,R0
   \   000011   FC           MOV       R4,A
   \   000012   E9           MOV       A,R1
   \   000013   FD           MOV       R5,A
   1938              pList = pList->next;
   \   000014   8882         MOV       DPL,R0
   \   000016   8983         MOV       DPH,R1
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   000018   12....       LCALL     ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   00001B   49           ORL       A,R1
   \   00001C   6047         JZ        ??ZDO_RemoveRegisteredCB_2
   \   00001E   8882         MOV       DPL,R0
   \   000020   8983         MOV       DPH,R1
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6E           XRL       A,R6
   \   000026   70E8         JNZ       ??ZDO_RemoveRegisteredCB_1
   \   000028   8882         MOV       DPL,R0
   \   00002A   8983         MOV       DPH,R1
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   6A           XRL       A,R2
   \   000031   7003         JNZ       ??ZDO_RemoveRegisteredCB_3
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6B           XRL       A,R3
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   000036   70D8         JNZ       ??ZDO_RemoveRegisteredCB_1
   \   000038   8882         MOV       DPL,R0
   \   00003A   8983         MOV       DPH,R1
   \   00003C   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   00003F   EC           MOV       A,R4
   \   000040   4D           ORL       A,R5
   \   000041   6006         JZ        ??ZDO_RemoveRegisteredCB_4
   \   000043   8C82         MOV       DPL,R4
   \   000045   8D83         MOV       DPH,R5
   \   000047   8007         SJMP      ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   000049   EA           MOV       A,R2
   \   00004A   4B           ORL       A,R3
   \   00004B   90....       MOV       DPTR,#zdoMsgCBs
   \   00004E   6006         JZ        ??ZDO_RemoveRegisteredCB_6
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000050   EA           MOV       A,R2
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   EB           MOV       A,R3
   \   000054   8003         SJMP      ??ZDO_RemoveRegisteredCB_7
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   000056   E4           CLR       A
   \   000057   F0           MOVX      @DPTR,A
   \   000058   A3           INC       DPTR
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   000059   F0           MOVX      @DPTR,A
   \   00005A                ; Setup parameters for call to function osal_mem_free
   \   00005A   E8           MOV       A,R0
   \   00005B   FA           MOV       R2,A
   \   00005C   E9           MOV       A,R1
   \   00005D   FB           MOV       R3,A
   \   00005E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000061   7900         MOV       R1,#0x0
   \   000063   8002         SJMP      ??ZDO_RemoveRegisteredCB_8
   1939            }
   1940          
   1941            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   000065   7901         MOV       R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_8:
   \   000067   02....       LJMP      ?Subroutine6 & 0xFFFF
   1942          }
   1943          
   1944          /*********************************************************************
   1945           * @fn          ZDO_SendMsgCBs
   1946           *
   1947           * @brief       This function sends messages to registered tasks.
   1948           *              Local to ZDO and shouldn't be called outside of ZDO.
   1949           *
   1950           * @param       inMsg - incoming message
   1951           *
   1952           * @return      TRUE if sent to at least 1 task, FALSE if not
   1953           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1954          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1955          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   1956            uint8 ret = FALSE;
   \   000009   75..00       MOV       ?V4,#0x0
   1957            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV       DPTR,#zdoMsgCBs
   \   00000F   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000012   EA           MOV       A,R2
   \   000013   2410         ADD       A,#0x10
   \   000015   F5..         MOV       ?V8,A
   \   000017   E4           CLR       A
   \   000018   35..         ADDC      A,?V3
   \   00001A   F5..         MOV       ?V9,A
   \   00001C   02....       LJMP      ??CrossCallReturnLabel_139 & 0xFFFF
   1958            while ( pList )
   1959            {
   1960              if ( (pList->clusterID == inMsg->clusterID)
   1961                 || ((pList->clusterID == ZDO_ALL_MSGS_CLUSTERID)
   1962                     && ((inMsg->clusterID & ZDO_RESPONSE_BIT) || (inMsg->clusterID == Device_annce))) )
   \                     ??ZDO_SendMsgCBs_0:
   \   00001F   E5..         MOV       A,?V2
   \   000021   240C         ADD       A,#0xc
   \   000023   F582         MOV       DPL,A
   \   000025   E4           CLR       A
   \   000026   35..         ADDC      A,?V3
   \   000028   F583         MOV       DPH,A
   \   00002A   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   00002D   85..82       MOV       DPL,?V0
   \   000030   85..83       MOV       DPH,?V1
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000039   E8           MOV       A,R0
   \   00003A   6A           XRL       A,R2
   \   00003B   7002         JNZ       ??ZDO_SendMsgCBs_1
   \   00003D   E9           MOV       A,R1
   \   00003E   6B           XRL       A,R3
   \                     ??ZDO_SendMsgCBs_1:
   \   00003F   601B         JZ        ??ZDO_SendMsgCBs_2
   \   000041   74FF         MOV       A,#-0x1
   \   000043   6A           XRL       A,R2
   \   000044   7003         JNZ       ??ZDO_SendMsgCBs_3
   \   000046   74FF         MOV       A,#-0x1
   \   000048   6B           XRL       A,R3
   \                     ??ZDO_SendMsgCBs_3:
   \   000049   6003         JZ        $+5
   \   00004B   02....       LJMP      ??ZDO_SendMsgCBs_4 & 0xFFFF
   \   00004E   E9           MOV       A,R1
   \   00004F   5480         ANL       A,#0x80
   \   000051   7009         JNZ       ??ZDO_SendMsgCBs_2
   \   000053   7413         MOV       A,#0x13
   \   000055   68           XRL       A,R0
   \   000056   49           ORL       A,R1
   \   000057   6003         JZ        $+5
   \   000059   02....       LJMP      ??ZDO_SendMsgCBs_4 & 0xFFFF
   1963              {
   1964                zdoIncomingMsg_t *msgPtr;
   1965          
   1966                // Send the address to the task
   1967                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \                     ??ZDO_SendMsgCBs_2:
   \   00005C                ; Setup parameters for call to function osal_msg_allocate
   \   00005C   85..82       MOV       DPL,?V8
   \   00005F   85..83       MOV       DPH,?V9
   \   000062   E0           MOVX      A,@DPTR
   \   000063   2417         ADD       A,#0x17
   \   000065   FA           MOV       R2,A
   \   000066   E4           CLR       A
   \   000067   3400         ADDC      A,#0x0
   \   000069   FB           MOV       R3,A
   \   00006A   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00006D   8A..         MOV       ?V6,R2
   \   00006F   8B..         MOV       ?V7,R3
   \   000071   AE..         MOV       R6,?V6
   \   000073   AF..         MOV       R7,?V7
   1968                if ( msgPtr )
   \   000075   EE           MOV       A,R6
   \   000076   4F           ORL       A,R7
   \   000077   607C         JZ        ??ZDO_SendMsgCBs_4
   1969                {
   1970                  // copy struct
   1971                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   000079                ; Setup parameters for call to function osal_memcpy
   \   000079   85....       MOV       ?V4,?V2
   \   00007C   85....       MOV       ?V5,?V3
   \   00007F   75..00       MOV       ?V6,#0x0
   \   000082   78..         MOV       R0,#?V4
   \   000084   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000087   7C17         MOV       R4,#0x17
   \   000089   7D00         MOV       R5,#0x0
   \   00008B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00008E   7403         MOV       A,#0x3
   \   000090   12....       LCALL     ?DEALLOC_XSTACK8
   1972          
   1973                  if ( inMsg->asduLen )
   \   000093   85..82       MOV       DPL,?V8
   \   000096   85..83       MOV       DPH,?V9
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   603E         JZ        ??ZDO_SendMsgCBs_5
   1974                  {
   1975                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   00009C   EE           MOV       A,R6
   \   00009D   2417         ADD       A,#0x17
   \   00009F   FA           MOV       R2,A
   \   0000A0   E4           CLR       A
   \   0000A1   3F           ADDC      A,R7
   \   0000A2   FB           MOV       R3,A
   \   0000A3   EE           MOV       A,R6
   \   0000A4   2413         ADD       A,#0x13
   \   0000A6   F582         MOV       DPL,A
   \   0000A8   E4           CLR       A
   \   0000A9   3F           ADDC      A,R7
   \   0000AA   F583         MOV       DPH,A
   \   0000AC   EA           MOV       A,R2
   \   0000AD   F0           MOVX      @DPTR,A
   \   0000AE   A3           INC       DPTR
   \   0000AF   EB           MOV       A,R3
   \   0000B0   F0           MOVX      @DPTR,A
   1976                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \   0000B1                ; Setup parameters for call to function osal_memcpy
   \   0000B1   E5..         MOV       A,?V2
   \   0000B3   2413         ADD       A,#0x13
   \   0000B5   F582         MOV       DPL,A
   \   0000B7   E4           CLR       A
   \   0000B8   35..         ADDC      A,?V3
   \   0000BA   F583         MOV       DPH,A
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   F5..         MOV       ?V4,A
   \   0000BF   A3           INC       DPTR
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   F5..         MOV       ?V5,A
   \   0000C3   78..         MOV       R0,#?V4
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C8   85..82       MOV       DPL,?V8
   \   0000CB   85..83       MOV       DPH,?V9
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   FC           MOV       R4,A
   \   0000D0   7D00         MOV       R5,#0x0
   \   0000D2   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000D5   7403         MOV       A,#0x3
   \   0000D7   12....       LCALL     ?DEALLOC_XSTACK8
   1977                  }
   1978          
   1979                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_5:
   \   0000DA   8E82         MOV       DPL,R6
   \   0000DC   8F83         MOV       DPH,R7
   \   0000DE   74D3         MOV       A,#-0x2d
   \   0000E0   F0           MOVX      @DPTR,A
   1980                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000E1                ; Setup parameters for call to function osal_msg_send
   \   0000E1   EE           MOV       A,R6
   \   0000E2   FA           MOV       R2,A
   \   0000E3   EF           MOV       A,R7
   \   0000E4   FB           MOV       R3,A
   \   0000E5   85..82       MOV       DPL,?V0
   \   0000E8   85..83       MOV       DPH,?V1
   \   0000EB   A3           INC       DPTR
   \   0000EC   A3           INC       DPTR
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   F9           MOV       R1,A
   \   0000EF   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   1981                  ret = TRUE;
   \   0000F2   75..01       MOV       ?V4,#0x1
   1982                }
   1983              }
   1984              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_4:
   \   0000F5   85..82       MOV       DPL,?V0
   \   0000F8   85..83       MOV       DPH,?V1
   \   0000FB   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   1985            }
   \                     ??CrossCallReturnLabel_139:
   \   0000FE   E5..         MOV       A,?V0
   \   000100   45..         ORL       A,?V1
   \   000102   6003         JZ        $+5
   \   000104   02....       LJMP      ??ZDO_SendMsgCBs_0 & 0xFFFF
   1986            return ( ret );
   \   000107   A9..         MOV       R1,?V4
   \   000109   02....       LJMP      ??Subroutine105_0 & 0xFFFF
   1987          }
   1988          
   1989          /*********************************************************************
   1990           * Incoming message processor
   1991           */
   1992          
   1993          /*********************************************************************
   1994           * @fn          ZDP_IncomingData
   1995           *
   1996           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1997           *              from the APS sub-layer to the ZDO.
   1998           *
   1999           * @param       pData - Incoming Message
   2000           *
   2001           * @return      none
   2002           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2003          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   2004          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV       A,#-0x17
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2005            uint8 x = 0;
   \   00000A   7E00         MOV       R6,#0x0
   2006            uint8 handled;
   2007            zdoIncomingMsg_t inMsg;
   2008          
   2009            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000C   740A         MOV       A,#0xa
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   7402         MOV       A,#0x2
   \   000013   12....       LCALL     ?Subroutine16 & 0xFFFF
   2010            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_14:
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   00001B   7402         MOV       A,#0x2
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ?Subroutine28 & 0xFFFF
   2011            inMsg.wasBroadcast = pData->wasBroadcast;
   \                     ??CrossCallReturnLabel_36:
   \   000023   EA           MOV       A,R2
   \   000024   2415         ADD       A,#0x15
   \   000026   F582         MOV       DPL,A
   \   000028   E4           CLR       A
   \   000029   3B           ADDC      A,R3
   \   00002A   F583         MOV       DPH,A
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   C0E0         PUSH      A
   \   00002F   740B         MOV       A,#0xb
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   D0E0         POP       A
   \   000036   12....       LCALL     ?Subroutine16 & 0xFFFF
   2012            inMsg.clusterID = pData->clusterId;
   \                     ??CrossCallReturnLabel_15:
   \   000039   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   00003C   740C         MOV       A,#0xc
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   12....       LCALL     ?Subroutine28 & 0xFFFF
   2013            inMsg.SecurityUse = pData->SecurityUse;
   \                     ??CrossCallReturnLabel_37:
   \   000044   EA           MOV       A,R2
   \   000045   2419         ADD       A,#0x19
   \   000047   F582         MOV       DPL,A
   \   000049   E4           CLR       A
   \   00004A   3B           ADDC      A,R3
   \   00004B   F583         MOV       DPH,A
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   C0E0         PUSH      A
   \   000050   740E         MOV       A,#0xe
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   D0E0         POP       A
   \   000057   F0           MOVX      @DPTR,A
   2014          
   2015            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000058   EA           MOV       A,R2
   \   000059   2420         ADD       A,#0x20
   \   00005B   F582         MOV       DPL,A
   \   00005D   E4           CLR       A
   \   00005E   3B           ADDC      A,R3
   \   00005F   F583         MOV       DPH,A
   \   000061   E0           MOVX      A,@DPTR
   \   000062   14           DEC       A
   \   000063   C0E0         PUSH      A
   \   000065   7410         MOV       A,#0x10
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   D0E0         POP       A
   \   00006C   F0           MOVX      @DPTR,A
   2016            inMsg.asdu = pData->cmd.Data+1;
   \   00006D   EA           MOV       A,R2
   \   00006E   2422         ADD       A,#0x22
   \   000070   F8           MOV       R0,A
   \   000071   E4           CLR       A
   \   000072   3B           ADDC      A,R3
   \   000073   F9           MOV       R1,A
   \   000074   8882         MOV       DPL,R0
   \   000076   8983         MOV       DPH,R1
   \   000078   E0           MOVX      A,@DPTR
   \   000079   2401         ADD       A,#0x1
   \   00007B   FC           MOV       R4,A
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   3400         ADDC      A,#0x0
   \   000080   FD           MOV       R5,A
   \   000081   7413         MOV       A,#0x13
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   EC           MOV       A,R4
   \   000087   F0           MOVX      @DPTR,A
   \   000088   A3           INC       DPTR
   \   000089   ED           MOV       A,R5
   \   00008A   12....       LCALL     ??Subroutine101_0 & 0xFFFF
   2017            inMsg.TransSeq = pData->cmd.Data[0];
   \                     ??CrossCallReturnLabel_158:
   \   00008D   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000090   E0           MOVX      A,@DPTR
   \   000091   C0E0         PUSH      A
   \   000093   740F         MOV       A,#0xf
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   D0E0         POP       A
   \   00009A   F0           MOVX      @DPTR,A
   2018            inMsg.macDestAddr = pData->macDestAddr;
   \   00009B   EA           MOV       A,R2
   \   00009C   2412         ADD       A,#0x12
   \   00009E   F582         MOV       DPL,A
   \   0000A0   E4           CLR       A
   \   0000A1   3B           ADDC      A,R3
   \   0000A2   F583         MOV       DPH,A
   \   0000A4   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   0000A7   7411         MOV       A,#0x11
   \   0000A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AC   12....       LCALL     ?Subroutine28 & 0xFFFF
   2019            inMsg.macSrcAddr = pData->macSrcAddr;
   \                     ??CrossCallReturnLabel_38:
   \   0000AF   EA           MOV       A,R2
   \   0000B0   2424         ADD       A,#0x24
   \   0000B2   F582         MOV       DPL,A
   \   0000B4   E4           CLR       A
   \   0000B5   3B           ADDC      A,R3
   \   0000B6   F583         MOV       DPH,A
   \   0000B8   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   0000BB   7415         MOV       A,#0x15
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL     ?Subroutine28 & 0xFFFF
   2020          
   2021            handled = ZDO_SendMsgCBs( &inMsg );
   \                     ??CrossCallReturnLabel_39:
   \   0000C3                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000C3   AA..         MOV       R2,?XSP + 0
   \   0000C5   AB..         MOV       R3,?XSP + 1
   \   0000C7   12....       LCALL     `??ZDO_SendMsgCBs::?relay`; Banked call to: ZDO_SendMsgCBs
   \   0000CA   E9           MOV       A,R1
   \   0000CB   FC           MOV       R4,A
   \   0000CC   8001         SJMP      ??ZDP_IncomingData_0
   2022          
   2023          #if (defined MT_ZDO_CB_FUNC)
   2024          #if !defined MT_TASK
   2025            if (zgZdoDirectCB)
   2026          #endif
   2027            {
   2028              MT_ZdoDirectCB( pData, &inMsg );
   2029            }
   2030          #endif
   2031          
   2032            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   2033            {
   2034              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   2035              {
   2036                zdpMsgProcs[x].pFn( &inMsg );
   2037                return;
   2038              }
   2039              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000CE   0E           INC       R6
   \                     ??ZDP_IncomingData_0:
   \   0000CF   EE           MOV       A,R6
   \   0000D0   F5..         MOV       ?V0,A
   \   0000D2   75..00       MOV       ?V1,#0x0
   \   0000D5   7402         MOV       A,#0x2
   \   0000D7   78..         MOV       R0,#?V0
   \   0000D9   12....       LCALL     ?S_SHL
   \   0000DC   74..         MOV       A,#zdpMsgProcs & 0xff
   \   0000DE   25..         ADD       A,?V0
   \   0000E0   F8           MOV       R0,A
   \   0000E1   74..         MOV       A,#(zdpMsgProcs >> 8) & 0xff
   \   0000E3   35..         ADDC      A,?V1
   \   0000E5   F9           MOV       R1,A
   \   0000E6   8882         MOV       DPL,R0
   \   0000E8   8983         MOV       DPH,R1
   \   0000EA   E4           CLR       A
   \   0000EB   93           MOVC      A,@A+DPTR
   \   0000EC   C0E0         PUSH      A
   \   0000EE   7401         MOV       A,#0x1
   \   0000F0   93           MOVC      A,@A+DPTR
   \   0000F1   F583         MOV       DPH,A
   \   0000F3   D082         POP       DPL
   \   0000F5   AA82         MOV       R2,DPL
   \   0000F7   AB83         MOV       R3,DPH
   \   0000F9   74FF         MOV       A,#-0x1
   \   0000FB   6A           XRL       A,R2
   \   0000FC   7003         JNZ       ??ZDP_IncomingData_2
   \   0000FE   74FF         MOV       A,#-0x1
   \   000100   6B           XRL       A,R3
   \                     ??ZDP_IncomingData_2:
   \   000101   6028         JZ        ??ZDP_IncomingData_3
   \   000103   740C         MOV       A,#0xc
   \   000105   12....       LCALL     ?XSTACK_DISP0_8
   \   000108   E0           MOVX      A,@DPTR
   \   000109   6A           XRL       A,R2
   \   00010A   7003         JNZ       ??ZDP_IncomingData_4
   \   00010C   A3           INC       DPTR
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   6B           XRL       A,R3
   \                     ??ZDP_IncomingData_4:
   \   00010F   70BD         JNZ       ??ZDP_IncomingData_1
   \   000111                ; Setup parameters for indirect call
   \   000111   AA..         MOV       R2,?XSP + 0
   \   000113   AB..         MOV       R3,?XSP + 1
   \   000115   8882         MOV       DPL,R0
   \   000117   8983         MOV       DPH,R1
   \   000119   A3           INC       DPTR
   \   00011A   A3           INC       DPTR
   \   00011B   E4           CLR       A
   \   00011C   93           MOVC      A,@A+DPTR
   \   00011D   C0E0         PUSH      A
   \   00011F   7401         MOV       A,#0x1
   \   000121   93           MOVC      A,@A+DPTR
   \   000122   F583         MOV       DPH,A
   \   000124   D082         POP       DPL
   \   000126   12....       LCALL     ?CALL_IND
   \   000129   800A         SJMP      ??ZDP_IncomingData_5
   2040            }
   2041          
   2042            // Handle unhandled messages
   2043            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   00012B   EC           MOV       A,R4
   \   00012C   7007         JNZ       ??ZDP_IncomingData_5
   2044              ZDApp_InMsgCB( &inMsg );
   \   00012E                ; Setup parameters for call to function ZDApp_InMsgCB
   \   00012E   AA..         MOV       R2,?XSP + 0
   \   000130   AB..         MOV       R3,?XSP + 1
   \   000132   12....       LCALL     `??ZDApp_InMsgCB::?relay`; Banked call to: ZDApp_InMsgCB
   2045          }
   \                     ??ZDP_IncomingData_5:
   \   000135   7417         MOV       A,#0x17
   \   000137   02....       LJMP      ??Subroutine95_0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??fillAndSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SendData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NWKAddrOfInterestReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NwkAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IEEEAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_DeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ParentAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ParentAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdpProcessAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NodeDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_PowerDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EPRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_GenericRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_BindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZDOMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveRegisteredCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SendMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   2046          
   2047          /*********************************************************************
   2048          *********************************************************************/
   2049          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   ZDO_RegisterForZDOMsg
        0     14   -> osal_mem_alloc
      0      9   ZDO_RemoveRegisteredCB
        0      9   -> osal_mem_free
      0     54   ZDO_SendMsgCBs
        0     21   -> osal_memcpy
        0     18   -> osal_msg_allocate
        0     18   -> osal_msg_send
      1     28   ZDP_BindUnbindReq
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
        1     18   -> sAddrExtCpy
      1     22   ZDP_DeviceAnnce
        0     21   -> fillAndSend
        0     19   -> sAddrExtCpy
      1     26   ZDP_EPRsp
        0     18   -> fillAndSend
        0     19   -> osal_memcpy
      1     29   ZDP_EndDeviceBindReq
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
      1     16   ZDP_GenericRsp
        0     12   -> fillAndSend
      1     21   ZDP_IEEEAddrReq
        0     21   -> fillAndSend
      1     33   ZDP_IncomingData
        0     33   -> ZDApp_InMsgCB
        0     33   -> ZDO_SendMsgCBs
      1     24   ZDP_MatchDescReq
        0     16   -> fillAndSend
      1     30   ZDP_MgmtBindRsp
        0     25   -> fillAndSend
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     23   -> sAddrExtCpy
      1     15   ZDP_MgmtDirectJoinReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      0     16   ZDP_MgmtLeaveReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      1     29   ZDP_MgmtLqiRsp
        0     24   -> fillAndSend
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> sAddrExtCpy
      1     20   ZDP_MgmtNwkDiscReq
        0     14   -> fillAndSend
        0     16   -> osal_buffer_uint32
      1     30   ZDP_MgmtNwkDiscRsp
        0     25   -> fillAndSend
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     23   -> sAddrExtCpy
      1     35   ZDP_MgmtNwkUpdateNotify
        0     21   -> fillAndSend
        0     23   -> osal_buffer_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     24   ZDP_MgmtNwkUpdateReq
        0     16   -> fillAndSend
        0     18   -> osal_buffer_uint32
      1     23   ZDP_MgmtPermitJoinReq
        0     21   -> NLME_GetShortAddr
        0     23   -> fillAndSend
      1     28   ZDP_MgmtRtgRsp
        0     23   -> fillAndSend
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
      1     13   ZDP_NWKAddrOfInterestReq
        0     12   -> fillAndSend
      1     14   ZDP_NodeDescMsg
        0     12   -> fillAndSend
      1     23   ZDP_NwkAddrReq
        0     23   -> fillAndSend
        0     21   -> sAddrExtCmp
        0     21   -> sAddrExtCpy
      1     29   ZDP_ParentAnnce
        0     22   -> fillAndSend
        0     24   -> osal_buffer_uint32
        0     20   -> sAddrExtCpy
      1     14   ZDP_PowerDescMsg
        0     12   -> fillAndSend
      1     19   ZDP_SendData
        0     14   -> fillAndSend
      1     21   ZDP_ServerDiscReq
        0     21   -> fillAndSend
      1     17   ZDP_ServerDiscRsp
        0     13   -> fillAndSend
      1     22   ZDP_SimpleDescMsg
        0     22   -> fillAndSend
      1     13   ZDP_SimpleDescReq
        0     12   -> fillAndSend
      1     25   ZDP_UserDescRsp
        0     21   -> fillAndSend
        0     22   -> osal_memcpy
      1     20   ZDP_UserDescSet
        0     17   -> fillAndSend
        0     18   -> osal_memcpy
        0     15   -> osal_memset
      1     60   fillAndSend
        0     35   -> AF_DataRequest
        0     26   -> osal_memset
      1     17   zdpProcessAddrReq
        0     17   -> fillAndSend
        0     15   -> sAddrExtCmp
        0     15   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
       4  ??Subroutine100_0
       5  ??Subroutine101_0
       7  ??Subroutine102_0
       8  ??Subroutine103_0
       5  ??Subroutine104_0
       5  ??Subroutine105_0
       4  ??Subroutine106_0
       3  ??Subroutine107_0
       6  ??Subroutine108_0
       4  ??Subroutine109_0
       6  ??Subroutine110_0
       6  ??Subroutine111_0
       6  ??Subroutine112_0
       6  ??Subroutine113_0
       1  ??Subroutine114_0
       4  ??Subroutine115_0
       1  ??Subroutine116_0
       3  ??Subroutine117_0
       5  ??Subroutine118_0
       5  ??Subroutine119_0
       8  ??Subroutine89_0
      13  ??Subroutine90_0
       3  ??Subroutine91_0
       5  ??Subroutine92_0
       5  ??Subroutine93_0
       2  ??Subroutine94_0
       8  ??Subroutine95_0
       5  ??Subroutine96_0
       7  ??Subroutine97_0
       6  ??Subroutine98_0
       8  ??Subroutine99_0
       3  ?Subroutine0
      10  ?Subroutine1
      17  ?Subroutine10
      32  ?Subroutine11
      13  ?Subroutine12
       7  ?Subroutine13
      22  ?Subroutine14
       9  ?Subroutine15
       5  ?Subroutine16
      13  ?Subroutine17
       5  ?Subroutine18
      21  ?Subroutine19
      17  ?Subroutine2
       9  ?Subroutine20
       4  ?Subroutine21
       4  ?Subroutine22
       6  ?Subroutine23
      13  ?Subroutine24
      11  ?Subroutine25
       5  ?Subroutine26
       2  ?Subroutine27
       6  ?Subroutine28
       3  ?Subroutine29
       3  ?Subroutine3
       5  ?Subroutine30
       2  ?Subroutine31
       2  ?Subroutine32
       5  ?Subroutine33
      10  ?Subroutine34
      10  ?Subroutine35
       9  ?Subroutine36
       9  ?Subroutine37
       6  ?Subroutine38
       3  ?Subroutine39
       5  ?Subroutine4
      10  ?Subroutine40
       4  ?Subroutine41
      13  ?Subroutine42
       5  ?Subroutine43
       6  ?Subroutine44
       4  ?Subroutine45
       3  ?Subroutine46
      13  ?Subroutine47
      11  ?Subroutine48
       8  ?Subroutine49
       5  ?Subroutine5
       8  ?Subroutine50
       8  ?Subroutine51
       4  ?Subroutine52
       4  ?Subroutine53
       7  ?Subroutine54
       3  ?Subroutine55
       3  ?Subroutine56
       5  ?Subroutine57
      11  ?Subroutine58
       6  ?Subroutine59
       5  ?Subroutine6
       1  ?Subroutine60
      15  ?Subroutine61
       9  ?Subroutine62
       9  ?Subroutine63
       4  ?Subroutine64
       1  ?Subroutine65
       8  ?Subroutine66
      19  ?Subroutine67
      12  ?Subroutine68
      10  ?Subroutine69
      10  ?Subroutine7
      14  ?Subroutine70
      13  ?Subroutine71
      11  ?Subroutine72
      11  ?Subroutine73
       2  ?Subroutine74
       7  ?Subroutine75
       3  ?Subroutine76
       1  ?Subroutine77
       9  ?Subroutine78
       6  ?Subroutine79
       8  ?Subroutine8
      16  ?Subroutine80
       9  ?Subroutine81
       5  ?Subroutine82
       9  ?Subroutine83
       9  ?Subroutine84
       9  ?Subroutine85
       9  ?Subroutine86
       9  ?Subroutine87
       6  ?Subroutine88
      16  ?Subroutine9
     141  ZDO_RegisterForZDOMsg
       6  ZDO_RegisterForZDOMsg::?relay
     106  ZDO_RemoveRegisteredCB
       6  ZDO_RemoveRegisteredCB::?relay
     268  ZDO_SendMsgCBs
       6  ZDO_SendMsgCBs::?relay
       1  ZDP_AF_ENDPOINT
     197  ZDP_BindUnbindReq
       6  ZDP_BindUnbindReq::?relay
      80  ZDP_Buf
      74  ZDP_DeviceAnnce
       6  ZDP_DeviceAnnce::?relay
     164  ZDP_EPRsp
       6  ZDP_EPRsp::?relay
     316  ZDP_EndDeviceBindReq
       6  ZDP_EndDeviceBindReq::?relay
      87  ZDP_GenericRsp
       6  ZDP_GenericRsp::?relay
      71  ZDP_IEEEAddrReq
       6  ZDP_IEEEAddrReq::?relay
     314  ZDP_IncomingData
       6  ZDP_IncomingData::?relay
     245  ZDP_MatchDescReq
       6  ZDP_MatchDescReq::?relay
     289  ZDP_MgmtBindRsp
       6  ZDP_MgmtBindRsp::?relay
      32  ZDP_MgmtDirectJoinReq
       6  ZDP_MgmtDirectJoinReq::?relay
      61  ZDP_MgmtLeaveReq
       6  ZDP_MgmtLeaveReq::?relay
     396  ZDP_MgmtLqiRsp
       6  ZDP_MgmtLqiRsp::?relay
      59  ZDP_MgmtNwkDiscReq
       6  ZDP_MgmtNwkDiscReq::?relay
     325  ZDP_MgmtNwkDiscRsp
       6  ZDP_MgmtNwkDiscRsp::?relay
     229  ZDP_MgmtNwkUpdateNotify
       6  ZDP_MgmtNwkUpdateNotify::?relay
     129  ZDP_MgmtNwkUpdateReq
       6  ZDP_MgmtNwkUpdateReq::?relay
     159  ZDP_MgmtPermitJoinReq
       6  ZDP_MgmtPermitJoinReq::?relay
     320  ZDP_MgmtRtgRsp
       6  ZDP_MgmtRtgRsp::?relay
      27  ZDP_NWKAddrOfInterestReq
       6  ZDP_NWKAddrOfInterestReq::?relay
     204  ZDP_NodeDescMsg
       6  ZDP_NodeDescMsg::?relay
     103  ZDP_NwkAddrReq
       6  ZDP_NwkAddrReq::?relay
     169  ZDP_ParentAnnce
       6  ZDP_ParentAnnce::?relay
      77  ZDP_PowerDescMsg
       6  ZDP_PowerDescMsg::?relay
     108  ZDP_SendData
       6  ZDP_SendData::?relay
      83  ZDP_ServerDiscReq
       6  ZDP_ServerDiscReq::?relay
      97  ZDP_ServerDiscRsp
       6  ZDP_ServerDiscRsp::?relay
     384  ZDP_SimpleDescMsg
       6  ZDP_SimpleDescMsg::?relay
      27  ZDP_SimpleDescReq
       6  ZDP_SimpleDescReq::?relay
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     142  ZDP_UserDescRsp
       6  ZDP_UserDescRsp::?relay
     116  ZDP_UserDescSet
       6  ZDP_UserDescSet::?relay
     160  fillAndSend
       6  fillAndSend::?relay
       2  zdoMsgCBs
      40  zdpMsgProcs
     294  zdpProcessAddrReq
       6  zdpProcessAddrReq::?relay

 
 6 869 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
    41 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
    84 bytes in segment XDATA_Z
 
   253 bytes of CODE     memory
 6 869 bytes of HUGECODE memory
    86 bytes of XDATA    memory

Errors: none
Warnings: none
