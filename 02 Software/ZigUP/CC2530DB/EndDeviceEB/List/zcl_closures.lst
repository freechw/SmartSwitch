###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               20/Nov/2021  20:16:44
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\Z-Stack Home 1.2.2a.44539\Components\stack\zcl\zcl_closures.c
#    Command line       =  
#        -f C:\Users\tatbo\AppData\Local\Temp\EWC0F1.tmp ("D:\Z-Stack Home
#        1.2.2a.44539\Components\stack\zcl\zcl_closures.c" -D SECURE=1 -D
#        HAL_KEY=FALSE -D HAL_LED=FALSE -D HAL_LCD=FALSE -D HAL_UART=FALSE -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xHOLD_AUTO_START -D
#        ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=FALSE -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D
#        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D ZCL_DOORLOCK -lC "D:\Z-Stack
#        Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List"
#        -lA "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\" -I
#        "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\Source\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\Source\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List\zcl_closures.lst
#    Object file        =  
#        D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\Obj\zcl_closures.r51
#
###############################################################################

D:\Z-Stack Home 1.2.2a.44539\Components\stack\zcl\zcl_closures.c
      1          /**************************************************************************************************
      2            Filename:       zcl_closures.c
      3            Revised:        $Date: 2013-10-16 16:38:58 -0700 (Wed, 16 Oct 2013) $
      4            Revision:       $Revision: 35701 $
      5          
      6            Description:    Zigbee Cluster Library - Closures.
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #include "zcl.h"
     45          #include "zcl_general.h"
     46          #include "zcl_closures.h"
     47          
     48          #if defined ( INTER_PAN )
     49            #include "stub_aps.h"
     50          #endif
     51          
     52          /*********************************************************************
     53           * MACROS
     54           */
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          /*********************************************************************
     61           * TYPEDEFS
     62           */
     63          #ifdef ZCL_DOORLOCK
     64          typedef struct zclClosuresDoorLockCBRec
     65          {
     66            struct zclClosuresDoorLockCBRec     *next;
     67            uint8                                endpoint; // Used to link it into the endpoint descriptor
     68            zclClosures_DoorLockAppCallbacks_t  *CBs;     // Pointer to Callback function
     69          } zclClosuresDoorLockCBRec_t;
     70          #endif
     71          
     72          #ifdef ZCL_WINDOWCOVERING
     73          typedef struct zclClosuresWindowCoveringCBRec
     74          {
     75            struct zclClosuresWindowCoveringCBRec     *next;
     76            uint8                                     endpoint; // Used to link it into the endpoint descriptor
     77            zclClosures_WindowCoveringAppCallbacks_t  *CBs;     // Pointer to Callback function
     78          } zclClosuresWindowCoveringCBRec_t;
     79          #endif
     80          
     81          /*********************************************************************
     82           * GLOBAL VARIABLES
     83           */
     84          
     85          /*********************************************************************
     86           * GLOBAL FUNCTIONS
     87           */
     88          
     89          /*********************************************************************
     90           * LOCAL VARIABLES
     91           */
     92          #ifdef ZCL_DOORLOCK

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          static zclClosuresDoorLockCBRec_t *zclClosuresDoorLockCBs = (zclClosuresDoorLockCBRec_t *)NULL;
   \                     zclClosuresDoorLockCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     94          #endif
     95          
     96          #ifdef ZCL_WINDOWCOVERING
     97          static zclClosuresWindowCoveringCBRec_t *zclClosuresWindowCoveringCBs = (zclClosuresWindowCoveringCBRec_t *)NULL;
     98          #endif
     99          
    100          #ifdef ZCL_DOORLOCK

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    101          static uint8 zclDoorLockPluginRegisted = FALSE;
   \                     zclDoorLockPluginRegisted:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    102          #endif
    103          
    104          #ifdef ZCL_WINDOWCOVERING
    105          static uint8 zclWindowCoveringPluginRegisted = FALSE;
    106          #endif
    107          
    108          /*********************************************************************
    109           * LOCAL FUNCTIONS
    110           */
    111          #if defined(ZCL_DOORLOCK) || defined(ZCL_WINDOWCOVERING)
    112          static ZStatus_t zclClosures_HdlIncoming( zclIncoming_t *pInMsg );
    113          static ZStatus_t zclClosures_HdlInSpecificCommands( zclIncoming_t *pInMsg );
    114          #endif
    115          
    116          #ifdef ZCL_DOORLOCK
    117          static zclClosures_DoorLockAppCallbacks_t *zclClosures_FindDoorLockCallbacks( uint8 endpoint );
    118          static ZStatus_t zclClosures_ProcessInDoorLockCmds( zclIncoming_t *pInMsg,
    119                                                              zclClosures_DoorLockAppCallbacks_t *pCBs );
    120          static ZStatus_t zclClosures_ProcessInDoorLock( zclIncoming_t *pInMsg,
    121                                                          zclClosures_DoorLockAppCallbacks_t *pCBs );
    122          static ZStatus_t zclClosures_ProcessInDoorLockUnlockWithTimeout( zclIncoming_t *pInMsg,
    123                                                                           zclClosures_DoorLockAppCallbacks_t *pCBs );
    124          static ZStatus_t zclClosures_ProcessInDoorLockGetLogRecord( zclIncoming_t *pInMsg,
    125                                                                      zclClosures_DoorLockAppCallbacks_t *pCBs );
    126          static ZStatus_t zclClosures_ProcessInDoorLockSetPINCode( zclIncoming_t *pInMsg,
    127                                                                    zclClosures_DoorLockAppCallbacks_t *pCBs );
    128          static ZStatus_t zclClosures_ProcessInDoorLockGetPINCode( zclIncoming_t *pInMsg,
    129                                                                    zclClosures_DoorLockAppCallbacks_t *pCBs );
    130          static ZStatus_t zclClosures_ProcessInDoorLockClearPINCode( zclIncoming_t *pInMsg,
    131                                                                      zclClosures_DoorLockAppCallbacks_t *pCBs );
    132          static ZStatus_t zclClosures_ProcessInDoorLockClearAllPINCodes( zclIncoming_t *pInMsg,
    133                                                                          zclClosures_DoorLockAppCallbacks_t *pCBs );
    134          static ZStatus_t zclClosures_ProcessInDoorLockSetUserStatus( zclIncoming_t *pInMsg,
    135                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs );
    136          static ZStatus_t zclClosures_ProcessInDoorLockGetUserStatus( zclIncoming_t *pInMsg,
    137                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs );
    138          static ZStatus_t zclClosures_ProcessInDoorLockSetWeekDaySchedule( zclIncoming_t *pInMsg,
    139                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs );
    140          static ZStatus_t zclClosures_ProcessInDoorLockGetWeekDaySchedule( zclIncoming_t *pInMsg,
    141                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs );
    142          static ZStatus_t zclClosures_ProcessInDoorLockClearWeekDaySchedule( zclIncoming_t *pInMsg,
    143                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs );
    144          static ZStatus_t zclClosures_ProcessInDoorLockSetYearDaySchedule( zclIncoming_t *pInMsg,
    145                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs );
    146          static ZStatus_t zclClosures_ProcessInDoorLockGetYearDaySchedule( zclIncoming_t *pInMsg,
    147                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs );
    148          static ZStatus_t zclClosures_ProcessInDoorLockClearYearDaySchedule( zclIncoming_t *pInMsg,
    149                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs );
    150          static ZStatus_t zclClosures_ProcessInDoorLockSetHolidaySchedule( zclIncoming_t *pInMsg,
    151                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs );
    152          static ZStatus_t zclClosures_ProcessInDoorLockGetHolidaySchedule( zclIncoming_t *pInMsg,
    153                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs );
    154          static ZStatus_t zclClosures_ProcessInDoorLockClearHolidaySchedule( zclIncoming_t *pInMsg,
    155                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs );
    156          static ZStatus_t zclClosures_ProcessInDoorLockSetUserType( zclIncoming_t *pInMsg,
    157                                                                     zclClosures_DoorLockAppCallbacks_t *pCBs );
    158          static ZStatus_t zclClosures_ProcessInDoorLockGetUserType( zclIncoming_t *pInMsg,
    159                                                                     zclClosures_DoorLockAppCallbacks_t *pCBs );
    160          static ZStatus_t zclClosures_ProcessInDoorLockSetRFIDCode( zclIncoming_t *pInMsg,
    161                                                                     zclClosures_DoorLockAppCallbacks_t *pCBs );
    162          static ZStatus_t zclClosures_ProcessInDoorLockGetRFIDCode( zclIncoming_t *pInMsg,
    163                                                                     zclClosures_DoorLockAppCallbacks_t *pCBs );
    164          static ZStatus_t zclClosures_ProcessInDoorLockClearRFIDCode( zclIncoming_t *pInMsg,
    165                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs );
    166          static ZStatus_t zclClosures_ProcessInDoorLockClearAllRFIDCodes( zclIncoming_t *pInMsg,
    167                                                                           zclClosures_DoorLockAppCallbacks_t *pCBs );
    168          static ZStatus_t zclClosures_ProcessInDoorLockUnlockWithTimeoutRsp( zclIncoming_t *pInMsg,
    169                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs );
    170          static ZStatus_t zclClosures_ProcessInDoorLockGetLogRecordRsp( zclIncoming_t *pInMsg,
    171                                                                         zclClosures_DoorLockAppCallbacks_t *pCBs );
    172          static ZStatus_t zclClosures_ProcessInDoorLockSetPINCodeRsp( zclIncoming_t *pInMsg,
    173                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs );
    174          static ZStatus_t zclClosures_ProcessInDoorLockGetPINCodeRsp( zclIncoming_t *pInMsg,
    175                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs );
    176          static ZStatus_t zclClosures_ProcessInDoorLockClearPINCodeRsp( zclIncoming_t *pInMsg,
    177                                                                         zclClosures_DoorLockAppCallbacks_t *pCBs );
    178          static ZStatus_t zclClosures_ProcessInDoorLockClearAllPINCodesRsp( zclIncoming_t *pInMsg,
    179                                                                             zclClosures_DoorLockAppCallbacks_t *pCBs );
    180          static ZStatus_t zclClosures_ProcessInDoorLockSetUserStatusRsp( zclIncoming_t *pInMsg,
    181                                                                          zclClosures_DoorLockAppCallbacks_t *pCBs );
    182          static ZStatus_t zclClosures_ProcessInDoorLockGetUserStatusRsp( zclIncoming_t *pInMsg,
    183                                                                          zclClosures_DoorLockAppCallbacks_t *pCBs );
    184          static ZStatus_t zclClosures_ProcessInDoorLockSetWeekDayScheduleRsp( zclIncoming_t *pInMsg,
    185                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs );
    186          static ZStatus_t zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp( zclIncoming_t *pInMsg,
    187                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs );
    188          static ZStatus_t zclClosures_ProcessInDoorLockClearWeekDayScheduleRsp( zclIncoming_t *pInMsg,
    189                                                                                 zclClosures_DoorLockAppCallbacks_t *pCBs );
    190          static ZStatus_t zclClosures_ProcessInDoorLockSetYearDayScheduleRsp( zclIncoming_t *pInMsg,
    191                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs );
    192          static ZStatus_t zclClosures_ProcessInDoorLockGetYearDayScheduleRsp( zclIncoming_t *pInMsg,
    193                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs );
    194          static ZStatus_t zclClosures_ProcessInDoorLockClearYearDayScheduleRsp( zclIncoming_t *pInMsg,
    195                                                                                 zclClosures_DoorLockAppCallbacks_t *pCBs );
    196          static ZStatus_t zclClosures_ProcessInDoorLockSetHolidayScheduleRsp( zclIncoming_t *pInMsg,
    197                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs );
    198          static ZStatus_t zclClosures_ProcessInDoorLockGetHolidayScheduleRsp( zclIncoming_t *pInMsg,
    199                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs );
    200          static ZStatus_t zclClosures_ProcessInDoorLockClearHolidayScheduleRsp( zclIncoming_t *pInMsg,
    201                                                                                 zclClosures_DoorLockAppCallbacks_t *pCBs );
    202          static ZStatus_t zclClosures_ProcessInDoorLockSetUserTypeRsp( zclIncoming_t *pInMsg,
    203                                                                        zclClosures_DoorLockAppCallbacks_t *pCBs );
    204          static ZStatus_t zclClosures_ProcessInDoorLockGetUserTypeRsp( zclIncoming_t *pInMsg,
    205                                                                        zclClosures_DoorLockAppCallbacks_t *pCBs );
    206          static ZStatus_t zclClosures_ProcessInDoorLockSetRFIDCodeRsp( zclIncoming_t *pInMsg,
    207                                                                        zclClosures_DoorLockAppCallbacks_t *pCBs );
    208          static ZStatus_t zclClosures_ProcessInDoorLockGetRFIDCodeRsp( zclIncoming_t *pInMsg,
    209                                                                        zclClosures_DoorLockAppCallbacks_t *pCBs );
    210          static ZStatus_t zclClosures_ProcessInDoorLockClearRFIDCodeRsp( zclIncoming_t *pInMsg,
    211                                                                          zclClosures_DoorLockAppCallbacks_t *pCBs );
    212          static ZStatus_t zclClosures_ProcessInDoorLockClearAllRFIDCodesRsp( zclIncoming_t *pInMsg,
    213                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs );
    214          static ZStatus_t zclClosures_ProcessInDoorLockOperationEventNotification( zclIncoming_t *pInMsg,
    215                                                                                    zclClosures_DoorLockAppCallbacks_t *pCBs );
    216          static ZStatus_t zclClosures_ProcessInDoorLockProgrammingEventNotification( zclIncoming_t *pInMsg,
    217                                                                                      zclClosures_DoorLockAppCallbacks_t *pCBs );
    218          #endif //ZCL_DOORLOCK
    219          
    220          #ifdef ZCL_WINDOWCOVERING
    221          static zclClosures_WindowCoveringAppCallbacks_t *zclClosures_FindWCCallbacks( uint8 endpoint );
    222          static ZStatus_t zclClosures_ProcessInWindowCovering( zclIncoming_t *pInMsg,
    223                                                                zclClosures_WindowCoveringAppCallbacks_t *pCBs );
    224          #endif //ZCL_WINDOWCOVERING
    225          
    226          #ifdef ZCL_DOORLOCK
    227          /*********************************************************************
    228           * @fn      zclClosures_RegisterDoorLockCmdCallbacks
    229           *
    230           * @brief   Register an applications DoorLock command callbacks
    231           *
    232           * @param   endpoint - application's endpoint
    233           * @param   callbacks - pointer to the callback record.
    234           *
    235           * @return  ZMemError if not able to allocate
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          ZStatus_t zclClosures_RegisterDoorLockCmdCallbacks( uint8 endpoint, zclClosures_DoorLockAppCallbacks_t *callbacks )
   \                     zclClosures_RegisterDoorLockCmdCallbacks:
    238          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    239            zclClosuresDoorLockCBRec_t *pNewItem;
    240            zclClosuresDoorLockCBRec_t *pLoop;
    241          
    242            // Register as a ZCL Plugin
    243            if ( !zclDoorLockPluginRegisted )
   \   00000B   90....       MOV       DPTR,#zclDoorLockPluginRegisted
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   7021         JNZ       ??zclClosures_RegisterDoorLockCmdCallbacks_0
    244            {
    245              zcl_registerPlugin( ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
    246                                  ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
    247                                  zclClosures_HdlIncoming );
   \   000011                ; Setup parameters for call to function zcl_registerPlugin
   \   000011   75....       MOV       ?V2,#`??zclClosures_HdlIncoming::?relay` & 0xff
   \   000014   75....       MOV       ?V3,#(`??zclClosures_HdlIncoming::?relay` >> 8) & 0xff
   \   000017   78..         MOV       R0,#?V2
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   7C01         MOV       R4,#0x1
   \   00001E   7D01         MOV       R5,#0x1
   \   000020   7A01         MOV       R2,#0x1
   \   000022   7B01         MOV       R3,#0x1
   \   000024   12....       LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
    248              zclDoorLockPluginRegisted = TRUE;
   \   00002C   90....       MOV       DPTR,#zclDoorLockPluginRegisted
   \   00002F   7401         MOV       A,#0x1
   \   000031   F0           MOVX      @DPTR,A
    249            }
    250          
    251            // Fill in the new profile list
    252            pNewItem = zcl_mem_alloc( sizeof( zclClosuresDoorLockCBRec_t ) );
   \                     ??zclClosures_RegisterDoorLockCmdCallbacks_0:
   \   000032                ; Setup parameters for call to function osal_mem_alloc
   \   000032   7A05         MOV       R2,#0x5
   \   000034   7B00         MOV       R3,#0x0
   \   000036   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000039   8A..         MOV       ?V2,R2
   \   00003B   8B..         MOV       ?V3,R3
   \   00003D   A8..         MOV       R0,?V2
   \   00003F   A9..         MOV       R1,?V3
    253            if ( pNewItem == NULL )
   \   000041   E8           MOV       A,R0
   \   000042   49           ORL       A,R1
   \   000043   7004         JNZ       ??zclClosures_RegisterDoorLockCmdCallbacks_1
    254            {
    255              return ( ZMemError );
   \   000045   7910         MOV       R1,#0x10
   \   000047   8040         SJMP      ??zclClosures_RegisterDoorLockCmdCallbacks_2
    256            }
    257          
    258            pNewItem->next = (zclClosuresDoorLockCBRec_t *)NULL;
   \                     ??zclClosures_RegisterDoorLockCmdCallbacks_1:
   \   000049   8882         MOV       DPL,R0
   \   00004B   8983         MOV       DPH,R1
   \   00004D   E4           CLR       A
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   12....       LCALL     ?Subroutine67 & 0xFFFF
    259            pNewItem->endpoint = endpoint;
   \                     ??CrossCallReturnLabel_156:
   \   000053   E5..         MOV       A,?V0
   \   000055   12....       LCALL     ?Subroutine67 & 0xFFFF
    260            pNewItem->CBs = callbacks;
   \                     ??CrossCallReturnLabel_157:
   \   000058   A3           INC       DPTR
   \   000059   EE           MOV       A,R6
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   A3           INC       DPTR
   \   00005C   EF           MOV       A,R7
   \   00005D   F0           MOVX      @DPTR,A
    261          
    262            // Find spot in list
    263            if ( zclClosuresDoorLockCBs == NULL )
   \   00005E   90....       MOV       DPTR,#zclClosuresDoorLockCBs
   \   000061   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000064   EA           MOV       A,R2
   \   000065   4B           ORL       A,R3
   \   000066   90....       MOV       DPTR,#zclClosuresDoorLockCBs
   \   000069   6018         JZ        ??zclClosures_RegisterDoorLockCmdCallbacks_3
    264            {
    265              zclClosuresDoorLockCBs = pNewItem;
    266            }
    267            else
    268            {
    269              // Look for end of list
    270              pLoop = zclClosuresDoorLockCBs;
   \   00006B   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   00006E   8003         SJMP      ??zclClosures_RegisterDoorLockCmdCallbacks_4
    271              while ( pLoop->next != NULL )
    272              {
    273                pLoop = pLoop->next;
   \                     ??zclClosures_RegisterDoorLockCmdCallbacks_5:
   \   000070   EA           MOV       A,R2
   \   000071   FC           MOV       R4,A
   \   000072   EB           MOV       A,R3
   \                     ??zclClosures_RegisterDoorLockCmdCallbacks_4:
   \   000073   FD           MOV       R5,A
    274              }
   \   000074   8C82         MOV       DPL,R4
   \   000076   8D83         MOV       DPH,R5
   \   000078   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00007B   EA           MOV       A,R2
   \   00007C   4B           ORL       A,R3
   \   00007D   70F1         JNZ       ??zclClosures_RegisterDoorLockCmdCallbacks_5
    275          
    276              // Put new item at end of list
    277              pLoop->next = pNewItem;
   \   00007F   8C82         MOV       DPL,R4
   \   000081   8D83         MOV       DPH,R5
   \                     ??zclClosures_RegisterDoorLockCmdCallbacks_3:
   \   000083   E8           MOV       A,R0
    278            }
   \   000084   12....       LCALL     ??Subroutine129_0 & 0xFFFF
    279            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_283:
   \   000087   7900         MOV       R1,#0x0
   \                     ??zclClosures_RegisterDoorLockCmdCallbacks_2:
   \   000089   02....       LJMP      ??Subroutine164_0 & 0xFFFF
    280          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL     ??Subroutine145_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine145_0:
   \   000000   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine164_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   22           RET
    281          
    282          /*********************************************************************
    283           * @fn      zclClosures_FindDoorLockCallbacks
    284           *
    285           * @brief   Find the DoorLock callbacks for an endpoint
    286           *
    287           * @param   endpoint
    288           *
    289           * @return  pointer to the callbacks
    290           */
    291          static zclClosures_DoorLockAppCallbacks_t *zclClosures_FindDoorLockCallbacks( uint8 endpoint )
    292          {
    293            zclClosuresDoorLockCBRec_t *pCBs;
    294          
    295            pCBs = zclClosuresDoorLockCBs;
    296            while ( pCBs )
    297            {
    298              if ( pCBs->endpoint == endpoint )
    299              {
    300                return ( pCBs->CBs );
    301              }
    302              pCBs = pCBs->next;
    303            }
    304            return ( (zclClosures_DoorLockAppCallbacks_t *)NULL );
    305          }
    306          #endif // ZCL_DOORLOCK
    307          
    308          #ifdef ZCL_WINDOWCOVERING
    309          /*********************************************************************
    310           * @fn      zclClosures_RegisterWindowCoveringCmdCallbacks
    311           *
    312           * @brief   Register an applications Window Covering command callbacks
    313           *
    314           * @param   endpoint - application's endpoint
    315           * @param   callbacks - pointer to the callback record.
    316           *
    317           * @return  ZMemError if not able to allocate
    318           */
    319          ZStatus_t zclClosures_RegisterWindowCoveringCmdCallbacks( uint8 endpoint, zclClosures_WindowCoveringAppCallbacks_t *callbacks )
    320          {
    321            zclClosuresWindowCoveringCBRec_t *pNewItem;
    322            zclClosuresWindowCoveringCBRec_t *pLoop;
    323          
    324            // Register as a ZCL Plugin
    325            if ( !zclWindowCoveringPluginRegisted )
    326            {
    327              zcl_registerPlugin( ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING,
    328                                  ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING,
    329                                  zclClosures_HdlIncoming );
    330              zclWindowCoveringPluginRegisted = TRUE;
    331            }
    332          
    333            // Fill in the new profile list
    334            pNewItem = zcl_mem_alloc( sizeof( zclClosuresWindowCoveringCBRec_t ) );
    335            if ( pNewItem == NULL )
    336            {
    337              return ( ZMemError );
    338            }
    339          
    340            pNewItem->next = (zclClosuresWindowCoveringCBRec_t *)NULL;
    341            pNewItem->endpoint = endpoint;
    342            pNewItem->CBs = callbacks;
    343          
    344            // Find spot in list
    345            if ( zclClosuresWindowCoveringCBs == NULL )
    346            {
    347              zclClosuresWindowCoveringCBs = pNewItem;
    348            }
    349            else
    350            {
    351              // Look for end of list
    352              pLoop = zclClosuresWindowCoveringCBs;
    353              while ( pLoop->next != NULL )
    354              {
    355                pLoop = pLoop->next;
    356              }
    357          
    358              // Put new item at end of list
    359              pLoop->next = pNewItem;
    360            }
    361            return ( ZSuccess );
    362          }
    363          
    364          /*********************************************************************
    365           * @fn      zclClosures_FindWCCallbacks
    366           *
    367           * @brief   Find the Window Covering callbacks for an endpoint
    368           *
    369           * @param   endpoint
    370           *
    371           * @return  pointer to the callbacks
    372           */
    373          static zclClosures_WindowCoveringAppCallbacks_t *zclClosures_FindWCCallbacks( uint8 endpoint )
    374          {
    375            zclClosuresWindowCoveringCBRec_t *pCBs;
    376          
    377            pCBs = zclClosuresWindowCoveringCBs;
    378            while ( pCBs )
    379            {
    380              if ( pCBs->endpoint == endpoint )
    381              {
    382                return ( pCBs->CBs );
    383              }
    384              pCBs = pCBs->next;
    385            }
    386            return ( (zclClosures_WindowCoveringAppCallbacks_t *)NULL );
    387          }
    388          #endif // ZCL_WINDOWCOVERING
    389          
    390          #if defined(ZCL_DOORLOCK) || defined(ZCL_WINDOWCOVERING)
    391          /*********************************************************************
    392           * @fn      zclClosures_HdlIncoming
    393           *
    394           * @brief   Callback from ZCL to process incoming Commands specific
    395           *          to this cluster library or Profile commands for attributes
    396           *          that aren't in the attribute list
    397           *
    398           * @param   pInMsg - pointer to the incoming message
    399           * @param   logicalClusterID
    400           *
    401           * @return  ZStatus_t
    402           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    403          static ZStatus_t zclClosures_HdlIncoming( zclIncoming_t *pInMsg )
   \                     zclClosures_HdlIncoming:
    404          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    405            ZStatus_t stat = ZSuccess;
    406          
    407          #if defined ( INTER_PAN )
    408            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
    409              return ( stat ); // Cluster not supported thru Inter-PAN
    410          #endif
    411            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F8           MOV       R0,A
   \   00000D   5403         ANL       A,#0x3
   \   00000F   6401         XRL       A,#0x1
   \   000011   7034         JNZ       ??zclClosures_HdlIncoming_0
    412            {
    413              // Is this a manufacturer specific command?
    414              if ( pInMsg->hdr.fc.manuSpecific == 0 )
   \   000013   E8           MOV       A,R0
   \   000014   5404         ANL       A,#0x4
   \   000016   702F         JNZ       ??zclClosures_HdlIncoming_0
    415              {
    416                stat = zclClosures_HdlInSpecificCommands( pInMsg );
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   12....       LCALL     ?Subroutine97 & 0xFFFF
    417              }
    418              else
    419              {
    420                // We don't support any manufacturer specific command.
    421                stat = ZFailure;
    422              }
    423            }
   \                     ??CrossCallReturnLabel_223:
   \   00001F   2414         ADD       A,#0x14
   \   000021   F582         MOV       DPL,A
   \   000023   E4           CLR       A
   \   000024   3F           ADDC      A,R7
   \   000025   F583         MOV       DPH,A
   \   000027   E0           MOVX      A,@DPTR
   \   000028   FC           MOV       R4,A
   \   000029   90....       MOV       DPTR,#zclClosuresDoorLockCBs
   \                     ??zclClosures_HdlIncoming_1:
   \   00002C   12....       LCALL     ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   00002F   6016         JZ        ??zclClosures_HdlIncoming_0
   \   000031   8882         MOV       DPL,R0
   \   000033   8983         MOV       DPH,R1
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   6C           XRL       A,R4
   \   000039   8882         MOV       DPL,R0
   \   00003B   8983         MOV       DPH,R1
   \   00003D   70ED         JNZ       ??zclClosures_HdlIncoming_1
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000045   7004         JNZ       ??zclClosures_HdlIncoming_2
   \                     ??zclClosures_HdlIncoming_0:
   \   000047   7901         MOV       R1,#0x1
   \   000049   802A         SJMP      ??zclClosures_HdlIncoming_3
   \                     ??zclClosures_HdlIncoming_2:
   \   00004B   8E82         MOV       DPL,R6
   \   00004D   8F83         MOV       DPH,R7
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F5..         MOV       ?V2,A
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F5..         MOV       ?V3,A
   \   00005A   78..         MOV       R0,#?V2
   \   00005C   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclClosures_HdlIncoming>_0`:
   \   00005F   0101         DW        257
   \   000061   01           DB        1
   \   000062   ....         DW        ??zclClosures_HdlIncoming_4
   \   000064   ....         DW        ??zclClosures_HdlIncoming_5
   \   000066   ....         DW        ??zclClosures_HdlIncoming_6
   \                     ??zclClosures_HdlIncoming_5:
   \   000068                ; Setup parameters for call to function zclClosures_ProcessInDoorLockCmds
   \   000068   12....       LCALL     `??zclClosures_ProcessInDoorLockCmds::?relay`; Banked call to: zclClosures_ProcessInDoorLockCmds
   \   00006B   E9           MOV       A,R1
   \   00006C   F5..         MOV       ?V0,A
   \   00006E   8003         SJMP      ??zclClosures_HdlIncoming_6
   \                     ??zclClosures_HdlIncoming_4:
   \   000070   75..01       MOV       ?V0,#0x1
   \                     ??zclClosures_HdlIncoming_6:
   \   000073   A9..         MOV       R1,?V0
    424            else
    425            {
    426              // Handle all the normal (Read, Write...) commands -- should never get here
    427              stat = ZFailure;
    428            }
    429            return ( stat );
   \                     ??zclClosures_HdlIncoming_3:
   \   000075   02....       LJMP      ??Subroutine164_0 & 0xFFFF
    430          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   000003   E8           MOV       A,R0
   \   000004   FE           MOV       R6,A
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
   \   000007   EE           MOV       A,R6
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   000003   FD           MOV       R5,A
   \   000004   EC           MOV       A,R4
   \   000005   4D           ORL       A,R5
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine144_0:
   \   000000   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000003   49           ORL       A,R1
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   000003   E8           MOV       A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
    431          
    432          /*********************************************************************
    433           * @fn      zclClosures_HdlInSpecificCommands
    434           *
    435           * @brief   Callback from ZCL to process incoming Commands specific
    436           *          to this cluster library
    437          
    438           * @param   pInMsg - pointer to the incoming message
    439           *
    440           * @return  ZStatus_t
    441           */
    442          static ZStatus_t zclClosures_HdlInSpecificCommands( zclIncoming_t *pInMsg )
    443          {
    444            ZStatus_t stat;
    445          #ifdef ZCL_DOORLOCK
    446            zclClosures_DoorLockAppCallbacks_t *pDLCBs;
    447          #endif
    448          
    449          #ifdef ZCL_WINDOWCOVERING
    450            zclClosures_WindowCoveringAppCallbacks_t *pWCCBs;
    451          #endif
    452          
    453          #ifdef ZCL_DOORLOCK
    454            // make sure endpoint exists
    455            pDLCBs = zclClosures_FindDoorLockCallbacks( pInMsg->msg->endPoint );
    456            if ( pDLCBs == NULL )
    457            {
    458              return ( ZFailure );
    459            }
    460          #endif
    461          
    462          #ifdef ZCL_WINDOWCOVERING
    463            // make sure endpoint exists
    464            pWCCBs = zclClosures_FindWCCallbacks( pInMsg->msg->endPoint );
    465            if ( pWCCBs == NULL )
    466            {
    467              return ( ZFailure );
    468            }
    469          #endif
    470          
    471            switch ( pInMsg->msg->clusterId )
    472            {
    473              case ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK:
    474          #ifdef ZCL_DOORLOCK
    475                stat = zclClosures_ProcessInDoorLockCmds( pInMsg, pDLCBs );
    476          #endif //ZCL_DOORLOCK
    477                break;
    478          
    479              case ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING:
    480          #ifdef ZCL_WINDOWCOVERING
    481                stat = zclClosures_ProcessInWindowCovering( pInMsg, pWCCBs );
    482          #endif //ZCL_WINDOWCOVERING
    483                break;
    484          
    485              default:
    486                stat = ZFailure;
    487                break;
    488            }
    489          
    490            return ( stat );
    491          }
    492          #endif // defined(ZCL_DOORLOCK) || defined(ZCL_WINDOWCOVERING)
    493          
    494          #ifdef ZCL_DOORLOCK
    495          /*********************************************************************
    496           * @fn      zclClosures_ProcessInDoorLockCmds
    497           *
    498           * @brief   Process in the received DoorLock Command.
    499           *
    500           * @param   pInMsg - pointer to the incoming message
    501           * @param   pCBs - pointer to the Application callback functions
    502           *
    503           * @return  ZStatus_t
    504           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    505          static ZStatus_t zclClosures_ProcessInDoorLockCmds( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockCmds:
    506                                                              zclClosures_DoorLockAppCallbacks_t *pCBs )
    507          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    508            ZStatus_t stat;
    509          
    510            // Client-to-Server
    511            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   00000A   EA           MOV       A,R2
   \   00000B   2408         ADD       A,#0x8
   \   00000D   F8           MOV       R0,A
   \   00000E   E4           CLR       A
   \   00000F   3B           ADDC      A,R3
   \   000010   F9           MOV       R1,A
   \   000011   88..         MOV       ?V0,R0
   \   000013   89..         MOV       ?V1,R1
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   5408         ANL       A,#0x8
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   6003         JZ        $+5
   \   00002B   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_0 & 0xFFFF
    512            {
    513              switch(pInMsg->hdr.commandID)
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   12....       LCALL     ?UC_SWITCH_DENSE
   \                     `?<Jumptable for zclClosures_ProcessInDoorLockC_0`:
   \   000032   00           DB        0
   \   000033   19           DB        25
   \   000034   ....         DW        ??zclClosures_ProcessInDoorLockCmds_1
   \   000036   ....         DW        ??zclClosures_ProcessInDoorLockCmds_2
   \   000038   ....         DW        ??zclClosures_ProcessInDoorLockCmds_2
   \   00003A   ....         DW        ??zclClosures_ProcessInDoorLockCmds_2
   \   00003C   ....         DW        ??zclClosures_ProcessInDoorLockCmds_3
   \   00003E   ....         DW        ??zclClosures_ProcessInDoorLockCmds_4
   \   000040   ....         DW        ??zclClosures_ProcessInDoorLockCmds_5
   \   000042   ....         DW        ??zclClosures_ProcessInDoorLockCmds_6
   \   000044   ....         DW        ??zclClosures_ProcessInDoorLockCmds_7
   \   000046   ....         DW        ??zclClosures_ProcessInDoorLockCmds_8
   \   000048   ....         DW        ??zclClosures_ProcessInDoorLockCmds_9
   \   00004A   ....         DW        ??zclClosures_ProcessInDoorLockCmds_10
   \   00004C   ....         DW        ??zclClosures_ProcessInDoorLockCmds_11
   \   00004E   ....         DW        ??zclClosures_ProcessInDoorLockCmds_12
   \   000050   ....         DW        ??zclClosures_ProcessInDoorLockCmds_13
   \   000052   ....         DW        ??zclClosures_ProcessInDoorLockCmds_14
   \   000054   ....         DW        ??zclClosures_ProcessInDoorLockCmds_15
   \   000056   ....         DW        ??zclClosures_ProcessInDoorLockCmds_16
   \   000058   ....         DW        ??zclClosures_ProcessInDoorLockCmds_17
   \   00005A   ....         DW        ??zclClosures_ProcessInDoorLockCmds_18
   \   00005C   ....         DW        ??zclClosures_ProcessInDoorLockCmds_19
   \   00005E   ....         DW        ??zclClosures_ProcessInDoorLockCmds_20
   \   000060   ....         DW        ??zclClosures_ProcessInDoorLockCmds_21
   \   000062   ....         DW        ??zclClosures_ProcessInDoorLockCmds_22
   \   000064   ....         DW        ??zclClosures_ProcessInDoorLockCmds_23
   \   000066   ....         DW        ??zclClosures_ProcessInDoorLockCmds_24
   \   000068   ....         DW        ??zclClosures_ProcessInDoorLockCmds_25
    514              {
    515                case COMMAND_CLOSURES_LOCK_DOOR:
    516                case COMMAND_CLOSURES_UNLOCK_DOOR:
    517                case COMMAND_CLOSURES_TOGGLE_DOOR:
    518                  stat = zclClosures_ProcessInDoorLock( pInMsg, pCBs );
    519                  break;
    520          
    521                case COMMAND_CLOSURES_UNLOCK_WITH_TIMEOUT:
    522                  stat = zclClosures_ProcessInDoorLockUnlockWithTimeout( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_3:
   \   00006A                ; Setup parameters for call to function zclClosures_ProcessInDoorLockUnlockWithTimeout
   \   00006A   12....       LCALL     ??zclClosures_ProcessInDoorLockUnlockWithTimeou; Banked call to: zclClosures_ProcessInDoorLockUnlockWithTimeout
   \   00006D   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_26 & 0xFFFF
    523                  break;
    524          
    525                case COMMAND_CLOSURES_GET_LOG_RECORD:
    526                  stat = zclClosures_ProcessInDoorLockGetLogRecord( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_4:
   \   000070   8C82         MOV       DPL,R4
   \   000072   8D83         MOV       DPH,R5
   \   000074   800E         SJMP      ??zclClosures_ProcessInDoorLockCmds_27
    527                  break;
    528          
    529                case COMMAND_CLOSURES_SET_PIN_CODE:
    530                  stat = zclClosures_ProcessInDoorLockSetPINCode( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_5:
   \   000076                ; Setup parameters for call to function zclClosures_ProcessInDoorLockSetPINCode
   \   000076   12....       LCALL     `??zclClosures_ProcessInDoorLockSetPINCode::?rel`; Banked call to: zclClosures_ProcessInDoorLockSetPINCode
   \   000079   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_26 & 0xFFFF
    531                  break;
    532          
    533                case COMMAND_CLOSURES_GET_PIN_CODE:
    534                  stat = zclClosures_ProcessInDoorLockGetPINCode( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_6:
   \   00007C   8C82         MOV       DPL,R4
   \   00007E   8D83         MOV       DPH,R5
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \                     ??zclClosures_ProcessInDoorLockCmds_27:
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_28 & 0xFFFF
    535                  break;
    536          
    537                case COMMAND_CLOSURES_CLEAR_PIN_CODE:
    538                  stat = zclClosures_ProcessInDoorLockClearPINCode( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_7:
   \   00008D   EC           MOV       A,R4
   \   00008E   240C         ADD       A,#0xc
   \   000090   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_29 & 0xFFFF
    539                  break;
    540          
    541                case COMMAND_CLOSURES_CLEAR_ALL_PIN_CODES:
    542                  stat = zclClosures_ProcessInDoorLockClearAllPINCodes( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_8:
   \   000093   EC           MOV       A,R4
   \   000094   240E         ADD       A,#0xe
   \   000096   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_30 & 0xFFFF
    543                  break;
    544          
    545                case COMMAND_CLOSURES_SET_USER_STATUS:
    546                  stat = zclClosures_ProcessInDoorLockSetUserStatus( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_9:
   \   000099   EC           MOV       A,R4
   \   00009A   2410         ADD       A,#0x10
   \   00009C   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_31 & 0xFFFF
    547                  break;
    548          
    549                case COMMAND_CLOSURES_GET_USER_STATUS:
    550                  stat = zclClosures_ProcessInDoorLockGetUserStatus( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_10:
   \   00009F   EC           MOV       A,R4
   \   0000A0   2412         ADD       A,#0x12
   \   0000A2   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_29 & 0xFFFF
    551                  break;
    552          
    553                case COMMAND_CLOSURES_SET_WEEK_DAY_SCHEDULE:
    554                  stat = zclClosures_ProcessInDoorLockSetWeekDaySchedule( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_11:
   \   0000A5                ; Setup parameters for call to function zclClosures_ProcessInDoorLockSetWeekDaySchedule
   \   0000A5   12....       LCALL     ??zclClosures_ProcessInDoorLockSetWeekDaySchedu; Banked call to: zclClosures_ProcessInDoorLockSetWeekDaySchedule
   \   0000A8   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_26 & 0xFFFF
    555                  break;
    556          
    557                case COMMAND_CLOSURES_GET_WEEK_DAY_SCHEDULE:
    558                  stat = zclClosures_ProcessInDoorLockGetWeekDaySchedule( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_12:
   \   0000AB   EC           MOV       A,R4
   \   0000AC   2416         ADD       A,#0x16
   \   0000AE   800E         SJMP      ??zclClosures_ProcessInDoorLockCmds_32
    559                  break;
    560          
    561                case COMMAND_CLOSURES_CLEAR_WEEK_DAY_SCHEDULE:
    562                  stat = zclClosures_ProcessInDoorLockClearWeekDaySchedule( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_13:
   \   0000B0   EC           MOV       A,R4
   \   0000B1   2418         ADD       A,#0x18
   \   0000B3   8009         SJMP      ??zclClosures_ProcessInDoorLockCmds_32
    563                  break;
    564          
    565                case COMMAND_CLOSURES_SET_YEAR_DAY_SCHEDULE:
    566                  stat = zclClosures_ProcessInDoorLockSetYearDaySchedule( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_14:
   \   0000B5                ; Setup parameters for call to function zclClosures_ProcessInDoorLockSetYearDaySchedule
   \   0000B5   12....       LCALL     ??zclClosures_ProcessInDoorLockSetYearDaySchedu; Banked call to: zclClosures_ProcessInDoorLockSetYearDaySchedule
   \   0000B8   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_26 & 0xFFFF
    567                  break;
    568          
    569                case COMMAND_CLOSURES_GET_YEAR_DAY_SCHEDULE:
    570                  stat = zclClosures_ProcessInDoorLockGetYearDaySchedule( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_15:
   \   0000BB   EC           MOV       A,R4
   \   0000BC   241C         ADD       A,#0x1c
   \                     ??zclClosures_ProcessInDoorLockCmds_32:
   \   0000BE   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   0000C1   700B         JNZ       ??zclClosures_ProcessInDoorLockCmds_33
   \   0000C3   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_1 & 0xFFFF
    571                  break;
    572          
    573                case COMMAND_CLOSURES_CLEAR_YEAR_DAY_SCHEDULE:
    574                  stat = zclClosures_ProcessInDoorLockClearYearDaySchedule( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_16:
   \   0000C6   EC           MOV       A,R4
   \   0000C7   241E         ADD       A,#0x1e
   \   0000C9   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   0000CC   602C         JZ        ??zclClosures_ProcessInDoorLockCmds_34
   \                     ??zclClosures_ProcessInDoorLockCmds_33:
   \   0000CE   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0000D1   85..82       MOV       DPL,?XSP + 0
   \   0000D4   85..83       MOV       DPH,?XSP + 1
   \   0000D7   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   0000DA   12....       LCALL     ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   0000DD   A3           INC       DPTR
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   FE           MOV       R6,A
   \   0000E0   8C82         MOV       DPL,R4
   \   0000E2   8D83         MOV       DPH,R5
   \   0000E4   A3           INC       DPTR
   \   0000E5   A3           INC       DPTR
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   FD           MOV       R5,A
   \   0000E8   EE           MOV       A,R6
   \   0000E9   FC           MOV       R4,A
   \   0000EA   7401         MOV       A,#0x1
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   EC           MOV       A,R4
   \   0000F0   F0           MOVX      @DPTR,A
   \   0000F1   A3           INC       DPTR
   \   0000F2   ED           MOV       A,R5
   \   0000F3   F0           MOVX      @DPTR,A
   \   0000F4                ; Setup parameters for indirect call
   \   0000F4   AC..         MOV       R4,?XSP + 0
   \   0000F6   AD..         MOV       R5,?XSP + 1
   \   0000F8   802E         SJMP      ??zclClosures_ProcessInDoorLockCmds_35
   \                     ??zclClosures_ProcessInDoorLockCmds_34:
   \   0000FA   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_1 & 0xFFFF
    575                  break;
    576          
    577                case COMMAND_CLOSURES_SET_HOLIDAY_SCHEDULE:
    578                  stat = zclClosures_ProcessInDoorLockSetHolidaySchedule( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_17:
   \   0000FD                ; Setup parameters for call to function zclClosures_ProcessInDoorLockSetHolidaySchedule
   \   0000FD   12....       LCALL     ??zclClosures_ProcessInDoorLockSetHolidaySchedu; Banked call to: zclClosures_ProcessInDoorLockSetHolidaySchedule
   \   000100   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_26 & 0xFFFF
    579                  break;
    580          
    581                case COMMAND_CLOSURES_GET_HOLIDAY_SCHEDULE:
    582                  stat = zclClosures_ProcessInDoorLockGetHolidaySchedule( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_18:
   \   000103   EC           MOV       A,R4
   \   000104   2422         ADD       A,#0x22
   \   000106   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000109   700B         JNZ       ??zclClosures_ProcessInDoorLockCmds_36
   \   00010B   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_1 & 0xFFFF
    583                  break;
    584          
    585                case COMMAND_CLOSURES_CLEAR_HOLIDAY_SCHEDULE:
    586                  stat = zclClosures_ProcessInDoorLockClearHolidaySchedule( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_19:
   \   00010E   EC           MOV       A,R4
   \   00010F   2424         ADD       A,#0x24
   \   000111   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000114   6019         JZ        ??zclClosures_ProcessInDoorLockCmds_37
   \                     ??zclClosures_ProcessInDoorLockCmds_36:
   \   000116   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000119   C0E0         PUSH      A
   \   00011B   7405         MOV       A,#0x5
   \   00011D   12....       LCALL     ?XSTACK_DISP0_8
   \   000120   D0E0         POP       A
   \   000122   F0           MOVX      @DPTR,A
   \   000123                ; Setup parameters for indirect call
   \   000123   7405         MOV       A,#0x5
   \   000125   12....       LCALL     ?XSTACK_DISP102_8
   \                     ??zclClosures_ProcessInDoorLockCmds_35:
   \   000128   8882         MOV       DPL,R0
   \   00012A   8983         MOV       DPH,R1
   \   00012C   02....       LJMP      ??CrossCallReturnLabel_167 & 0xFFFF
   \                     ??zclClosures_ProcessInDoorLockCmds_37:
   \   00012F   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_1 & 0xFFFF
    587                  break;
    588          
    589                case COMMAND_CLOSURES_SET_USER_TYPE:
    590                  stat = zclClosures_ProcessInDoorLockSetUserType( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_20:
   \   000132   EC           MOV       A,R4
   \   000133   2426         ADD       A,#0x26
   \   000135   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_31 & 0xFFFF
    591                  break;
    592          
    593                case COMMAND_CLOSURES_GET_USER_TYPE:
    594                  stat = zclClosures_ProcessInDoorLockGetUserType( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_21:
   \   000138   EC           MOV       A,R4
   \   000139   2428         ADD       A,#0x28
   \   00013B   8009         SJMP      ??zclClosures_ProcessInDoorLockCmds_29
    595                  break;
    596          
    597                case COMMAND_CLOSURES_SET_RFID_CODE:
    598                  stat = zclClosures_ProcessInDoorLockSetRFIDCode( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_22:
   \   00013D                ; Setup parameters for call to function zclClosures_ProcessInDoorLockSetRFIDCode
   \   00013D   12....       LCALL     `??zclClosures_ProcessInDoorLockSetRFIDCode::?re`; Banked call to: zclClosures_ProcessInDoorLockSetRFIDCode
   \   000140   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_26 & 0xFFFF
    599                  break;
    600          
    601                case COMMAND_CLOSURES_GET_RFID_CODE:
    602                  stat = zclClosures_ProcessInDoorLockGetRFIDCode( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_23:
   \   000143   EC           MOV       A,R4
   \   000144   242C         ADD       A,#0x2c
   \                     ??zclClosures_ProcessInDoorLockCmds_29:
   \   000146   F582         MOV       DPL,A
   \   000148   E4           CLR       A
   \   000149   3D           ADDC      A,R5
   \   00014A   F583         MOV       DPH,A
   \                     ??zclClosures_ProcessInDoorLockCmds_28:
   \   00014C   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00014F   7011         JNZ       ??zclClosures_ProcessInDoorLockCmds_38
   \   000151   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_1 & 0xFFFF
    603                  break;
    604          
    605                case COMMAND_CLOSURES_CLEAR_RFID_CODE:
    606                  stat = zclClosures_ProcessInDoorLockClearRFIDCode( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_24:
   \   000154   EC           MOV       A,R4
   \   000155   242E         ADD       A,#0x2e
   \   000157   F582         MOV       DPL,A
   \   000159   E4           CLR       A
   \   00015A   3D           ADDC      A,R5
   \   00015B   F583         MOV       DPH,A
   \   00015D   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000160   601E         JZ        ??zclClosures_ProcessInDoorLockCmds_39
   \                     ??zclClosures_ProcessInDoorLockCmds_38:
   \   000162   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000165   FC           MOV       R4,A
   \   000166   A3           INC       DPTR
   \   000167   E0           MOVX      A,@DPTR
   \   000168   F9           MOV       R1,A
   \   000169   EC           MOV       A,R4
   \   00016A   F8           MOV       R0,A
   \   00016B   7403         MOV       A,#0x3
   \   00016D   12....       LCALL     ?XSTACK_DISP0_8
   \   000170   E8           MOV       A,R0
   \   000171   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000174                ; Setup parameters for indirect call
   \   000174   7403         MOV       A,#0x3
   \   000176   12....       LCALL     ?XSTACK_DISP102_8
   \   000179   8E82         MOV       DPL,R6
   \   00017B   8F83         MOV       DPH,R7
   \   00017D   02....       LJMP      ??CrossCallReturnLabel_96 & 0xFFFF
   \                     ??zclClosures_ProcessInDoorLockCmds_39:
   \   000180   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_1 & 0xFFFF
    607                  break;
    608          
    609                case COMMAND_CLOSURES_CLEAR_ALL_RFID_CODES:
    610                  stat = zclClosures_ProcessInDoorLockClearAllRFIDCodes( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_25:
   \   000183   EC           MOV       A,R4
   \   000184   2430         ADD       A,#0x30
   \                     ??zclClosures_ProcessInDoorLockCmds_30:
   \   000186   F582         MOV       DPL,A
   \   000188   E4           CLR       A
   \   000189   3D           ADDC      A,R5
   \   00018A   F583         MOV       DPH,A
    611                  break;
    612          
    613                default:
    614                  // Unknown command
    615                  stat = ZFailure;
    616                  break;
    617              }
    618            }
   \   00018C   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   00018F   E582         MOV       A,DPL
   \   000191   4583         ORL       A,DPH
   \   000193   6003         JZ        $+5
   \   000195   02....       LJMP      ??CrossCallReturnLabel_96 & 0xFFFF
   \   000198                ; Setup parameters for indirect call
   \   000198   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_1 & 0xFFFF
    619            // Server-to-Client
    620            else
    621            {
    622              switch(pInMsg->hdr.commandID)
   \                     ??zclClosures_ProcessInDoorLockCmds_0:
   \   00019B   E0           MOVX      A,@DPTR
   \   00019C   12....       LCALL     ?UC_SWITCH_DENSE
   \                     `?<Jumptable for zclClosures_ProcessInDoorLockC_1`:
   \   00019F   00           DB        0
   \   0001A0   21           DB        33
   \   0001A1   ....         DW        ??zclClosures_ProcessInDoorLockCmds_1
   \   0001A3   ....         DW        ??zclClosures_ProcessInDoorLockCmds_2
   \   0001A5   ....         DW        ??zclClosures_ProcessInDoorLockCmds_2
   \   0001A7   ....         DW        ??zclClosures_ProcessInDoorLockCmds_2
   \   0001A9   ....         DW        ??zclClosures_ProcessInDoorLockCmds_40
   \   0001AB   ....         DW        ??zclClosures_ProcessInDoorLockCmds_41
   \   0001AD   ....         DW        ??zclClosures_ProcessInDoorLockCmds_42
   \   0001AF   ....         DW        ??zclClosures_ProcessInDoorLockCmds_43
   \   0001B1   ....         DW        ??zclClosures_ProcessInDoorLockCmds_44
   \   0001B3   ....         DW        ??zclClosures_ProcessInDoorLockCmds_45
   \   0001B5   ....         DW        ??zclClosures_ProcessInDoorLockCmds_46
   \   0001B7   ....         DW        ??zclClosures_ProcessInDoorLockCmds_47
   \   0001B9   ....         DW        ??zclClosures_ProcessInDoorLockCmds_48
   \   0001BB   ....         DW        ??zclClosures_ProcessInDoorLockCmds_49
   \   0001BD   ....         DW        ??zclClosures_ProcessInDoorLockCmds_50
   \   0001BF   ....         DW        ??zclClosures_ProcessInDoorLockCmds_51
   \   0001C1   ....         DW        ??zclClosures_ProcessInDoorLockCmds_52
   \   0001C3   ....         DW        ??zclClosures_ProcessInDoorLockCmds_53
   \   0001C5   ....         DW        ??zclClosures_ProcessInDoorLockCmds_54
   \   0001C7   ....         DW        ??zclClosures_ProcessInDoorLockCmds_55
   \   0001C9   ....         DW        ??zclClosures_ProcessInDoorLockCmds_56
   \   0001CB   ....         DW        ??zclClosures_ProcessInDoorLockCmds_57
   \   0001CD   ....         DW        ??zclClosures_ProcessInDoorLockCmds_58
   \   0001CF   ....         DW        ??zclClosures_ProcessInDoorLockCmds_59
   \   0001D1   ....         DW        ??zclClosures_ProcessInDoorLockCmds_60
   \   0001D3   ....         DW        ??zclClosures_ProcessInDoorLockCmds_61
   \   0001D5   ....         DW        ??zclClosures_ProcessInDoorLockCmds_62
   \   0001D7   ....         DW        ??zclClosures_ProcessInDoorLockCmds_1
   \   0001D9   ....         DW        ??zclClosures_ProcessInDoorLockCmds_1
   \   0001DB   ....         DW        ??zclClosures_ProcessInDoorLockCmds_1
   \   0001DD   ....         DW        ??zclClosures_ProcessInDoorLockCmds_1
   \   0001DF   ....         DW        ??zclClosures_ProcessInDoorLockCmds_1
   \   0001E1   ....         DW        ??zclClosures_ProcessInDoorLockCmds_1
   \   0001E3   ....         DW        ??zclClosures_ProcessInDoorLockCmds_63
   \   0001E5   ....         DW        ??zclClosures_ProcessInDoorLockCmds_64
    623              {
    624                case COMMAND_CLOSURES_LOCK_DOOR_RSP:
    625                case COMMAND_CLOSURES_UNLOCK_DOOR_RSP:
    626                case COMMAND_CLOSURES_TOGGLE_DOOR_RSP:
    627                  stat = zclClosures_ProcessInDoorLock( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_2:
   \   0001E7                ; Setup parameters for call to function zclClosures_ProcessInDoorLock
   \   0001E7   12....       LCALL     `??zclClosures_ProcessInDoorLock::?relay`; Banked call to: zclClosures_ProcessInDoorLock
   \   0001EA   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_26 & 0xFFFF
    628                  break;
    629          
    630                case COMMAND_CLOSURES_UNLOCK_WITH_TIMEOUT_RSP:
    631                  stat = zclClosures_ProcessInDoorLockUnlockWithTimeoutRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_40:
   \   0001ED   EC           MOV       A,R4
   \   0001EE   2432         ADD       A,#0x32
   \   0001F0   8060         SJMP      ??zclClosures_ProcessInDoorLockCmds_65
    632                  break;
    633          
    634                case COMMAND_CLOSURES_GET_LOG_RECORD_RSP:
    635                  stat = zclClosures_ProcessInDoorLockGetLogRecordRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_41:
   \   0001F2                ; Setup parameters for call to function zclClosures_ProcessInDoorLockGetLogRecordRsp
   \   0001F2   12....       LCALL     `??zclClosures_ProcessInDoorLockGetLogRecordRsp:`; Banked call to: zclClosures_ProcessInDoorLockGetLogRecordRsp
   \   0001F5   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_26 & 0xFFFF
    636                  break;
    637          
    638                case COMMAND_CLOSURES_SET_PIN_CODE_RSP:
    639                  stat = zclClosures_ProcessInDoorLockSetPINCodeRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_42:
   \   0001F8   EC           MOV       A,R4
   \   0001F9   2436         ADD       A,#0x36
   \   0001FB   8055         SJMP      ??zclClosures_ProcessInDoorLockCmds_65
    640                  break;
    641          
    642                case COMMAND_CLOSURES_GET_PIN_CODE_RSP:
    643                  stat = zclClosures_ProcessInDoorLockGetPINCodeRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_43:
   \   0001FD                ; Setup parameters for call to function zclClosures_ProcessInDoorLockGetPINCodeRsp
   \   0001FD   12....       LCALL     `??zclClosures_ProcessInDoorLockGetPINCodeRsp::?`; Banked call to: zclClosures_ProcessInDoorLockGetPINCodeRsp
   \   000200   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_26 & 0xFFFF
    644                  break;
    645          
    646                case COMMAND_CLOSURES_CLEAR_PIN_CODE_RSP:
    647                  stat = zclClosures_ProcessInDoorLockClearPINCodeRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_44:
   \   000203   EC           MOV       A,R4
   \   000204   243A         ADD       A,#0x3a
   \   000206   804A         SJMP      ??zclClosures_ProcessInDoorLockCmds_65
    648                  break;
    649          
    650                case COMMAND_CLOSURES_CLEAR_ALL_PIN_CODES_RSP:
    651                  stat = zclClosures_ProcessInDoorLockClearAllPINCodesRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_45:
   \   000208   EC           MOV       A,R4
   \   000209   243C         ADD       A,#0x3c
   \   00020B   8045         SJMP      ??zclClosures_ProcessInDoorLockCmds_65
    652                  break;
    653          
    654                case COMMAND_CLOSURES_SET_USER_STATUS_RSP:
    655                  stat = zclClosures_ProcessInDoorLockSetUserStatusRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_46:
   \   00020D   EC           MOV       A,R4
   \   00020E   243E         ADD       A,#0x3e
   \   000210   8040         SJMP      ??zclClosures_ProcessInDoorLockCmds_65
    656                  break;
    657          
    658                case COMMAND_CLOSURES_GET_USER_STATUS_RSP:
    659                  stat = zclClosures_ProcessInDoorLockGetUserStatusRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_47:
   \   000212   EC           MOV       A,R4
   \   000213   2440         ADD       A,#0x40
   \                     ??zclClosures_ProcessInDoorLockCmds_31:
   \   000215   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000218   12....       LCALL     ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   00021B   7047         JNZ       ??zclClosures_ProcessInDoorLockCmds_66
   \   00021D   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_1 & 0xFFFF
    660                  break;
    661          
    662                case COMMAND_CLOSURES_SET_WEEK_DAY_SCHEDULE_RSP:
    663                  stat = zclClosures_ProcessInDoorLockSetWeekDayScheduleRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_48:
   \   000220   EC           MOV       A,R4
   \   000221   2442         ADD       A,#0x42
   \   000223   802D         SJMP      ??zclClosures_ProcessInDoorLockCmds_65
    664                  break;
    665          
    666                case COMMAND_CLOSURES_GET_WEEK_DAY_SCHEDULE_RSP:
    667                  stat = zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_49:
   \   000225                ; Setup parameters for call to function zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp
   \   000225   12....       LCALL     ??zclClosures_ProcessInDoorLockGetWeekDaySchedu; Banked call to: zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp
   \   000228   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_26 & 0xFFFF
    668                  break;
    669          
    670                case COMMAND_CLOSURES_CLEAR_WEEK_DAY_SCHEDULE_RSP:
    671                  stat = zclClosures_ProcessInDoorLockClearWeekDayScheduleRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_50:
   \   00022B   EC           MOV       A,R4
   \   00022C   2446         ADD       A,#0x46
   \   00022E   8022         SJMP      ??zclClosures_ProcessInDoorLockCmds_65
    672                  break;
    673          
    674                case COMMAND_CLOSURES_SET_YEAR_DAY_SCHEDULE_RSP:
    675                  stat = zclClosures_ProcessInDoorLockSetYearDayScheduleRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_51:
   \   000230   EC           MOV       A,R4
   \   000231   2448         ADD       A,#0x48
   \   000233   801D         SJMP      ??zclClosures_ProcessInDoorLockCmds_65
    676                  break;
    677          
    678                case COMMAND_CLOSURES_GET_YEAR_DAY_SCHEDULE_RSP:
    679                  stat = zclClosures_ProcessInDoorLockGetYearDayScheduleRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_52:
   \   000235                ; Setup parameters for call to function zclClosures_ProcessInDoorLockGetYearDayScheduleRsp
   \   000235   12....       LCALL     ??zclClosures_ProcessInDoorLockGetYearDaySchedu; Banked call to: zclClosures_ProcessInDoorLockGetYearDayScheduleRsp
   \   000238   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_26 & 0xFFFF
    680                  break;
    681          
    682                case COMMAND_CLOSURES_CLEAR_YEAR_DAY_SCHEDULE_RSP:
    683                  stat = zclClosures_ProcessInDoorLockClearYearDayScheduleRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_53:
   \   00023B   EC           MOV       A,R4
   \   00023C   244C         ADD       A,#0x4c
   \   00023E   8012         SJMP      ??zclClosures_ProcessInDoorLockCmds_65
    684                  break;
    685          
    686                case COMMAND_CLOSURES_SET_HOLIDAY_SCHEDULE_RSP:
    687                  stat = zclClosures_ProcessInDoorLockSetHolidayScheduleRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_54:
   \   000240   EC           MOV       A,R4
   \   000241   244E         ADD       A,#0x4e
   \   000243   800D         SJMP      ??zclClosures_ProcessInDoorLockCmds_65
    688                  break;
    689          
    690                case COMMAND_CLOSURES_GET_HOLIDAY_SCHEDULE_RSP:
    691                  stat = zclClosures_ProcessInDoorLockGetHolidayScheduleRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_55:
   \   000245                ; Setup parameters for call to function zclClosures_ProcessInDoorLockGetHolidayScheduleRsp
   \   000245   12....       LCALL     ??zclClosures_ProcessInDoorLockGetHolidaySchedu; Banked call to: zclClosures_ProcessInDoorLockGetHolidayScheduleRsp
   \   000248   8074         SJMP      ??zclClosures_ProcessInDoorLockCmds_26
    692                  break;
    693          
    694                case COMMAND_CLOSURES_CLEAR_HOLIDAY_SCHEDULE_RSP:
    695                  stat = zclClosures_ProcessInDoorLockClearHolidayScheduleRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_56:
   \   00024A   EC           MOV       A,R4
   \   00024B   2452         ADD       A,#0x52
   \   00024D   8003         SJMP      ??zclClosures_ProcessInDoorLockCmds_65
    696                  break;
    697          
    698                case COMMAND_CLOSURES_SET_USER_TYPE_RSP:
    699                  stat = zclClosures_ProcessInDoorLockSetUserTypeRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_57:
   \   00024F   EC           MOV       A,R4
   \   000250   2454         ADD       A,#0x54
   \                     ??zclClosures_ProcessInDoorLockCmds_65:
   \   000252   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000255   7051         JNZ       ??zclClosures_ProcessInDoorLockCmds_67
   \   000257                ; Setup parameters for indirect call
   \   000257   8069         SJMP      ??zclClosures_ProcessInDoorLockCmds_1
    700                  break;
    701          
    702                case COMMAND_CLOSURES_GET_USER_TYPE_RSP:
    703                  stat = zclClosures_ProcessInDoorLockGetUserTypeRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_58:
   \   000259   EC           MOV       A,R4
   \   00025A   2456         ADD       A,#0x56
   \   00025C   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   00025F   12....       LCALL     ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000262   605E         JZ        ??zclClosures_ProcessInDoorLockCmds_1
   \                     ??zclClosures_ProcessInDoorLockCmds_66:
   \   000264   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000267   F5..         MOV       ?V0,A
   \   000269   A3           INC       DPTR
   \   00026A   E0           MOVX      A,@DPTR
   \   00026B   FD           MOV       R5,A
   \   00026C   E5..         MOV       A,?V0
   \   00026E   85..82       MOV       DPL,?XSP + 0
   \   000271   85..83       MOV       DPH,?XSP + 1
   \   000274   F0           MOVX      @DPTR,A
   \   000275   A3           INC       DPTR
   \   000276   ED           MOV       A,R5
   \   000277   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   00027A   E0           MOVX      A,@DPTR
   \   00027B   C0E0         PUSH      A
   \   00027D   7402         MOV       A,#0x2
   \   00027F   12....       LCALL     ?XSTACK_DISP0_8
   \   000282   D0E0         POP       A
   \   000284   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000287   12....       LCALL     ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   00028A   8025         SJMP      ??CrossCallReturnLabel_96
    704                  break;
    705          
    706                case COMMAND_CLOSURES_SET_RFID_CODE_RSP:
    707                  stat = zclClosures_ProcessInDoorLockSetRFIDCodeRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_59:
   \   00028C   EC           MOV       A,R4
   \   00028D   2458         ADD       A,#0x58
   \   00028F   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000292   602E         JZ        ??zclClosures_ProcessInDoorLockCmds_1
   \   000294                ; Setup parameters for indirect call
   \   000294   8012         SJMP      ??zclClosures_ProcessInDoorLockCmds_67
    708                  break;
    709          
    710                case COMMAND_CLOSURES_GET_RFID_CODE_RSP:
    711                  stat = zclClosures_ProcessInDoorLockGetRFIDCodeRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_60:
   \   000296                ; Setup parameters for call to function zclClosures_ProcessInDoorLockGetRFIDCodeRsp
   \   000296   12....       LCALL     `??zclClosures_ProcessInDoorLockGetRFIDCodeRsp::`; Banked call to: zclClosures_ProcessInDoorLockGetRFIDCodeRsp
   \   000299   8023         SJMP      ??zclClosures_ProcessInDoorLockCmds_26
    712                  break;
    713          
    714                case COMMAND_CLOSURES_CLEAR_RFID_CODE_RSP:
    715                  stat = zclClosures_ProcessInDoorLockClearRFIDCodeRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_61:
   \   00029B   EC           MOV       A,R4
   \   00029C   245C         ADD       A,#0x5c
   \   00029E   8003         SJMP      ??zclClosures_ProcessInDoorLockCmds_68
    716                  break;
    717          
    718                case COMMAND_CLOSURES_CLEAR_ALL_RFID_CODES_RSP:
    719                  stat = zclClosures_ProcessInDoorLockClearAllRFIDCodesRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_62:
   \   0002A0   EC           MOV       A,R4
   \   0002A1   245E         ADD       A,#0x5e
   \                     ??zclClosures_ProcessInDoorLockCmds_68:
   \   0002A3   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   0002A6   601A         JZ        ??zclClosures_ProcessInDoorLockCmds_1
   \   0002A8                ; Setup parameters for indirect call
   \                     ??zclClosures_ProcessInDoorLockCmds_67:
   \   0002A8   85..82       MOV       DPL,?V0
   \   0002AB   85..83       MOV       DPH,?V1
   \   0002AE   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0002B1   12....       LCALL     ?CALL_IND
   \   0002B4   8008         SJMP      ??zclClosures_ProcessInDoorLockCmds_26
    720                  break;
    721          
    722                case COMMAND_CLOSURES_OPERATION_EVENT_NOTIFICATION:
    723                  stat = zclClosures_ProcessInDoorLockOperationEventNotification( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_63:
   \   0002B6                ; Setup parameters for call to function zclClosures_ProcessInDoorLockOperationEventNotification
   \   0002B6   12....       LCALL     ??zclClosures_ProcessInDoorLockOperationEventNo; Banked call to: zclClosures_ProcessInDoorLockOperationEventNotification
   \   0002B9   8003         SJMP      ??zclClosures_ProcessInDoorLockCmds_26
    724                  break;
    725          
    726                case COMMAND_CLOSURES_PROGRAMMING_EVENT_NOTIFICATION:
    727                  stat = zclClosures_ProcessInDoorLockProgrammingEventNotification( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_64:
   \   0002BB                ; Setup parameters for call to function zclClosures_ProcessInDoorLockProgrammingEventNotification
   \   0002BB   12....       LCALL     ??zclClosures_ProcessInDoorLockProgrammingEvent; Banked call to: zclClosures_ProcessInDoorLockProgrammingEventNotification
   \                     ??zclClosures_ProcessInDoorLockCmds_26:
   \   0002BE   E9           MOV       A,R1
   \   0002BF   F9           MOV       R1,A
    728                  break;
   \   0002C0   8002         SJMP      ??zclClosures_ProcessInDoorLockCmds_69
    729          
    730                default:
    731                  // Unknown command
    732                  stat = ZFailure;
   \                     ??zclClosures_ProcessInDoorLockCmds_1:
   \   0002C2   7901         MOV       R1,#0x1
    733                  break;
    734              }
    735            }
    736          
    737            return ( stat );
   \                     ??zclClosures_ProcessInDoorLockCmds_69:
   \   0002C4   7406         MOV       A,#0x6
   \   0002C6   02....       LJMP      ??Subroutine174_0 & 0xFFFF
    738          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   3D           ADDC      A,R5
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   FE           MOV       R6,A
   \   000006   E9           MOV       A,R1
   \   000007   FF           MOV       R7,A
   \   000008   8E82         MOV       DPL,R6
   \   00000A   8F83         MOV       DPH,R7
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000009   F583         MOV       DPH,A
   \   00000B   8C82         MOV       DPL,R4
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000003   4F           ORL       A,R7
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine125_0
   \   000006                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3D           ADDC      A,R5
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine126_0
   \   000006                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000003   FC           MOV       R4,A
   \   000004   E9           MOV       A,R1
   \   000005   FD           MOV       R5,A
   \   000006   EC           MOV       A,R4
   \   000007   4D           ORL       A,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003   F9           MOV       R1,A
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   3D           ADDC      A,R5
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   8983         MOV       DPH,R1
   \   000008                REQUIRE ??Subroutine128_0
   \   000008                ; // Fall through to label ??Subroutine128_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001   AC..         MOV       R4,?XSP + 0
   \   000003   AD..         MOV       R5,?XSP + 1
   \   000005   8E82         MOV       DPL,R6
   \   000007   8F83         MOV       DPH,R7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine146_0:
   \   000000   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000003   FD           MOV       R5,A
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine152_0:
   \   000000   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine174_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F02         MOV       R7,#0x2
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA
    739          
    740          /*********************************************************************
    741           * @fn      zclClosures_ProcessInDoorLock
    742           *
    743           * @brief   Process in the received Door Lock cmds
    744           *
    745           * @param   pInMsg - pointer to the incoming message
    746           * @param   pCBs - pointer to the application callbacks
    747           *
    748           * @return  ZStatus_t
    749           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    750          static ZStatus_t zclClosures_ProcessInDoorLock( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLock:
    751                                                          zclClosures_DoorLockAppCallbacks_t *pCBs )
    752          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
    753            ZStatus_t status;
    754          
    755            // Client-to-Server
    756            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   000012   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000015   8E82         MOV       DPL,R6
   \   000017   8F83         MOV       DPH,R7
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   5408         ANL       A,#0x8
   \   00001E   8E82         MOV       DPL,R6
   \   000020   8F83         MOV       DPH,R7
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   707F         JNZ       ??zclClosures_ProcessInDoorLock_0
    757            {
    758              switch(pInMsg->hdr.commandID)
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   6009         JZ        ??zclClosures_ProcessInDoorLock_1
   \   00002E   14           DEC       A
   \   00002F   6006         JZ        ??zclClosures_ProcessInDoorLock_1
   \   000031   14           DEC       A
   \   000032   6003         JZ        $+5
   \   000034   02....       LJMP      ??zclClosures_ProcessInDoorLock_2 & 0xFFFF
    759              {
    760                case COMMAND_CLOSURES_LOCK_DOOR:
    761                case COMMAND_CLOSURES_UNLOCK_DOOR:
    762                case COMMAND_CLOSURES_TOGGLE_DOOR:
    763                  if ( pCBs->pfnDoorLock )
   \                     ??zclClosures_ProcessInDoorLock_1:
   \   000037   8C82         MOV       DPL,R4
   \   000039   8D83         MOV       DPH,R5
   \   00003B   12....       LCALL     ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   00003E   7003         JNZ       $+5
   \   000040   02....       LJMP      ??zclClosures_ProcessInDoorLock_2 & 0xFFFF
    764                  {
    765                    uint8 i;
    766                    uint8 calculatedArrayLen;
    767                    zclDoorLock_t cmd;
    768          
    769                    // first octet of PIN/RFID Code variable string identifies its length
    770                    calculatedArrayLen = pInMsg->pData[0] + 1; // add first byte of string
   \   000043   85..82       MOV       DPL,?V2
   \   000046   85..83       MOV       DPH,?V3
   \   000049   12....       LCALL     ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   00004C   F5..         MOV       ?V4,A
    771          
    772                    cmd.pPinRfidCode = zcl_mem_alloc( calculatedArrayLen );
   \   00004E                ; Setup parameters for call to function osal_mem_alloc
   \   00004E   FA           MOV       R2,A
   \   00004F   7B00         MOV       R3,#0x0
   \   000051   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000054   85..82       MOV       DPL,?XSP + 0
   \   000057   85..83       MOV       DPH,?XSP + 1
   \   00005A   EA           MOV       A,R2
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   EB           MOV       A,R3
   \   00005E   F0           MOVX      @DPTR,A
    773          
    774                    if ( !cmd.pPinRfidCode )
   \   00005F   85..82       MOV       DPL,?XSP + 0
   \   000062   85..83       MOV       DPH,?XSP + 1
   \   000065   12....       LCALL     ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000068   7004         JNZ       ??zclClosures_ProcessInDoorLock_3
    775                    {
    776                      return ( ZMemError );  // no memory
   \   00006A   7910         MOV       R1,#0x10
   \   00006C   8060         SJMP      ??zclClosures_ProcessInDoorLock_4
    777                    }
    778          
    779                    for ( i = 0; i < calculatedArrayLen; i++ )
   \                     ??zclClosures_ProcessInDoorLock_3:
   \   00006E   7A00         MOV       R2,#0x0
   \   000070   801A         SJMP      ??zclClosures_ProcessInDoorLock_5
    780                    {
    781                      cmd.pPinRfidCode[i] = pInMsg->pData[i];
   \                     ??zclClosures_ProcessInDoorLock_6:
   \   000072   EA           MOV       A,R2
   \   000073   F8           MOV       R0,A
   \   000074   85..82       MOV       DPL,?V2
   \   000077   85..83       MOV       DPH,?V3
   \   00007A   12....       LCALL     ?Subroutine49 & 0xFFFF
    782                    }
   \                     ??CrossCallReturnLabel_114:
   \   00007D   C0E0         PUSH      A
   \   00007F   85..82       MOV       DPL,?XSP + 0
   \   000082   85..83       MOV       DPH,?XSP + 1
   \   000085   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000088   D0E0         POP       A
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   0A           INC       R2
   \                     ??zclClosures_ProcessInDoorLock_5:
   \   00008C   EA           MOV       A,R2
   \   00008D   C3           CLR       C
   \   00008E   95..         SUBB      A,?V4
   \   000090   40E0         JC        ??zclClosures_ProcessInDoorLock_6
    783          
    784                    status = ( pCBs->pfnDoorLock( pInMsg, &cmd ) );
   \   000092                ; Setup parameters for indirect call
   \   000092   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   000095   12....       LCALL     ?CALL_IND
   \   000098   E9           MOV       A,R1
   \   000099   FE           MOV       R6,A
    785                    zcl_mem_free( cmd.pPinRfidCode );
   \   00009A                ; Setup parameters for call to function osal_mem_free
   \   00009A   85..82       MOV       DPL,?XSP + 0
   \   00009D   85..83       MOV       DPH,?XSP + 1
   \   0000A0   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000A3   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    786                    return status;
   \   0000A6   EE           MOV       A,R6
   \   0000A7   F9           MOV       R1,A
   \   0000A8   8024         SJMP      ??zclClosures_ProcessInDoorLock_4
    787                  }
    788          
    789                  return ( ZCL_STATUS_FAILURE );
    790                  break;
    791          
    792                default:
    793                  return ( ZFailure );   // Error ignore the command
    794              }
    795            }
    796            // Server-to-Client
    797            else
    798            {
    799              switch(pInMsg->hdr.commandID)
   \                     ??zclClosures_ProcessInDoorLock_0:
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   6006         JZ        ??zclClosures_ProcessInDoorLock_7
   \   0000AD   14           DEC       A
   \   0000AE   6003         JZ        ??zclClosures_ProcessInDoorLock_7
   \   0000B0   14           DEC       A
   \   0000B1   7019         JNZ       ??zclClosures_ProcessInDoorLock_2
    800              {
    801                case COMMAND_CLOSURES_LOCK_DOOR_RSP:
    802                case COMMAND_CLOSURES_UNLOCK_DOOR_RSP:
    803                case COMMAND_CLOSURES_TOGGLE_DOOR_RSP:
    804                  if ( pCBs->pfnDoorLockRsp )
   \                     ??zclClosures_ProcessInDoorLock_7:
   \   0000B3   8C82         MOV       DPL,R4
   \   0000B5   8D83         MOV       DPH,R5
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   0000BC   600E         JZ        ??zclClosures_ProcessInDoorLock_2
    805                  {
    806                    return ( pCBs->pfnDoorLockRsp( pInMsg, pInMsg->pData[0] ) );
   \   0000BE                ; Setup parameters for indirect call
   \   0000BE   85..82       MOV       DPL,?V2
   \   0000C1   85..83       MOV       DPH,?V3
   \   0000C4   12....       LCALL     ?Subroutine40 & 0xFFFF
    807                  }
   \                     ??CrossCallReturnLabel_97:
   \   0000C7   12....       LCALL     ?CALL_IND
   \   0000CA   8002         SJMP      ??zclClosures_ProcessInDoorLock_4
    808          
    809                  return ( ZCL_STATUS_FAILURE );
    810                  break;
    811          
    812                default:
    813                  return ( ZFailure );   // Error ignore the command
   \                     ??zclClosures_ProcessInDoorLock_2:
   \   0000CC   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLock_4:
   \   0000CE   7402         MOV       A,#0x2
   \   0000D0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D3   7F05         MOV       R7,#0x5
   \   0000D5   02....       LJMP      ?BANKED_LEAVE_XDATA
    814              }
    815            }
    816          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   EE           MOV       A,R6
   \   000001   2408         ADD       A,#0x8
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F9           MOV       R1,A
   \   000007   88..         MOV       ?V2,R0
   \   000009   89..         MOV       ?V3,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   AC..         MOV       R4,?XSP + 0
   \   000002   AD..         MOV       R5,?XSP + 1
   \   000004   EE           MOV       A,R6
   \   000005   FA           MOV       R2,A
   \   000006   EF           MOV       A,R7
   \   000007   FB           MOV       R3,A
   \   000008   85..82       MOV       DPL,?V0
   \   00000B   85..83       MOV       DPH,?V1
   \   00000E                REQUIRE ??Subroutine152_0
   \   00000E                ; // Fall through to label ??Subroutine152_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   FB           MOV       R3,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   8B82         MOV       DPL,R3
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine162_0:
   \   000000   12....       LCALL     ??Subroutine171_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine171_0:
   \   000000   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   000003   04           INC       A
   \   000004   22           RET
    817          
    818          /*********************************************************************
    819           * @fn      zclClosures_ProcessInDoorLockUnlockWithTimeout
    820           *
    821           * @brief   Process in the received Unlock With Timeout cmd
    822           *
    823           * @param   pInMsg - pointer to the incoming message
    824           * @param   pCBs - pointer to the application callbacks
    825           *
    826           * @return  ZStatus_t
    827           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    828          static ZStatus_t zclClosures_ProcessInDoorLockUnlockWithTimeout( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockUnlockWithTimeout:
    829                                                                           zclClosures_DoorLockAppCallbacks_t *pCBs )
    830          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    831            ZStatus_t status;
    832          
    833            if ( pCBs->pfnDoorLockUnlockWithTimeout )
   \   00000E   EC           MOV       A,R4
   \   00000F   2404         ADD       A,#0x4
   \   000011   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   000014   607C         JZ        ??zclClosures_ProcessInDoorLockUnlockWithTimeou_1
    834            {
    835              uint8 i;
    836              uint8 offset;
    837              uint8 calculatedArrayLen;
    838              zclDoorLockUnlockTimeout_t cmd;
    839          
    840              // first octet of PIN/RFID Code variable string identifies its length
    841              calculatedArrayLen = pInMsg->pData[2] + 1;  // add first byte of string
   \   000016   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000019   8882         MOV       DPL,R0
   \   00001B   F583         MOV       DPH,A
   \   00001D   12....       LCALL     ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   04           INC       A
   \   000024   F5..         MOV       ?V4,A
    842          
    843              cmd.pPinRfidCode = zcl_mem_alloc( calculatedArrayLen );
   \   000026                ; Setup parameters for call to function osal_mem_alloc
   \   000026   FA           MOV       R2,A
   \   000027   7B00         MOV       R3,#0x0
   \   000029   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002C   8A..         MOV       ?V6,R2
   \   00002E   8B..         MOV       ?V7,R3
   \   000030   A8..         MOV       R0,?V6
   \   000032   A9..         MOV       R1,?V7
   \   000034   7402         MOV       A,#0x2
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   12....       LCALL     ?Subroutine61 & 0xFFFF
    844              if ( !cmd.pPinRfidCode )
   \                     ??CrossCallReturnLabel_140:
   \   00003C   7004         JNZ       ??zclClosures_ProcessInDoorLockUnlockWithTimeou_2
    845              {
    846                return ( ZMemError );  // no memory
   \   00003E   7910         MOV       R1,#0x10
   \   000040   8052         SJMP      ??zclClosures_ProcessInDoorLockUnlockWithTimeou_3
    847              }
    848          
    849              cmd.timeout = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \                     ??zclClosures_ProcessInDoorLockUnlockWithTimeou_2:
   \   000042   85..82       MOV       DPL,?V2
   \   000045   85..83       MOV       DPH,?V3
   \   000048   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   00004B   FA           MOV       R2,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F9           MOV       R1,A
   \   00004F   EA           MOV       A,R2
   \   000050   12....       LCALL     ?Subroutine77 & 0xFFFF
    850              offset = 2;
   \                     ??CrossCallReturnLabel_287:
   \   000053   7902         MOV       R1,#0x2
    851              for ( i = 0; i < calculatedArrayLen; i++ )
   \   000055   7800         MOV       R0,#0x0
   \   000057   801C         SJMP      ??zclClosures_ProcessInDoorLockUnlockWithTimeou_4
    852              {
    853                cmd.pPinRfidCode[i] = pInMsg->pData[offset++];
   \                     ??zclClosures_ProcessInDoorLockUnlockWithTimeou_5:
   \   000059   E9           MOV       A,R1
   \   00005A   FA           MOV       R2,A
   \   00005B   85..82       MOV       DPL,?V2
   \   00005E   85..83       MOV       DPH,?V3
   \   000061   12....       LCALL     ??Subroutine168_0 & 0xFFFF
    854              }
   \                     ??CrossCallReturnLabel_419:
   \   000064   C0E0         PUSH      A
   \   000066   E8           MOV       A,R0
   \   000067   FA           MOV       R2,A
   \   000068   7402         MOV       A,#0x2
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000070   D0E0         POP       A
   \   000072   F0           MOVX      @DPTR,A
   \   000073   09           INC       R1
   \   000074   08           INC       R0
   \                     ??zclClosures_ProcessInDoorLockUnlockWithTimeou_4:
   \   000075   E8           MOV       A,R0
   \   000076   C3           CLR       C
   \   000077   95..         SUBB      A,?V4
   \   000079   40DE         JC        ??zclClosures_ProcessInDoorLockUnlockWithTimeou_5
    855          
    856              status = ( pCBs->pfnDoorLockUnlockWithTimeout( pInMsg, &cmd ) );
   \   00007B                ; Setup parameters for indirect call
   \   00007B   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   00007E   12....       LCALL     ?CALL_IND
   \   000081   E9           MOV       A,R1
   \   000082   FE           MOV       R6,A
    857              zcl_mem_free( cmd.pPinRfidCode );
   \   000083                ; Setup parameters for call to function osal_mem_free
   \   000083   7402         MOV       A,#0x2
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00008B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    858              return status;
   \   00008E   EE           MOV       A,R6
   \   00008F   F9           MOV       R1,A
   \   000090   8002         SJMP      ??zclClosures_ProcessInDoorLockUnlockWithTimeou_3
    859            }
    860          
    861            return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockUnlockWithTimeou_1:
   \   000092   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockUnlockWithTimeou_3:
   \   000094   7404         MOV       A,#0x4
   \   000096   80..         SJMP      ??Subroutine127_0
    862          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine129_0
   \   000006                ; // Fall through to label ??Subroutine129_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   3D           ADDC      A,R5
   \   000003   F9           MOV       R1,A
   \   000004   88..         MOV       ?V0,R0
   \   000006   89..         MOV       ?V1,R1
   \   000008   8882         MOV       DPL,R0
   \   00000A                REQUIRE ??Subroutine143_0
   \   00000A                ; // Fall through to label ??Subroutine143_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine143_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine144_0
   \   000002                ; // Fall through to label ??Subroutine144_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2A           ADD       A,R2
   \   000002   FC           MOV       R4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   8C82         MOV       DPL,R4
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine168_0:
   \   000000   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    863          
    864          /*********************************************************************
    865           * @fn      zclClosures_ProcessInDoorLockGetLogRecord
    866           *
    867           * @brief   Process in the received Get Log Record cmd
    868           *
    869           * @param   pInMsg - pointer to the incoming message
    870           * @param   pCBs - pointer to the application callbacks
    871           *
    872           * @return  ZStatus_t
    873           */
    874          static ZStatus_t zclClosures_ProcessInDoorLockGetLogRecord( zclIncoming_t *pInMsg,
    875                                                                      zclClosures_DoorLockAppCallbacks_t *pCBs )
    876          {
    877            if ( pCBs->pfnDoorLockGetLogRecord )
    878            {
    879              zclDoorLockGetLogRecord_t cmd;
    880          
    881              cmd.logIndex = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
    882          
    883              return ( pCBs->pfnDoorLockGetLogRecord( pInMsg, &cmd ) );
    884            }
    885          
    886            return ( ZFailure );
    887          }
    888          
    889          /*********************************************************************
    890           * @fn      zclClosures_ProcessInDoorLockSetPINCode
    891           *
    892           * @brief   Process in the received Set PIN Code cmd
    893           *
    894           * @param   pInMsg - pointer to the incoming message
    895           * @param   pCBs - pointer to the application callbacks
    896           *
    897           * @return  ZStatus_t
    898           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7406         MOV       A,#0x6
   \   000002                REQUIRE ??Subroutine127_0
   \   000002                ; // Fall through to label ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    899          static ZStatus_t zclClosures_ProcessInDoorLockSetPINCode( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockSetPINCode:
    900                                                                    zclClosures_DoorLockAppCallbacks_t *pCBs )
    901          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    902           if ( pCBs->pfnDoorLockSetPINCode )
   \   00000E   EC           MOV       A,R4
   \   00000F   2408         ADD       A,#0x8
   \   000011   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000014   6072         JZ        ??zclClosures_ProcessInDoorLockSetPINCode_0
    903           {
    904              uint8 i;
    905              uint8 offset;
    906              uint8 calculatedArrayLen;
    907              zclDoorLockSetPINCode_t cmd;
    908              ZStatus_t status;
    909          
    910              // first octet of PIN/RFID Code variable string identifies its length
    911              calculatedArrayLen = pInMsg->pData[4] + 1; // add first byte of string
   \   000016   12....       LCALL     ?Subroutine20 & 0xFFFF
    912          
    913              cmd.pPIN = zcl_mem_alloc( calculatedArrayLen );
   \                     ??CrossCallReturnLabel_51:
   \   000019   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001C   8A..         MOV       ?V6,R2
   \   00001E   8B..         MOV       ?V7,R3
   \   000020   A8..         MOV       R0,?V6
   \   000022   A9..         MOV       R1,?V7
   \   000024   7404         MOV       A,#0x4
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   12....       LCALL     ?Subroutine61 & 0xFFFF
    914              if ( !cmd.pPIN )
   \                     ??CrossCallReturnLabel_141:
   \   00002C   7004         JNZ       ??zclClosures_ProcessInDoorLockSetPINCode_1
    915              {
    916                return ( ZMemError );  // no memory
   \   00002E   7910         MOV       R1,#0x10
   \   000030   8058         SJMP      ??zclClosures_ProcessInDoorLockSetPINCode_2
    917              }
    918          
    919              cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \                     ??zclClosures_ProcessInDoorLockSetPINCode_1:
   \   000032   12....       LCALL     ?Subroutine11 & 0xFFFF
    920              cmd.userStatus = pInMsg->pData[2];
   \                     ??CrossCallReturnLabel_4:
   \   000035   C0E0         PUSH      A
   \   000037   7402         MOV       A,#0x2
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   D0E0         POP       A
   \   00003E   12....       LCALL     ?Subroutine24 & 0xFFFF
    921              cmd.userType = pInMsg->pData[3];
   \                     ??CrossCallReturnLabel_61:
   \   000041   C0E0         PUSH      A
   \   000043   7403         MOV       A,#0x3
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   D0E0         POP       A
   \   00004A   12....       LCALL     ?Subroutine73 & 0xFFFF
    922              offset = 4;
    923              for ( i = 0; i < calculatedArrayLen; i++ )
   \                     ??CrossCallReturnLabel_168:
   \   00004D   801C         SJMP      ??zclClosures_ProcessInDoorLockSetPINCode_3
    924              {
    925                cmd.pPIN[i] = pInMsg->pData[offset++];
   \                     ??zclClosures_ProcessInDoorLockSetPINCode_4:
   \   00004F   E9           MOV       A,R1
   \   000050   FA           MOV       R2,A
   \   000051   85..82       MOV       DPL,?V2
   \   000054   85..83       MOV       DPH,?V3
   \   000057   12....       LCALL     ??Subroutine168_0 & 0xFFFF
    926              }
   \                     ??CrossCallReturnLabel_420:
   \   00005A   C0E0         PUSH      A
   \   00005C   E8           MOV       A,R0
   \   00005D   FA           MOV       R2,A
   \   00005E   7404         MOV       A,#0x4
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000066   D0E0         POP       A
   \   000068   F0           MOVX      @DPTR,A
   \   000069   09           INC       R1
   \   00006A   08           INC       R0
   \                     ??zclClosures_ProcessInDoorLockSetPINCode_3:
   \   00006B   E8           MOV       A,R0
   \   00006C   C3           CLR       C
   \   00006D   95..         SUBB      A,?V4
   \   00006F   40DE         JC        ??zclClosures_ProcessInDoorLockSetPINCode_4
    927          
    928              status = ( pCBs->pfnDoorLockSetPINCode( pInMsg, &cmd ) );
   \   000071                ; Setup parameters for indirect call
   \   000071   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000074   12....       LCALL     ?CALL_IND
   \   000077   E9           MOV       A,R1
   \   000078   FE           MOV       R6,A
    929              zcl_mem_free( cmd.pPIN );
   \   000079                ; Setup parameters for call to function osal_mem_free
   \   000079   7404         MOV       A,#0x4
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000081   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    930              return status;
   \   000084   EE           MOV       A,R6
   \   000085   F9           MOV       R1,A
   \   000086   8002         SJMP      ??zclClosures_ProcessInDoorLockSetPINCode_2
    931           }
    932          
    933           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockSetPINCode_0:
   \   000088   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockSetPINCode_2:
   \   00008A   02....       LJMP      ?Subroutine2 & 0xFFFF
    934          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   7904         MOV       R1,#0x4
   \   000003   7800         MOV       R0,#0x0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000003   8882         MOV       DPL,R0
   \   000005   F583         MOV       DPH,A
   \   000007   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   04           INC       A
   \   00000D   F5..         MOV       ?V4,A
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   FA           MOV       R2,A
   \   000010   7B00         MOV       R3,#0x0
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000009   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   00000C   FB           MOV       R3,A
   \   00000D   EC           MOV       A,R4
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000017   E0           MOVX      A,@DPTR
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   EB           MOV       A,R3
   \   000003                REQUIRE ??Subroutine145_0
   \   000003                ; // Fall through to label ??Subroutine145_0
    935          
    936          /*********************************************************************
    937           * @fn      zclClosures_ProcessInDoorLockGetPINCode
    938           *
    939           * @brief   Process in the received Get PIN Code cmd
    940           *
    941           * @param   pInMsg - pointer to the incoming message
    942           * @param   pCBs - pointer to the application callbacks
    943           *
    944           * @return  ZStatus_t
    945           */
    946          static ZStatus_t zclClosures_ProcessInDoorLockGetPINCode( zclIncoming_t *pInMsg,
    947                                                                    zclClosures_DoorLockAppCallbacks_t *pCBs )
    948          {
    949           if ( pCBs->pfnDoorLockGetPINCode )
    950           {
    951             zclDoorLockUserID_t cmd;
    952          
    953             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
    954          
    955             return ( pCBs->pfnDoorLockGetPINCode( pInMsg, &cmd ) );
    956           }
    957          
    958           return ( ZFailure );
    959          }
    960          
    961          /*********************************************************************
    962           * @fn      zclClosures_ProcessInDoorLockClearPINCode
    963           *
    964           * @brief   Process in the received Clear PIN Code cmd
    965           *
    966           * @param   pInMsg - pointer to the incoming message
    967           * @param   pCBs - pointer to the application callbacks
    968           *
    969           * @return  ZStatus_t
    970           */
    971          static ZStatus_t zclClosures_ProcessInDoorLockClearPINCode( zclIncoming_t *pInMsg,
    972                                                                      zclClosures_DoorLockAppCallbacks_t *pCBs )
    973          {
    974           if ( pCBs->pfnDoorLockClearPINCode )
    975           {
    976             zclDoorLockUserID_t cmd;
    977          
    978             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
    979          
    980             return ( pCBs->pfnDoorLockClearPINCode( pInMsg, &cmd ) );
    981           }
    982          
    983           return ( ZFailure );
    984          }
    985          
    986          /*********************************************************************
    987           * @fn      zclClosures_ProcessInDoorLockClearAllPINCodes
    988           *
    989           * @brief   Process in the received Clear All PIN Codes cmd
    990           *
    991           * @param   pInMsg - pointer to the incoming message
    992           * @param   pCBs - pointer to the application callbacks
    993           *
    994           * @return  ZStatus_t
    995           */
    996          static ZStatus_t zclClosures_ProcessInDoorLockClearAllPINCodes( zclIncoming_t *pInMsg,
    997                                                                          zclClosures_DoorLockAppCallbacks_t *pCBs )
    998          {
    999           if ( pCBs->pfnDoorLockClearAllPINCodes )
   1000           {
   1001             // no payload
   1002          
   1003             return ( pCBs->pfnDoorLockClearAllPINCodes( pInMsg ) );
   1004           }
   1005          
   1006           return ( ZFailure );
   1007          }
   1008          
   1009          /*********************************************************************
   1010           * @fn      zclClosures_ProcessInDoorLockSetUserStatus
   1011           *
   1012           * @brief   Process in the received Set User Status cmd
   1013           *
   1014           * @param   pInMsg - pointer to the incoming message
   1015           * @param   pCBs - pointer to the application callbacks
   1016           *
   1017           * @return  ZStatus_t
   1018           */
   1019          static ZStatus_t zclClosures_ProcessInDoorLockSetUserStatus( zclIncoming_t *pInMsg,
   1020                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs )
   1021          {
   1022           if ( pCBs->pfnDoorLockSetUserStatus )
   1023           {
   1024             zclDoorLockSetUserStatus_t cmd;
   1025          
   1026             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1027             cmd.userStatus = pInMsg->pData[2];
   1028          
   1029             return ( pCBs->pfnDoorLockSetUserStatus( pInMsg, &cmd ) );
   1030           }
   1031          
   1032           return ( ZFailure );
   1033          }
   1034          
   1035          /*********************************************************************
   1036           * @fn      zclClosures_ProcessInDoorLockGetUserStatus
   1037           *
   1038           * @brief   Process in the received Get User Status cmd
   1039           *
   1040           * @param   pInMsg - pointer to the incoming message
   1041           * @param   pCBs - pointer to the application callbacks
   1042           *
   1043           * @return  ZStatus_t
   1044           */
   1045          static ZStatus_t zclClosures_ProcessInDoorLockGetUserStatus( zclIncoming_t *pInMsg,
   1046                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs )
   1047          {
   1048           if ( pCBs->pfnDoorLockGetUserStatus )
   1049           {
   1050             zclDoorLockUserID_t cmd;
   1051          
   1052             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1053          
   1054             return ( pCBs->pfnDoorLockGetUserStatus( pInMsg, &cmd ) );
   1055           }
   1056          
   1057           return ( ZFailure );
   1058          }
   1059          
   1060          /*********************************************************************
   1061           * @fn      zclClosures_ProcessInDoorLockSetWeekDaySchedule
   1062           *
   1063           * @brief   Process in the received Set Week Day Schedule cmd
   1064           *
   1065           * @param   pInMsg - pointer to the incoming message
   1066           * @param   pCBs - pointer to the application callbacks
   1067           *
   1068           * @return  ZStatus_t
   1069           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1070          static ZStatus_t zclClosures_ProcessInDoorLockSetWeekDaySchedule( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockSetWeekDaySchedule:
   1071                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs )
   1072          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1073           if ( pCBs->pfnDoorLockSetWeekDaySchedule )
   \   00000A   EC           MOV       A,R4
   \   00000B   2414         ADD       A,#0x14
   \   00000D   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000010   605D         JZ        ??zclClosures_ProcessInDoorLockSetWeekDaySchedu_1
   1074           {
   1075             zclDoorLockSetWeekDaySchedule_t cmd;
   1076          
   1077             cmd.scheduleID = pInMsg->pData[0];
   \   000012   12....       LCALL     ?Subroutine21 & 0xFFFF
   1078             cmd.userID = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   \                     ??CrossCallReturnLabel_55:
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   12....       LCALL     ?Subroutine64 & 0xFFFF
   1079             cmd.daysMask = pInMsg->pData[3];
   \                     ??CrossCallReturnLabel_150:
   \   00001B   C0E0         PUSH      A
   \   00001D   7403         MOV       A,#0x3
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   D0E0         POP       A
   \   000024   F0           MOVX      @DPTR,A
   1080             cmd.startHour = pInMsg->pData[4];
   \   000025   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000028   C0E0         PUSH      A
   \   00002A   7404         MOV       A,#0x4
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   D0E0         POP       A
   \   000031   12....       LCALL     ?Subroutine41 & 0xFFFF
   1081             cmd.startMinute = pInMsg->pData[5];
   \                     ??CrossCallReturnLabel_98:
   \   000034   C0E0         PUSH      A
   \   000036   7405         MOV       A,#0x5
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   D0E0         POP       A
   \   00003D   12....       LCALL     ?Subroutine42 & 0xFFFF
   1082             cmd.endHour = pInMsg->pData[6];
   \                     ??CrossCallReturnLabel_100:
   \   000040   C0E0         PUSH      A
   \   000042   7406         MOV       A,#0x6
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   D0E0         POP       A
   \   000049   12....       LCALL     ?Subroutine71 & 0xFFFF
   1083             cmd.endMinute = pInMsg->pData[7];
   \                     ??CrossCallReturnLabel_164:
   \   00004C   2407         ADD       A,#0x7
   \   00004E   F582         MOV       DPL,A
   \   000050   E4           CLR       A
   \   000051   3C           ADDC      A,R4
   \   000052   F583         MOV       DPH,A
   \   000054   E0           MOVX      A,@DPTR
   \   000055   C0E0         PUSH      A
   \   000057   7407         MOV       A,#0x7
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   D0E0         POP       A
   \   00005E   F0           MOVX      @DPTR,A
   1084          
   1085             return ( pCBs->pfnDoorLockSetWeekDaySchedule( pInMsg, &cmd ) );
   \   00005F                ; Setup parameters for indirect call
   \   00005F   AC..         MOV       R4,?XSP + 0
   \   000061   AD..         MOV       R5,?XSP + 1
   \   000063   8882         MOV       DPL,R0
   \   000065   8983         MOV       DPH,R1
   \   000067   12....       LCALL     ??Subroutine152_0 & 0xFFFF
   1086           }
   \                     ??CrossCallReturnLabel_364:
   \   00006A   12....       LCALL     ?CALL_IND
   \   00006D   8002         SJMP      ??zclClosures_ProcessInDoorLockSetWeekDaySchedu_2
   1087          
   1088           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockSetWeekDaySchedu_1:
   \   00006F   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockSetWeekDaySchedu_2:
   \   000071                REQUIRE ?Subroutine8
   \   000071                ; // Fall through to label ?Subroutine8
   1089          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7408         MOV       A,#0x8
   \   000002   02....       LJMP      ??Subroutine163_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000003   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   000006   CC           XCH       A,R4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   E5..         MOV       A,?V0
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E5..         MOV       A,?V1
   \   000006   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000003   2406         ADD       A,#0x6
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   3E           ADDC      A,R6
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   E0           MOVX      A,@DPTR
   \   000006   FE           MOV       R6,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   CE           XCH       A,R6
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   EA           MOV       A,R2
   \   000001   2408         ADD       A,#0x8
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   FD           MOV       R5,A
   \   000007   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FE           MOV       R6,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FF           MOV       R7,A
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V2,A
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000028   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   8C82         MOV       DPL,R4
   \   000002   8D83         MOV       DPH,R5
   \   000004   E0           MOVX      A,@DPTR
   \   000005   FE           MOV       R6,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F583         MOV       DPH,A
   \   00000A   8E82         MOV       DPL,R6
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F5..         MOV       ?V1,A
   \   000005   E5..         MOV       A,?V2
   \   000007   F5..         MOV       ?V0,A
   \   000009   7401         MOV       A,#0x1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine163_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine164_0
   \   000003                ; // Fall through to label ??Subroutine164_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   22           RET
   1090          
   1091          /*********************************************************************
   1092           * @fn      zclClosures_ProcessInDoorLockGetWeekDaySchedule
   1093           *
   1094           * @brief   Process in the received Get Week Day Schedule cmd
   1095           *
   1096           * @param   pInMsg - pointer to the incoming message
   1097           * @param   pCBs - pointer to the application callbacks
   1098           *
   1099           * @return  ZStatus_t
   1100           */
   1101          static ZStatus_t zclClosures_ProcessInDoorLockGetWeekDaySchedule( zclIncoming_t *pInMsg,
   1102                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs )
   1103          {
   1104           if ( pCBs->pfnDoorLockGetWeekDaySchedule )
   1105           {
   1106             zclDoorLockSchedule_t cmd;
   1107          
   1108             cmd.scheduleID = pInMsg->pData[0];
   1109             cmd.userID = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   1110          
   1111             return ( pCBs->pfnDoorLockGetWeekDaySchedule( pInMsg, &cmd ) );
   1112           }
   1113          
   1114           return ( ZFailure );
   1115          }
   1116          
   1117          /*********************************************************************
   1118           * @fn      zclClosures_ProcessInDoorLockClearWeekDaySchedule
   1119           *
   1120           * @brief   Process in the received Clear Week Day Schedule cmd
   1121           *
   1122           * @param   pInMsg - pointer to the incoming message
   1123           * @param   pCBs - pointer to the application callbacks
   1124           *
   1125           * @return  ZStatus_t
   1126           */
   1127          static ZStatus_t zclClosures_ProcessInDoorLockClearWeekDaySchedule( zclIncoming_t *pInMsg,
   1128                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs )
   1129          {
   1130           if ( pCBs->pfnDoorLockClearWeekDaySchedule )
   1131           {
   1132             zclDoorLockSchedule_t cmd;
   1133          
   1134             cmd.scheduleID = pInMsg->pData[0];
   1135             cmd.userID = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   1136          
   1137             return ( pCBs->pfnDoorLockClearWeekDaySchedule( pInMsg, &cmd ) );
   1138           }
   1139          
   1140           return ( ZFailure );
   1141          }
   1142          /*********************************************************************
   1143           * @fn      zclClosures_ProcessInDoorLockSetYearDaySchedule
   1144           *
   1145           * @brief   Process in the received Set Year Day Schedule cmd
   1146           *
   1147           * @param   pInMsg - pointer to the incoming message
   1148           * @param   pCBs - pointer to the application callbacks
   1149           *
   1150           * @return  ZStatus_t
   1151           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1152          static ZStatus_t zclClosures_ProcessInDoorLockSetYearDaySchedule( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockSetYearDaySchedule:
   1153                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs )
   1154          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1155           if ( pCBs->pfnDoorLockSetYearDaySchedule )
   \   00000A   EC           MOV       A,R4
   \   00000B   241A         ADD       A,#0x1a
   \   00000D   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000010   12....       LCALL     ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   000013   7003         JNZ       $+5
   \   000015   02....       LJMP      ??zclClosures_ProcessInDoorLockSetYearDaySchedu_1 & 0xFFFF
   1156           {
   1157             zclDoorLockSetYearDaySchedule_t cmd;
   1158          
   1159             cmd.scheduleID = pInMsg->pData[0];
   \   000018   12....       LCALL     ?Subroutine22 & 0xFFFF
   1160             cmd.userID = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   \                     ??CrossCallReturnLabel_57:
   \   00001B   8C82         MOV       DPL,R4
   \   00001D   8D83         MOV       DPH,R5
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   7401         MOV       A,#0x1
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E5..         MOV       A,?V0
   \   00002A   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   1161             cmd.zigBeeLocalStartTime = BUILD_UINT32( pInMsg->pData[3], pInMsg->pData[4], pInMsg->pData[5], pInMsg->pData[6] );
   \                     ??CrossCallReturnLabel_285:
   \   00002D   8C82         MOV       DPL,R4
   \   00002F   8D83         MOV       DPH,R5
   \   000031   12....       LCALL     ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   000034   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000037   12....       LCALL     ?L_SHL
   \   00003A   78..         MOV       R0,#?V0
   \   00003C   79..         MOV       R1,#?V4
   \   00003E   12....       LCALL     ?L_ADD
   \   000041   8C82         MOV       DPL,R4
   \   000043   8D83         MOV       DPH,R5
   \   000045   12....       LCALL     ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000048   12....       LCALL     ?L_SHL
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   79..         MOV       R1,#?V4
   \   00004F   12....       LCALL     ?L_ADD
   \   000052   8C82         MOV       DPL,R4
   \   000054   8D83         MOV       DPH,R5
   \   000056   12....       LCALL     ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   000059   12....       LCALL     ?L_SHL
   \   00005C   78..         MOV       R0,#?V0
   \   00005E   79..         MOV       R1,#?V4
   \   000060   12....       LCALL     ?L_ADD
   \   000063   7403         MOV       A,#0x3
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?L_MOV_TO_X
   1162             cmd.zigBeeLocalEndTime = BUILD_UINT32( pInMsg->pData[7], pInMsg->pData[8], pInMsg->pData[9], pInMsg->pData[10] );
   \   00006D   8C82         MOV       DPL,R4
   \   00006F   8D83         MOV       DPH,R5
   \   000071   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   000074   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000077   12....       LCALL     ?L_SHL
   \   00007A   78..         MOV       R0,#?V0
   \   00007C   79..         MOV       R1,#?V4
   \   00007E   12....       LCALL     ?L_ADD
   \   000081   8C82         MOV       DPL,R4
   \   000083   8D83         MOV       DPH,R5
   \   000085   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000088   12....       LCALL     ?L_SHL
   \   00008B   78..         MOV       R0,#?V0
   \   00008D   79..         MOV       R1,#?V4
   \   00008F   12....       LCALL     ?L_ADD
   \   000092   8C82         MOV       DPL,R4
   \   000094   8D83         MOV       DPH,R5
   \   000096   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   000099   12....       LCALL     ?L_SHL
   \   00009C   78..         MOV       R0,#?V0
   \   00009E   79..         MOV       R1,#?V4
   \   0000A0   12....       LCALL     ?L_ADD
   \   0000A3   7407         MOV       A,#0x7
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   78..         MOV       R0,#?V0
   \   0000AA   12....       LCALL     ?L_MOV_TO_X
   1163          
   1164             return ( pCBs->pfnDoorLockSetYearDaySchedule( pInMsg, &cmd ) );
   \   0000AD                ; Setup parameters for indirect call
   \   0000AD   AC..         MOV       R4,?XSP + 0
   \   0000AF   AD..         MOV       R5,?XSP + 1
   \   0000B1   8E82         MOV       DPL,R6
   \   0000B3   8F83         MOV       DPH,R7
   \   0000B5   12....       LCALL     ??Subroutine152_0 & 0xFFFF
   1165           }
   \                     ??CrossCallReturnLabel_365:
   \   0000B8   12....       LCALL     ?CALL_IND
   \   0000BB   8002         SJMP      ??zclClosures_ProcessInDoorLockSetYearDaySchedu_2
   1166          
   1167           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockSetYearDaySchedu_1:
   \   0000BD   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockSetYearDaySchedu_2:
   \   0000BF                REQUIRE ?Subroutine7
   \   0000BF                ; // Fall through to label ?Subroutine7
   1168          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   740B         MOV       A,#0xb
   \   000002   02....       LJMP      ??Subroutine127_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine130_0
   \   000001                ; // Fall through to label ??Subroutine130_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine130_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine131_0
   \   000001                ; // Fall through to label ??Subroutine131_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine131_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V4,A
   \   000009   E4           CLR       A
   \   00000A   F5..         MOV       ?V7,A
   \   00000C   7408         MOV       A,#0x8
   \   00000E   78..         MOV       R0,#?V4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine133_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine134_0
   \   000001                ; // Fall through to label ??Subroutine134_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine134_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine135_0
   \   000001                ; // Fall through to label ??Subroutine135_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine135_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F5..         MOV       ?V4,A
   \   000005   E4           CLR       A
   \   000006   F5..         MOV       ?V5,A
   \   000008   F5..         MOV       ?V6,A
   \   00000A   F5..         MOV       ?V7,A
   \   00000C   7408         MOV       A,#0x8
   \   00000E   78..         MOV       R0,#?V4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine136_0
   \   000001                ; // Fall through to label ??Subroutine136_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine136_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine137_0
   \   000001                ; // Fall through to label ??Subroutine137_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine137_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine138_0
   \   000001                ; // Fall through to label ??Subroutine138_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine138_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine139_0
   \   000001                ; // Fall through to label ??Subroutine139_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine139_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine140_0
   \   000001                ; // Fall through to label ??Subroutine140_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine140_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine141_0
   \   000001                ; // Fall through to label ??Subroutine141_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine141_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F5..         MOV       ?V4,A
   \   000006   E4           CLR       A
   \   000007   F5..         MOV       ?V5,A
   \   000009   7410         MOV       A,#0x10
   \   00000B   78..         MOV       R0,#?V4
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000003   FD           MOV       R5,A
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F5..         MOV       ?V0,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   FE           MOV       R6,A
   \   000001   E4           CLR       A
   \   000002   3D           ADDC      A,R5
   \   000003   FF           MOV       R7,A
   \   000004   8E82         MOV       DPL,R6
   \   000006   8F83         MOV       DPH,R7
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine147_0
   \   000001                ; // Fall through to label ??Subroutine147_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine147_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine148_0
   \   000001                ; // Fall through to label ??Subroutine148_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine148_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine149_0
   \   000001                ; // Fall through to label ??Subroutine149_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine149_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine150_0
   \   000001                ; // Fall through to label ??Subroutine150_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine150_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine151_0
   \   000001                ; // Fall through to label ??Subroutine151_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine151_0:
   \   000000   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000003   8C82         MOV       DPL,R4
   \   000005   8D83         MOV       DPH,R5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   EA           MOV       A,R2
   \   000001   2408         ADD       A,#0x8
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   F9           MOV       R1,A
   \   000007   8882         MOV       DPL,R0
   \   000009   8983         MOV       DPH,R1
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FC           MOV       R4,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F583         MOV       DPH,A
   \   000011   8C82         MOV       DPL,R4
   \   000013   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000016   8882         MOV       DPL,R0
   \   000018   8983         MOV       DPH,R1
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   FC           MOV       R4,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine153_0
   \   000001                ; // Fall through to label ??Subroutine153_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine153_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine154_0
   \   000001                ; // Fall through to label ??Subroutine154_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine154_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine155_0
   \   000001                ; // Fall through to label ??Subroutine155_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine155_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine156_0
   \   000001                ; // Fall through to label ??Subroutine156_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine156_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine157_0
   \   000001                ; // Fall through to label ??Subroutine157_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine157_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine158_0
   \   000001                ; // Fall through to label ??Subroutine158_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine158_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine159_0
   \   000004                ; // Fall through to label ??Subroutine159_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine159_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   E4           CLR       A
   \   000004   F5..         MOV       ?V6,A
   \   000006   7418         MOV       A,#0x18
   \   000008   78..         MOV       R0,#?V4
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F5..         MOV       ?V0,A
   \   000005   E4           CLR       A
   \   000006   F5..         MOV       ?V1,A
   \   000008   F5..         MOV       ?V2,A
   \   00000A   F5..         MOV       ?V3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET
   1169          
   1170          /*********************************************************************
   1171           * @fn      zclClosures_ProcessInDoorLockGetYearDaySchedule
   1172           *
   1173           * @brief   Process in the received Get Year Day Schedule cmd
   1174           *
   1175           * @param   pInMsg - pointer to the incoming message
   1176           * @param   pCBs - pointer to the application callbacks
   1177           *
   1178           * @return  ZStatus_t
   1179           */
   1180          static ZStatus_t zclClosures_ProcessInDoorLockGetYearDaySchedule( zclIncoming_t *pInMsg,
   1181                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs )
   1182          {
   1183           if ( pCBs->pfnDoorLockGetYearDaySchedule )
   1184           {
   1185             zclDoorLockSchedule_t cmd;
   1186          
   1187             cmd.scheduleID = pInMsg->pData[0];
   1188             cmd.userID = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   1189          
   1190             return ( pCBs->pfnDoorLockGetYearDaySchedule( pInMsg, &cmd ) );
   1191           }
   1192          
   1193           return ( ZFailure );
   1194          }
   1195          
   1196          /*********************************************************************
   1197           * @fn      zclClosures_ProcessInDoorLockClearYearDaySchedule
   1198           *
   1199           * @brief   Process in the received Clear Year Day Schedule cmd
   1200           *
   1201           * @param   pInMsg - pointer to the incoming message
   1202           * @param   pCBs - pointer to the application callbacks
   1203           *
   1204           * @return  ZStatus_t
   1205           */
   1206          static ZStatus_t zclClosures_ProcessInDoorLockClearYearDaySchedule( zclIncoming_t *pInMsg,
   1207                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs )
   1208          {
   1209           if ( pCBs->pfnDoorLockClearYearDaySchedule )
   1210           {
   1211             zclDoorLockSchedule_t cmd;
   1212          
   1213             cmd.scheduleID = pInMsg->pData[0];
   1214             cmd.userID = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   1215          
   1216             return ( pCBs->pfnDoorLockClearYearDaySchedule( pInMsg, &cmd ) );
   1217           }
   1218          
   1219           return ( ZFailure );
   1220          }
   1221          
   1222          /*********************************************************************
   1223           * @fn      zclClosures_ProcessInDoorLockSetHolidaySchedule
   1224           *
   1225           * @brief   Process in the received Set Holiday Schedule cmd
   1226           *
   1227           * @param   pInMsg - pointer to the incoming message
   1228           * @param   pCBs - pointer to the application callbacks
   1229           *
   1230           * @return  ZStatus_t
   1231           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1232          static ZStatus_t zclClosures_ProcessInDoorLockSetHolidaySchedule( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockSetHolidaySchedule:
   1233                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs )
   1234          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1235           if ( pCBs->pfnDoorLockSetHolidaySchedule )
   \   00000A   EC           MOV       A,R4
   \   00000B   2420         ADD       A,#0x20
   \   00000D   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000010   12....       LCALL     ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   000013   7003         JNZ       $+5
   \   000015   02....       LJMP      ??zclClosures_ProcessInDoorLockSetHolidaySchedu_1 & 0xFFFF
   1236           {
   1237             zclDoorLockSetHolidaySchedule_t cmd;
   1238          
   1239             cmd.holidayScheduleID = pInMsg->pData[0];
   \   000018   12....       LCALL     ?Subroutine22 & 0xFFFF
   1240             cmd.zigBeeLocalStartTime = BUILD_UINT32( pInMsg->pData[1], pInMsg->pData[2], pInMsg->pData[3], pInMsg->pData[4] );
   \                     ??CrossCallReturnLabel_58:
   \   00001B   E4           CLR       A
   \   00001C   F5..         MOV       ?V1,A
   \   00001E   F5..         MOV       ?V2,A
   \   000020   F5..         MOV       ?V3,A
   \   000022   8C82         MOV       DPL,R4
   \   000024   8D83         MOV       DPH,R5
   \   000026   12....       LCALL     ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000029   12....       LCALL     ?L_SHL
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   79..         MOV       R1,#?V4
   \   000030   12....       LCALL     ?L_ADD
   \   000033   8C82         MOV       DPL,R4
   \   000035   8D83         MOV       DPH,R5
   \   000037   12....       LCALL     ??Subroutine141_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   00003A   12....       LCALL     ?L_SHL
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   79..         MOV       R1,#?V4
   \   000041   12....       LCALL     ?L_ADD
   \   000044   8C82         MOV       DPL,R4
   \   000046   8D83         MOV       DPH,R5
   \   000048   12....       LCALL     ??Subroutine158_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   00004B   12....       LCALL     ?L_SHL
   \   00004E   78..         MOV       R0,#?V0
   \   000050   79..         MOV       R1,#?V4
   \   000052   12....       LCALL     ?L_ADD
   \   000055   7401         MOV       A,#0x1
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   78..         MOV       R0,#?V0
   \   00005C   12....       LCALL     ?L_MOV_TO_X
   1241             cmd.zigBeeLocalEndTime = BUILD_UINT32( pInMsg->pData[5], pInMsg->pData[6], pInMsg->pData[7], pInMsg->pData[8] );
   \   00005F   8C82         MOV       DPL,R4
   \   000061   8D83         MOV       DPH,R5
   \   000063   12....       LCALL     ??Subroutine148_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000066   12....       LCALL     ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000069   12....       LCALL     ?L_SHL
   \   00006C   78..         MOV       R0,#?V0
   \   00006E   79..         MOV       R1,#?V4
   \   000070   12....       LCALL     ?L_ADD
   \   000073   8C82         MOV       DPL,R4
   \   000075   8D83         MOV       DPH,R5
   \   000077   12....       LCALL     ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   00007A   12....       LCALL     ?L_SHL
   \   00007D   78..         MOV       R0,#?V0
   \   00007F   79..         MOV       R1,#?V4
   \   000081   12....       LCALL     ?L_ADD
   \   000084   8C82         MOV       DPL,R4
   \   000086   8D83         MOV       DPH,R5
   \   000088   12....       LCALL     ??Subroutine154_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   00008B   12....       LCALL     ?L_SHL
   \   00008E   78..         MOV       R0,#?V0
   \   000090   79..         MOV       R1,#?V4
   \   000092   12....       LCALL     ?L_ADD
   \   000095   7405         MOV       A,#0x5
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   78..         MOV       R0,#?V0
   \   00009C   12....       LCALL     ?L_MOV_TO_X
   1242             cmd.operatingModeDuringHoliday = pInMsg->pData[9];
   \   00009F   8C82         MOV       DPL,R4
   \   0000A1   8D83         MOV       DPH,R5
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   C0E0         PUSH      A
   \   0000AF   7409         MOV       A,#0x9
   \   0000B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B4   D0E0         POP       A
   \   0000B6   12....       LCALL     ?Subroutine72 & 0xFFFF
   1243          
   1244             return ( pCBs->pfnDoorLockSetHolidaySchedule( pInMsg, &cmd ) );
   1245           }
   \                     ??CrossCallReturnLabel_166:
   \   0000B9   12....       LCALL     ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   0000BC   12....       LCALL     ?CALL_IND
   \   0000BF   8002         SJMP      ??zclClosures_ProcessInDoorLockSetHolidaySchedu_2
   1246          
   1247           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockSetHolidaySchedu_1:
   \   0000C1   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockSetHolidaySchedu_2:
   \   0000C3   740A         MOV       A,#0xa
   \   0000C5   02....       LJMP      ??Subroutine127_0 & 0xFFFF
   1248          }
   1249          
   1250          /*********************************************************************
   1251           * @fn      zclClosures_ProcessInDoorLockGetHolidaySchedule
   1252           *
   1253           * @brief   Process in the received Get Holiday Schedule cmd
   1254           *
   1255           * @param   pInMsg - pointer to the incoming message
   1256           * @param   pCBs - pointer to the application callbacks
   1257           *
   1258           * @return  ZStatus_t
   1259           */
   1260          static ZStatus_t zclClosures_ProcessInDoorLockGetHolidaySchedule( zclIncoming_t *pInMsg,
   1261                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs )
   1262          {
   1263           if ( pCBs->pfnDoorLockGetHolidaySchedule )
   1264           {
   1265             zclDoorLockHolidayScheduleID_t cmd;
   1266          
   1267             cmd.holidayScheduleID = pInMsg->pData[0];
   1268          
   1269             return ( pCBs->pfnDoorLockGetHolidaySchedule( pInMsg, &cmd ) );
   1270           }
   1271          
   1272           return ( ZFailure );
   1273          }
   1274          
   1275          /*********************************************************************
   1276           * @fn      zclClosures_ProcessInDoorLockClearHolidaySchedule
   1277           *
   1278           * @brief   Process in the received Clear Holiday Schedule cmd
   1279           *
   1280           * @param   pInMsg - pointer to the incoming message
   1281           * @param   pCBs - pointer to the application callbacks
   1282           *
   1283           * @return  ZStatus_t
   1284           */
   1285          static ZStatus_t zclClosures_ProcessInDoorLockClearHolidaySchedule( zclIncoming_t *pInMsg,
   1286                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs )
   1287          {
   1288           if ( pCBs->pfnDoorLockClearHolidaySchedule )
   1289           {
   1290             zclDoorLockHolidayScheduleID_t cmd;
   1291          
   1292             cmd.holidayScheduleID = pInMsg->pData[0];
   1293          
   1294             return ( pCBs->pfnDoorLockClearHolidaySchedule( pInMsg, &cmd ) );
   1295           }
   1296          
   1297           return ( ZFailure );
   1298          }
   1299          
   1300          /*********************************************************************
   1301           * @fn      zclClosures_ProcessInDoorLockSetUserType
   1302           *
   1303           * @brief   Process in the received Set User Type cmd
   1304           *
   1305           * @param   pInMsg - pointer to the incoming message
   1306           * @param   pCBs - pointer to the application callbacks
   1307           *
   1308           * @return  ZStatus_t
   1309           */
   1310          static ZStatus_t zclClosures_ProcessInDoorLockSetUserType( zclIncoming_t *pInMsg,
   1311                                                                     zclClosures_DoorLockAppCallbacks_t *pCBs )
   1312          {
   1313           if ( pCBs->pfnDoorLockSetUserType )
   1314           {
   1315             zclDoorLockSetUserType_t cmd;
   1316          
   1317             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1318             cmd.userType = pInMsg->pData[2];
   1319          
   1320             return ( pCBs->pfnDoorLockSetUserType( pInMsg, &cmd ) );
   1321           }
   1322          
   1323           return ( ZFailure );
   1324          }
   1325          
   1326          /*********************************************************************
   1327           * @fn      zclClosures_ProcessInDoorLockGetUserType
   1328           *
   1329           * @brief   Process in the received Get User Type cmd
   1330           *
   1331           * @param   pInMsg - pointer to the incoming message
   1332           * @param   pCBs - pointer to the application callbacks
   1333           *
   1334           * @return  ZStatus_t
   1335           */
   1336          static ZStatus_t zclClosures_ProcessInDoorLockGetUserType( zclIncoming_t *pInMsg,
   1337                                                                     zclClosures_DoorLockAppCallbacks_t *pCBs )
   1338          {
   1339           if ( pCBs->pfnDoorLockGetUserType )
   1340           {
   1341             zclDoorLockUserID_t cmd;
   1342          
   1343             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1344          
   1345             return ( pCBs->pfnDoorLockGetUserType( pInMsg, &cmd ) );
   1346           }
   1347          
   1348           return ( ZFailure );
   1349          }
   1350          
   1351          /*********************************************************************
   1352           * @fn      zclClosures_ProcessInDoorLockSetRFIDCode
   1353           *
   1354           * @brief   Process in the received Set RFID Code cmd
   1355           *
   1356           * @param   pInMsg - pointer to the incoming message
   1357           * @param   pCBs - pointer to the application callbacks
   1358           *
   1359           * @return  ZStatus_t
   1360           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1361          static ZStatus_t zclClosures_ProcessInDoorLockSetRFIDCode( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockSetRFIDCode:
   1362                                                                     zclClosures_DoorLockAppCallbacks_t *pCBs )
   1363          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1364            ZStatus_t status;
   1365          
   1366            if ( pCBs->pfnDoorLockSetRFIDCode )
   \   00000E   EC           MOV       A,R4
   \   00000F   242A         ADD       A,#0x2a
   \   000011   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   000014   6072         JZ        ??zclClosures_ProcessInDoorLockSetRFIDCode_0
   1367            {
   1368              uint8 i;
   1369              uint8 offset;
   1370              uint8 calculatedArrayLen;
   1371              zclDoorLockSetRFIDCode_t cmd;
   1372          
   1373              // first octet of PIN/RFID Code variable string identifies its length
   1374              calculatedArrayLen = pInMsg->pData[4] + 1;  // add first byte of string
   \   000016   12....       LCALL     ?Subroutine20 & 0xFFFF
   1375          
   1376              cmd.pRfidCode = zcl_mem_alloc( calculatedArrayLen );
   \                     ??CrossCallReturnLabel_52:
   \   000019   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001C   8A..         MOV       ?V6,R2
   \   00001E   8B..         MOV       ?V7,R3
   \   000020   A8..         MOV       R0,?V6
   \   000022   A9..         MOV       R1,?V7
   \   000024   7404         MOV       A,#0x4
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   12....       LCALL     ?Subroutine61 & 0xFFFF
   1377              if ( !cmd.pRfidCode )
   \                     ??CrossCallReturnLabel_142:
   \   00002C   7004         JNZ       ??zclClosures_ProcessInDoorLockSetRFIDCode_1
   1378              {
   1379                return ( ZMemError );  // no memory
   \   00002E   7910         MOV       R1,#0x10
   \   000030   8058         SJMP      ??zclClosures_ProcessInDoorLockSetRFIDCode_2
   1380              }
   1381          
   1382              cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \                     ??zclClosures_ProcessInDoorLockSetRFIDCode_1:
   \   000032   12....       LCALL     ?Subroutine11 & 0xFFFF
   1383              cmd.userStatus = pInMsg->pData[2];
   \                     ??CrossCallReturnLabel_5:
   \   000035   C0E0         PUSH      A
   \   000037   7402         MOV       A,#0x2
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   D0E0         POP       A
   \   00003E   12....       LCALL     ?Subroutine24 & 0xFFFF
   1384              cmd.userType = pInMsg->pData[3];
   \                     ??CrossCallReturnLabel_62:
   \   000041   C0E0         PUSH      A
   \   000043   7403         MOV       A,#0x3
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   D0E0         POP       A
   \   00004A   12....       LCALL     ?Subroutine73 & 0xFFFF
   1385              offset = 4;
   1386              for ( i = 0; i < calculatedArrayLen; i++ )
   \                     ??CrossCallReturnLabel_169:
   \   00004D   801C         SJMP      ??zclClosures_ProcessInDoorLockSetRFIDCode_3
   1387              {
   1388                cmd.pRfidCode[i] = pInMsg->pData[offset++];
   \                     ??zclClosures_ProcessInDoorLockSetRFIDCode_4:
   \   00004F   E9           MOV       A,R1
   \   000050   FA           MOV       R2,A
   \   000051   85..82       MOV       DPL,?V2
   \   000054   85..83       MOV       DPH,?V3
   \   000057   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   1389              }
   \                     ??CrossCallReturnLabel_421:
   \   00005A   C0E0         PUSH      A
   \   00005C   E8           MOV       A,R0
   \   00005D   FA           MOV       R2,A
   \   00005E   7404         MOV       A,#0x4
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000066   D0E0         POP       A
   \   000068   F0           MOVX      @DPTR,A
   \   000069   09           INC       R1
   \   00006A   08           INC       R0
   \                     ??zclClosures_ProcessInDoorLockSetRFIDCode_3:
   \   00006B   E8           MOV       A,R0
   \   00006C   C3           CLR       C
   \   00006D   95..         SUBB      A,?V4
   \   00006F   40DE         JC        ??zclClosures_ProcessInDoorLockSetRFIDCode_4
   1390          
   1391              status = ( pCBs->pfnDoorLockSetRFIDCode( pInMsg, &cmd ) );
   \   000071                ; Setup parameters for indirect call
   \   000071   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000074   12....       LCALL     ?CALL_IND
   \   000077   E9           MOV       A,R1
   \   000078   FE           MOV       R6,A
   1392              zcl_mem_free( cmd.pRfidCode );
   \   000079                ; Setup parameters for call to function osal_mem_free
   \   000079   7404         MOV       A,#0x4
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000081   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1393              return status;
   \   000084   EE           MOV       A,R6
   \   000085   F9           MOV       R1,A
   \   000086   8002         SJMP      ??zclClosures_ProcessInDoorLockSetRFIDCode_2
   1394            }
   1395          
   1396           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockSetRFIDCode_0:
   \   000088   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockSetRFIDCode_2:
   \   00008A   02....       LJMP      ?Subroutine2 & 0xFFFF
   1397          }
   1398          
   1399          /*********************************************************************
   1400           * @fn      zclClosures_ProcessInDoorLockGetRFIDCode
   1401           *
   1402           * @brief   Process in the received Get RFID Code cmd
   1403           *
   1404           * @param   pInMsg - pointer to the incoming message
   1405           * @param   pCBs - pointer to the application callbacks
   1406           *
   1407           * @return  ZStatus_t
   1408           */
   1409          static ZStatus_t zclClosures_ProcessInDoorLockGetRFIDCode( zclIncoming_t *pInMsg,
   1410                                                                     zclClosures_DoorLockAppCallbacks_t *pCBs )
   1411          {
   1412           if ( pCBs->pfnDoorLockGetRFIDCode )
   1413           {
   1414             zclDoorLockUserID_t cmd;
   1415          
   1416             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1417          
   1418             return ( pCBs->pfnDoorLockGetRFIDCode( pInMsg, &cmd ) );
   1419           }
   1420          
   1421           return ( ZFailure );
   1422          }
   1423          
   1424          /*********************************************************************
   1425           * @fn      zclClosures_ProcessInDoorLockClearRFIDCode
   1426           *
   1427           * @brief   Process in the received Clear RFID Code cmd
   1428           *
   1429           * @param   pInMsg - pointer to the incoming message
   1430           * @param   pCBs - pointer to the application callbacks
   1431           *
   1432           * @return  ZStatus_t
   1433           */
   1434          static ZStatus_t zclClosures_ProcessInDoorLockClearRFIDCode( zclIncoming_t *pInMsg,
   1435                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs )
   1436          {
   1437           if ( pCBs->pfnDoorLockClearRFIDCode )
   1438           {
   1439             zclDoorLockUserID_t cmd;
   1440          
   1441             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1442          
   1443             return ( pCBs->pfnDoorLockClearRFIDCode( pInMsg, &cmd ) );
   1444           }
   1445          
   1446           return ( ZFailure );
   1447          }
   1448          
   1449          /*********************************************************************
   1450           * @fn      zclClosures_ProcessInDoorLockClearAllRFIDCodes
   1451           *
   1452           * @brief   Process in the received Clear All RFID Codes cmd
   1453           *
   1454           * @param   pInMsg - pointer to the incoming message
   1455           * @param   pCBs - pointer to the application callbacks
   1456           *
   1457           * @return  ZStatus_t
   1458           */
   1459          static ZStatus_t zclClosures_ProcessInDoorLockClearAllRFIDCodes( zclIncoming_t *pInMsg,
   1460                                                                           zclClosures_DoorLockAppCallbacks_t *pCBs )
   1461          {
   1462           if ( pCBs->pfnDoorLockClearAllRFIDCodes )
   1463           {
   1464             // no payload
   1465          
   1466             return ( pCBs->pfnDoorLockClearAllRFIDCodes( pInMsg ) );
   1467           }
   1468          
   1469           return ( ZFailure );
   1470          }
   1471          
   1472          /*********************************************************************
   1473           * @fn      zclClosures_ProcessInDoorLockUnlockWithTimeoutRsp
   1474           *
   1475           * @brief   Process in the received Unlock With Timeout Response cmd
   1476           *
   1477           * @param   pInMsg - pointer to the incoming message
   1478           * @param   pCBs - pointer to the application callbacks
   1479           *
   1480           * @return  ZStatus_t
   1481           */
   1482          static ZStatus_t zclClosures_ProcessInDoorLockUnlockWithTimeoutRsp( zclIncoming_t *pInMsg,
   1483                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs )
   1484          {
   1485           if ( pCBs->pfnDoorLockUnlockWithTimeoutRsp )
   1486           {
   1487             return ( pCBs->pfnDoorLockUnlockWithTimeoutRsp( pInMsg, pInMsg->pData[0] ) );
   1488           }
   1489          
   1490           return ( ZFailure );
   1491          }
   1492          
   1493          /*********************************************************************
   1494           * @fn      zclClosures_ProcessInDoorLockGetLogRecordRsp
   1495           *
   1496           * @brief   Process in the received Get Log Record Response cmd
   1497           *
   1498           * @param   pInMsg - pointer to the incoming message
   1499           * @param   pCBs - pointer to the application callbacks
   1500           *
   1501           * @return  ZStatus_t
   1502           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1503          static ZStatus_t zclClosures_ProcessInDoorLockGetLogRecordRsp( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockGetLogRecordRsp:
   1504                                                                         zclClosures_DoorLockAppCallbacks_t *pCBs )
   1505          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V12,R2
   \   00000C   8B..         MOV       ?V13,R3
   1506            ZStatus_t status;
   1507          
   1508            if ( pCBs->pfnDoorLockGetLogRecordRsp )
   \   00000E   EC           MOV       A,R4
   \   00000F   2434         ADD       A,#0x34
   \   000011   F5..         MOV       ?V10,A
   \   000013   E4           CLR       A
   \   000014   3D           ADDC      A,R5
   \   000015   F5..         MOV       ?V11,A
   \   000017   85..82       MOV       DPL,?V10
   \   00001A   12....       LCALL     ??Subroutine143_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   00001D   7003         JNZ       $+5
   \   00001F   02....       LJMP      ??zclClosures_ProcessInDoorLockGetLogRecordRsp_0 & 0xFFFF
   1509            {
   1510              uint8 i;
   1511              uint8 offset;
   1512              uint8 calculatedArrayLen;
   1513              zclDoorLockGetLogRecordRsp_t cmd;
   1514          
   1515              // first octet of PIN/RFID Code variable string identifies its length
   1516              calculatedArrayLen = pInMsg->pData[11] + 1;  // add first byte of string
   \   000022   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000025   F5..         MOV       ?V8,A
   1517          
   1518              cmd.pPIN = zcl_mem_alloc( calculatedArrayLen );
   \   000027                ; Setup parameters for call to function osal_mem_alloc
   \   000027   FA           MOV       R2,A
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002D   8A..         MOV       ?V0,R2
   \   00002F   8B..         MOV       ?V1,R3
   \   000031   A8..         MOV       R0,?V0
   \   000033   A9..         MOV       R1,?V1
   \   000035   740B         MOV       A,#0xb
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   12....       LCALL     ?Subroutine61 & 0xFFFF
   1519              if ( !cmd.pPIN )
   \                     ??CrossCallReturnLabel_143:
   \   00003D   7005         JNZ       ??zclClosures_ProcessInDoorLockGetLogRecordRsp_1
   1520              {
   1521                return ( ZMemError );  // no memory
   \   00003F   7910         MOV       R1,#0x10
   \   000041   02....       LJMP      ??zclClosures_ProcessInDoorLockGetLogRecordRsp_2 & 0xFFFF
   1522              }
   1523          
   1524              cmd.logEntryID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \                     ??zclClosures_ProcessInDoorLockGetLogRecordRsp_1:
   \   000044   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   000047   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   00004A   F9           MOV       R1,A
   \   00004B   EC           MOV       A,R4
   \   00004C   12....       LCALL     ?Subroutine77 & 0xFFFF
   1525              cmd.timestamp = BUILD_UINT32( pInMsg->pData[2], pInMsg->pData[3], pInMsg->pData[4], pInMsg->pData[5] );
   \                     ??CrossCallReturnLabel_288:
   \   00004F   8A82         MOV       DPL,R2
   \   000051   8B83         MOV       DPH,R3
   \   000053   12....       LCALL     ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   000056   12....       LCALL     ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000059   12....       LCALL     ?L_SHL
   \   00005C   78..         MOV       R0,#?V0
   \   00005E   79..         MOV       R1,#?V4
   \   000060   12....       LCALL     ?L_ADD
   \   000063   8A82         MOV       DPL,R2
   \   000065   8B83         MOV       DPH,R3
   \   000067   12....       LCALL     ??Subroutine140_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   00006A   12....       LCALL     ?L_SHL
   \   00006D   78..         MOV       R0,#?V0
   \   00006F   79..         MOV       R1,#?V4
   \   000071   12....       LCALL     ?L_ADD
   \   000074   8A82         MOV       DPL,R2
   \   000076   8B83         MOV       DPH,R3
   \   000078   12....       LCALL     ??Subroutine157_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   00007B   12....       LCALL     ?L_SHL
   \   00007E   78..         MOV       R0,#?V0
   \   000080   79..         MOV       R1,#?V4
   \   000082   12....       LCALL     ?L_ADD
   \   000085   7402         MOV       A,#0x2
   \   000087   12....       LCALL     ?XSTACK_DISP0_8
   \   00008A   78..         MOV       R0,#?V0
   \   00008C   12....       LCALL     ?L_MOV_TO_X
   1526              cmd.eventType = pInMsg->pData[6];
   \   00008F   8A82         MOV       DPL,R2
   \   000091   8B83         MOV       DPH,R3
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   C0E0         PUSH      A
   \   00009C   7406         MOV       A,#0x6
   \   00009E   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A1   D0E0         POP       A
   \   0000A3   12....       LCALL     ?Subroutine55 & 0xFFFF
   1527              cmd.source = pInMsg->pData[7];
   \                     ??CrossCallReturnLabel_311:
   \   0000A6   2407         ADD       A,#0x7
   \   0000A8   F582         MOV       DPL,A
   \   0000AA   E4           CLR       A
   \   0000AB   38           ADDC      A,R0
   \   0000AC   F583         MOV       DPH,A
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   C0E0         PUSH      A
   \   0000B1   7407         MOV       A,#0x7
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   D0E0         POP       A
   \   0000B8   12....       LCALL     ?Subroutine55 & 0xFFFF
   1528              cmd.eventIDAlarmCode = pInMsg->pData[8];
   \                     ??CrossCallReturnLabel_312:
   \   0000BB   2408         ADD       A,#0x8
   \   0000BD   F582         MOV       DPL,A
   \   0000BF   E4           CLR       A
   \   0000C0   38           ADDC      A,R0
   \   0000C1   F583         MOV       DPH,A
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   C0E0         PUSH      A
   \   0000C6   7408         MOV       A,#0x8
   \   0000C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CB   D0E0         POP       A
   \   0000CD   12....       LCALL     ?Subroutine75 & 0xFFFF
   1529              cmd.userID = BUILD_UINT16( pInMsg->pData[9], pInMsg->pData[10] );
   \                     ??CrossCallReturnLabel_175:
   \   0000D0   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   0000D3   A3           INC       DPTR
   \   0000D4   A3           INC       DPTR
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   FA           MOV       R2,A
   \   0000DE   8882         MOV       DPL,R0
   \   0000E0   8983         MOV       DPH,R1
   \   0000E2   A3           INC       DPTR
   \   0000E3   A3           INC       DPTR
   \   0000E4   A3           INC       DPTR
   \   0000E5   A3           INC       DPTR
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   F9           MOV       R1,A
   \   0000EE   EA           MOV       A,R2
   \   0000EF   F8           MOV       R0,A
   \   0000F0   7409         MOV       A,#0x9
   \   0000F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F5   E8           MOV       A,R0
   \   0000F6   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   1530              offset = 11;
   \                     ??CrossCallReturnLabel_286:
   \   0000F9   790B         MOV       R1,#0xb
   1531              for ( i = 0; i < calculatedArrayLen; i++ )
   \   0000FB   7800         MOV       R0,#0x0
   \   0000FD   801A         SJMP      ??zclClosures_ProcessInDoorLockGetLogRecordRsp_3
   1532              {
   1533                cmd.pPIN[i] = pInMsg->pData[offset++];
   \                     ??zclClosures_ProcessInDoorLockGetLogRecordRsp_4:
   \   0000FF   E9           MOV       A,R1
   \   000100   FA           MOV       R2,A
   \   000101   8E82         MOV       DPL,R6
   \   000103   8F83         MOV       DPH,R7
   \   000105   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   1534              }
   \                     ??CrossCallReturnLabel_422:
   \   000108   C0E0         PUSH      A
   \   00010A   E8           MOV       A,R0
   \   00010B   FA           MOV       R2,A
   \   00010C   740B         MOV       A,#0xb
   \   00010E   12....       LCALL     ?XSTACK_DISP0_8
   \   000111   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000114   D0E0         POP       A
   \   000116   F0           MOVX      @DPTR,A
   \   000117   09           INC       R1
   \   000118   08           INC       R0
   \                     ??zclClosures_ProcessInDoorLockGetLogRecordRsp_3:
   \   000119   E8           MOV       A,R0
   \   00011A   C3           CLR       C
   \   00011B   95..         SUBB      A,?V8
   \   00011D   40E0         JC        ??zclClosures_ProcessInDoorLockGetLogRecordRsp_4
   1535          
   1536              status = ( pCBs->pfnDoorLockGetLogRecordRsp( pInMsg, &cmd ) );
   \   00011F                ; Setup parameters for indirect call
   \   00011F   AC..         MOV       R4,?XSP + 0
   \   000121   AD..         MOV       R5,?XSP + 1
   \   000123   AA..         MOV       R2,?V12
   \   000125   AB..         MOV       R3,?V13
   \   000127   85..82       MOV       DPL,?V10
   \   00012A   85..83       MOV       DPH,?V11
   \   00012D   12....       LCALL     ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   000130   12....       LCALL     ?CALL_IND
   \   000133   E9           MOV       A,R1
   \   000134   FE           MOV       R6,A
   1537              zcl_mem_free( cmd.pPIN );
   \   000135                ; Setup parameters for call to function osal_mem_free
   \   000135   740B         MOV       A,#0xb
   \   000137   12....       LCALL     ?XSTACK_DISP0_8
   \   00013A   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00013D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1538              return status;
   \   000140   EE           MOV       A,R6
   \   000141   F9           MOV       R1,A
   \   000142   8002         SJMP      ??zclClosures_ProcessInDoorLockGetLogRecordRsp_2
   1539            }
   1540          
   1541           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockGetLogRecordRsp_0:
   \   000144   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockGetLogRecordRsp_2:
   \   000146   02....       LJMP      ?Subroutine3 & 0xFFFF
   1542          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine142_0
   \   000001                ; // Fall through to label ??Subroutine142_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine142_0:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   C8           XCH       A,R0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine160_0:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   FA           MOV       R2,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FB           MOV       R3,A
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine161_0:
   \   000000   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   EA           MOV       A,R2
   \   000001   2408         ADD       A,#0x8
   \   000003   FE           MOV       R6,A
   \   000004   E4           CLR       A
   \   000005   35..         ADDC      A,?V13
   \   000007   FF           MOV       R7,A
   \   000008   8E82         MOV       DPL,R6
   \   00000A   8F83         MOV       DPH,R7
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F8           MOV       R0,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   C8           XCH       A,R0
   \   000011   240B         ADD       A,#0xb
   \   000013   F582         MOV       DPL,A
   \   000015   E4           CLR       A
   \   000016   38           ADDC      A,R0
   \   000017   F583         MOV       DPH,A
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   04           INC       A
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   740D         MOV       A,#0xd
   \   000002                REQUIRE ??Subroutine169_0
   \   000002                ; // Fall through to label ??Subroutine169_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine169_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine170_0
   \   000003                ; // Fall through to label ??Subroutine170_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine170_0:
   \   000000   7F0E         MOV       R7,#0xe
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1543          
   1544          /*********************************************************************
   1545           * @fn      zclClosures_ProcessInDoorLockSetPINCodeRsp
   1546           *
   1547           * @brief   Process in the received Set PIN Code Response cmd
   1548           *
   1549           * @param   pInMsg - pointer to the incoming message
   1550           * @param   pCBs - pointer to the application callbacks
   1551           *
   1552           * @return  ZStatus_t
   1553           */
   1554          static ZStatus_t zclClosures_ProcessInDoorLockSetPINCodeRsp( zclIncoming_t *pInMsg,
   1555                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs )
   1556          {
   1557           if ( pCBs->pfnDoorLockSetPINCodeRsp )
   1558           {
   1559             return ( pCBs->pfnDoorLockSetPINCodeRsp( pInMsg, pInMsg->pData[0] ) );
   1560           }
   1561          
   1562           return ( ZFailure );
   1563          }
   1564          
   1565          /*********************************************************************
   1566           * @fn      zclClosures_ProcessInDoorLockGetPINCodeRsp
   1567           *
   1568           * @brief   Process in the received Get PIN Code Response cmd
   1569           *
   1570           * @param   pInMsg - pointer to the incoming message
   1571           * @param   pCBs - pointer to the application callbacks
   1572           *
   1573           * @return  ZStatus_t
   1574           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1575          static ZStatus_t zclClosures_ProcessInDoorLockGetPINCodeRsp( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockGetPINCodeRsp:
   1576                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs )
   1577          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1578            ZStatus_t status;
   1579          
   1580            if ( pCBs->pfnDoorLockGetPINCodeRsp )
   \   00000E   EC           MOV       A,R4
   \   00000F   2438         ADD       A,#0x38
   \   000011   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   000014   6072         JZ        ??zclClosures_ProcessInDoorLockGetPINCodeRsp_0
   1581            {
   1582              uint8 i;
   1583              uint8 offset;
   1584              uint8 calculatedArrayLen;
   1585              zclDoorLockGetPINCodeRsp_t cmd;
   1586          
   1587              // first octet of PIN/RFID Code variable string identifies its length
   1588              calculatedArrayLen = pInMsg->pData[4] + 1; // add first byte of string
   \   000016   12....       LCALL     ?Subroutine20 & 0xFFFF
   1589          
   1590              cmd.pCode = zcl_mem_alloc( calculatedArrayLen );
   \                     ??CrossCallReturnLabel_53:
   \   000019   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001C   8A..         MOV       ?V6,R2
   \   00001E   8B..         MOV       ?V7,R3
   \   000020   A8..         MOV       R0,?V6
   \   000022   A9..         MOV       R1,?V7
   \   000024   7404         MOV       A,#0x4
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   12....       LCALL     ?Subroutine61 & 0xFFFF
   1591              if ( !cmd.pCode )
   \                     ??CrossCallReturnLabel_144:
   \   00002C   7004         JNZ       ??zclClosures_ProcessInDoorLockGetPINCodeRsp_1
   1592              {
   1593                return ( ZMemError );  // no memory
   \   00002E   7910         MOV       R1,#0x10
   \   000030   8058         SJMP      ??zclClosures_ProcessInDoorLockGetPINCodeRsp_2
   1594              }
   1595          
   1596              cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \                     ??zclClosures_ProcessInDoorLockGetPINCodeRsp_1:
   \   000032   12....       LCALL     ?Subroutine11 & 0xFFFF
   1597              cmd.userStatus = pInMsg->pData[2];
   \                     ??CrossCallReturnLabel_6:
   \   000035   C0E0         PUSH      A
   \   000037   7402         MOV       A,#0x2
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   D0E0         POP       A
   \   00003E   12....       LCALL     ?Subroutine24 & 0xFFFF
   1598              cmd.userType = pInMsg->pData[3];
   \                     ??CrossCallReturnLabel_63:
   \   000041   C0E0         PUSH      A
   \   000043   7403         MOV       A,#0x3
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   D0E0         POP       A
   \   00004A   12....       LCALL     ?Subroutine73 & 0xFFFF
   1599              offset = 4;
   1600              for ( i = 0; i < calculatedArrayLen; i++ )
   \                     ??CrossCallReturnLabel_170:
   \   00004D   801C         SJMP      ??zclClosures_ProcessInDoorLockGetPINCodeRsp_3
   1601              {
   1602                cmd.pCode[i] = pInMsg->pData[offset++];
   \                     ??zclClosures_ProcessInDoorLockGetPINCodeRsp_4:
   \   00004F   E9           MOV       A,R1
   \   000050   FA           MOV       R2,A
   \   000051   85..82       MOV       DPL,?V2
   \   000054   85..83       MOV       DPH,?V3
   \   000057   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   1603              }
   \                     ??CrossCallReturnLabel_423:
   \   00005A   C0E0         PUSH      A
   \   00005C   E8           MOV       A,R0
   \   00005D   FA           MOV       R2,A
   \   00005E   7404         MOV       A,#0x4
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000066   D0E0         POP       A
   \   000068   F0           MOVX      @DPTR,A
   \   000069   09           INC       R1
   \   00006A   08           INC       R0
   \                     ??zclClosures_ProcessInDoorLockGetPINCodeRsp_3:
   \   00006B   E8           MOV       A,R0
   \   00006C   C3           CLR       C
   \   00006D   95..         SUBB      A,?V4
   \   00006F   40DE         JC        ??zclClosures_ProcessInDoorLockGetPINCodeRsp_4
   1604          
   1605              status = ( pCBs->pfnDoorLockGetPINCodeRsp( pInMsg, &cmd ) );
   \   000071                ; Setup parameters for indirect call
   \   000071   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000074   12....       LCALL     ?CALL_IND
   \   000077   E9           MOV       A,R1
   \   000078   FE           MOV       R6,A
   1606              zcl_mem_free( cmd.pCode );
   \   000079                ; Setup parameters for call to function osal_mem_free
   \   000079   7404         MOV       A,#0x4
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000081   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1607              return status;
   \   000084   EE           MOV       A,R6
   \   000085   F9           MOV       R1,A
   \   000086   8002         SJMP      ??zclClosures_ProcessInDoorLockGetPINCodeRsp_2
   1608            }
   1609          
   1610           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockGetPINCodeRsp_0:
   \   000088   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockGetPINCodeRsp_2:
   \   00008A   02....       LJMP      ?Subroutine2 & 0xFFFF
   1611          }
   1612          
   1613          /*********************************************************************
   1614           * @fn      zclClosures_ProcessInDoorLockClearPINCodeRsp
   1615           *
   1616           * @brief   Process in the received Clear PIN Code Response cmd
   1617           *
   1618           * @param   pInMsg - pointer to the incoming message
   1619           * @param   pCBs - pointer to the application callbacks
   1620           *
   1621           * @return  ZStatus_t
   1622           */
   1623          static ZStatus_t zclClosures_ProcessInDoorLockClearPINCodeRsp( zclIncoming_t *pInMsg,
   1624                                                                         zclClosures_DoorLockAppCallbacks_t *pCBs )
   1625          {
   1626           if ( pCBs->pfnDoorLockClearPINCodeRsp )
   1627           {
   1628             return ( pCBs->pfnDoorLockClearPINCodeRsp( pInMsg, pInMsg->pData[0] ) );
   1629           }
   1630          
   1631           return ( ZFailure );
   1632          }
   1633          
   1634          /*********************************************************************
   1635           * @fn      zclClosures_ProcessInDoorLockClearAllPINCodesRsp
   1636           *
   1637           * @brief   Process in the received Clear All PIN Codes Response cmd
   1638           *
   1639           * @param   pInMsg - pointer to the incoming message
   1640           * @param   pCBs - pointer to the application callbacks
   1641           *
   1642           * @return  ZStatus_t
   1643           */
   1644          static ZStatus_t zclClosures_ProcessInDoorLockClearAllPINCodesRsp( zclIncoming_t *pInMsg,
   1645                                                                             zclClosures_DoorLockAppCallbacks_t *pCBs )
   1646          {
   1647           if ( pCBs->pfnDoorLockClearAllPINCodesRsp )
   1648           {
   1649             return ( pCBs->pfnDoorLockClearAllPINCodesRsp( pInMsg, pInMsg->pData[0] ) );
   1650           }
   1651          
   1652           return ( ZFailure );
   1653          }
   1654          
   1655          /*********************************************************************
   1656           * @fn      zclClosures_ProcessInDoorLockSetUserStatusRsp
   1657           *
   1658           * @brief   Process in the received Set User Status Response cmd
   1659           *
   1660           * @param   pInMsg - pointer to the incoming message
   1661           * @param   pCBs - pointer to the application callbacks
   1662           *
   1663           * @return  ZStatus_t
   1664           */
   1665          static ZStatus_t zclClosures_ProcessInDoorLockSetUserStatusRsp( zclIncoming_t *pInMsg,
   1666                                                                          zclClosures_DoorLockAppCallbacks_t *pCBs )
   1667          {
   1668           if ( pCBs->pfnDoorLockSetUserStatusRsp )
   1669           {
   1670             return ( pCBs->pfnDoorLockSetUserStatusRsp( pInMsg, pInMsg->pData[0] ) );
   1671           }
   1672          
   1673           return ( ZFailure );
   1674          }
   1675          
   1676          /*********************************************************************
   1677           * @fn      zclClosures_ProcessInDoorLockGetUserStatusRsp
   1678           *
   1679           * @brief   Process in the received Get User Status Response cmd
   1680           *
   1681           * @param   pInMsg - pointer to the incoming message
   1682           * @param   pCBs - pointer to the application callbacks
   1683           *
   1684           * @return  ZStatus_t
   1685           */
   1686          static ZStatus_t zclClosures_ProcessInDoorLockGetUserStatusRsp( zclIncoming_t *pInMsg,
   1687                                                                          zclClosures_DoorLockAppCallbacks_t *pCBs )
   1688          {
   1689           if ( pCBs->pfnDoorLockGetUserStatusRsp )
   1690           {
   1691             zclDoorLockGetUserStatusRsp_t cmd;
   1692          
   1693             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1694             cmd.userStatus = pInMsg->pData[2];
   1695          
   1696             return ( pCBs->pfnDoorLockGetUserStatusRsp( pInMsg, &cmd ) );
   1697           }
   1698          
   1699           return ( ZFailure );
   1700          }
   1701          
   1702          /*********************************************************************
   1703           * @fn      zclClosures_ProcessInDoorLockSetWeekDayScheduleRsp
   1704           *
   1705           * @brief   Process in the received Set Week Day Schedule Response cmd
   1706           *
   1707           * @param   pInMsg - pointer to the incoming message
   1708           * @param   pCBs - pointer to the application callbacks
   1709           *
   1710           * @return  ZStatus_t
   1711           */
   1712          static ZStatus_t zclClosures_ProcessInDoorLockSetWeekDayScheduleRsp( zclIncoming_t *pInMsg,
   1713                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs )
   1714          {
   1715           if ( pCBs->pfnDoorLockSetWeekDayScheduleRsp )
   1716           {
   1717             return ( pCBs->pfnDoorLockSetWeekDayScheduleRsp( pInMsg, pInMsg->pData[0] ) );
   1718           }
   1719          
   1720           return ( ZFailure );
   1721          }
   1722          
   1723          /*********************************************************************
   1724           * @fn      zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp
   1725           *
   1726           * @brief   Process in the received Get Week Day Schedule Response cmd
   1727           *
   1728           * @param   pInMsg - pointer to the incoming message
   1729           * @param   pCBs - pointer to the application callbacks
   1730           *
   1731           * @return  ZStatus_t
   1732           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1733          static ZStatus_t zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp:
   1734                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs )
   1735          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1736           if ( pCBs->pfnDoorLockGetWeekDayScheduleRsp )
   \   00000A   EC           MOV       A,R4
   \   00000B   2444         ADD       A,#0x44
   \   00000D   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000010   6072         JZ        ??zclClosures_ProcessInDoorLockGetWeekDaySchedu_1
   1737           {
   1738             zclDoorLockGetWeekDayScheduleRsp_t cmd;
   1739          
   1740             cmd.scheduleID = pInMsg->pData[0];
   \   000012   12....       LCALL     ?Subroutine21 & 0xFFFF
   1741             cmd.userID = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   \                     ??CrossCallReturnLabel_56:
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   12....       LCALL     ?Subroutine64 & 0xFFFF
   1742             cmd.status = pInMsg->pData[3];
   \                     ??CrossCallReturnLabel_151:
   \   00001B   FE           MOV       R6,A
   \   00001C   7403         MOV       A,#0x3
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   EE           MOV       A,R6
   \   000022   F0           MOVX      @DPTR,A
   1743          
   1744             if ( cmd.status == ZCL_STATUS_SUCCESS )
   \   000023   704F         JNZ       ??zclClosures_ProcessInDoorLockGetWeekDaySchedu_2
   1745             {
   1746               cmd.daysMask = pInMsg->pData[4];
   \   000025   12....       LCALL     ?Subroutine45 & 0xFFFF
   1747               cmd.startHour = pInMsg->pData[5];
   1748               cmd.startMinute = pInMsg->pData[6];
   1749               cmd.endHour = pInMsg->pData[7];
   1750               cmd.endMinute = pInMsg->pData[8];
   1751             }
   \                     ??CrossCallReturnLabel_111:
   \   000028   C0E0         PUSH      A
   \   00002A   7404         MOV       A,#0x4
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   D0E0         POP       A
   \   000031   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000034   C0E0         PUSH      A
   \   000036   7405         MOV       A,#0x5
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   D0E0         POP       A
   \   00003D   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000040   C0E0         PUSH      A
   \   000042   7406         MOV       A,#0x6
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   D0E0         POP       A
   \   000049   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   00004C   2407         ADD       A,#0x7
   \   00004E   F582         MOV       DPL,A
   \   000050   E4           CLR       A
   \   000051   3E           ADDC      A,R6
   \   000052   F583         MOV       DPH,A
   \   000054   E0           MOVX      A,@DPTR
   \   000055   C0E0         PUSH      A
   \   000057   7407         MOV       A,#0x7
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   D0E0         POP       A
   \   00005E   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000061   2408         ADD       A,#0x8
   \   000063   F582         MOV       DPL,A
   \   000065   E4           CLR       A
   \   000066   3C           ADDC      A,R4
   \   000067   F583         MOV       DPH,A
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   C0E0         PUSH      A
   \   00006C   7408         MOV       A,#0x8
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   D0E0         POP       A
   \   000073   F0           MOVX      @DPTR,A
   1752          
   1753             return ( pCBs->pfnDoorLockGetWeekDayScheduleRsp( pInMsg, &cmd ) );
   \                     ??zclClosures_ProcessInDoorLockGetWeekDaySchedu_2:
   \   000074                ; Setup parameters for indirect call
   \   000074   AC..         MOV       R4,?XSP + 0
   \   000076   AD..         MOV       R5,?XSP + 1
   \   000078   8882         MOV       DPL,R0
   \   00007A   8983         MOV       DPH,R1
   \   00007C   12....       LCALL     ??Subroutine152_0 & 0xFFFF
   1754           }
   \                     ??CrossCallReturnLabel_368:
   \   00007F   12....       LCALL     ?CALL_IND
   \   000082   8002         SJMP      ??zclClosures_ProcessInDoorLockGetWeekDaySchedu_3
   1755          
   1756           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockGetWeekDaySchedu_1:
   \   000084   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockGetWeekDaySchedu_3:
   \   000086   7409         MOV       A,#0x9
   \   000088   02....       LJMP      ??Subroutine163_0 & 0xFFFF
   1757          }
   1758          
   1759          /*********************************************************************
   1760           * @fn      zclClosures_ProcessInDoorLockClearWeekDayScheduleRsp
   1761           *
   1762           * @brief   Process in the received Clear Week Day Schedule Response cmd
   1763           *
   1764           * @param   pInMsg - pointer to the incoming message
   1765           * @param   pCBs - pointer to the application callbacks
   1766           *
   1767           * @return  ZStatus_t
   1768           */
   1769          static ZStatus_t zclClosures_ProcessInDoorLockClearWeekDayScheduleRsp( zclIncoming_t *pInMsg,
   1770                                                                                 zclClosures_DoorLockAppCallbacks_t *pCBs )
   1771          {
   1772           if ( pCBs->pfnDoorLockClearWeekDayScheduleRsp )
   1773           {
   1774             return ( pCBs->pfnDoorLockClearWeekDayScheduleRsp( pInMsg, pInMsg->pData[0] ) );
   1775           }
   1776          
   1777           return ( ZFailure );
   1778          }
   1779          
   1780          /*********************************************************************
   1781           * @fn      zclClosures_ProcessInDoorLockSetYearDayScheduleRsp
   1782           *
   1783           * @brief   Process in the received Set Year Day Schedule Response cmd
   1784           *
   1785           * @param   pInMsg - pointer to the incoming message
   1786           * @param   pCBs - pointer to the application callbacks
   1787           *
   1788           * @return  ZStatus_t
   1789           */
   1790          static ZStatus_t zclClosures_ProcessInDoorLockSetYearDayScheduleRsp( zclIncoming_t *pInMsg,
   1791                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs )
   1792          {
   1793           if ( pCBs->pfnDoorLockSetYearDayScheduleRsp )
   1794           {
   1795             return ( pCBs->pfnDoorLockSetYearDayScheduleRsp( pInMsg, pInMsg->pData[0] ) );
   1796           }
   1797          
   1798           return ( ZFailure );
   1799          }
   1800          
   1801          /*********************************************************************
   1802           * @fn      zclClosures_ProcessInDoorLockGetYearDayScheduleRsp
   1803           *
   1804           * @brief   Process in the received Get Year Day Schedule Response cmd
   1805           *
   1806           * @param   pInMsg - pointer to the incoming message
   1807           * @param   pCBs - pointer to the application callbacks
   1808           *
   1809           * @return  ZStatus_t
   1810           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine132_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine133_0
   \   000001                ; // Fall through to label ??Subroutine133_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1811          static ZStatus_t zclClosures_ProcessInDoorLockGetYearDayScheduleRsp( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockGetYearDayScheduleRsp:
   1812                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs )
   1813          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1814           if ( pCBs->pfnDoorLockGetYearDayScheduleRsp )
   \   00000A   EC           MOV       A,R4
   \   00000B   244A         ADD       A,#0x4a
   \   00000D   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000010   12....       LCALL     ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   000013   7003         JNZ       $+5
   \   000015   02....       LJMP      ??zclClosures_ProcessInDoorLockGetYearDaySchedu_1 & 0xFFFF
   1815           {
   1816             zclDoorLockGetYearDayScheduleRsp_t cmd;
   1817          
   1818             cmd.scheduleID = pInMsg->pData[0];
   \   000018   12....       LCALL     ?Subroutine29 & 0xFFFF
   1819             cmd.userID = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   \                     ??CrossCallReturnLabel_67:
   \   00001B   FD           MOV       R5,A
   \   00001C   8C82         MOV       DPL,R4
   \   00001E   8D83         MOV       DPH,R5
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F5..         MOV       ?V2,A
   \   000024   8C82         MOV       DPL,R4
   \   000026   8D83         MOV       DPH,R5
   \   000028   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   E5..         MOV       A,?V0
   \   000030   F0           MOVX      @DPTR,A
   \   000031   A3           INC       DPTR
   \   000032   E5..         MOV       A,?V1
   \   000034   12....       LCALL     ?Subroutine80 & 0xFFFF
   1820             cmd.status = pInMsg->pData[3];
   \                     ??CrossCallReturnLabel_188:
   \   000037   E0           MOVX      A,@DPTR
   \   000038   FC           MOV       R4,A
   \   000039   7403         MOV       A,#0x3
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   EC           MOV       A,R4
   \   00003F   F0           MOVX      @DPTR,A
   1821          
   1822             if ( cmd.status == ZCL_STATUS_SUCCESS )
   \   000040   6003         JZ        $+5
   \   000042   02....       LJMP      ??zclClosures_ProcessInDoorLockGetYearDaySchedu_2 & 0xFFFF
   1823             {
   1824               cmd.zigBeeLocalStartTime = BUILD_UINT32( pInMsg->pData[4], pInMsg->pData[5], pInMsg->pData[6], pInMsg->pData[7] );
   \   000045   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000048   12....       LCALL     ??Subroutine149_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   00004B   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   00004E   12....       LCALL     ?L_SHL
   \   000051   78..         MOV       R0,#?V0
   \   000053   79..         MOV       R1,#?V4
   \   000055   12....       LCALL     ?L_ADD
   \   000058   8C82         MOV       DPL,R4
   \   00005A   8D83         MOV       DPH,R5
   \   00005C   12....       LCALL     ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   00005F   12....       LCALL     ?L_SHL
   \   000062   78..         MOV       R0,#?V0
   \   000064   79..         MOV       R1,#?V4
   \   000066   12....       LCALL     ?L_ADD
   \   000069   8C82         MOV       DPL,R4
   \   00006B   8D83         MOV       DPH,R5
   \   00006D   12....       LCALL     ??Subroutine155_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   000070   12....       LCALL     ?L_SHL
   \   000073   78..         MOV       R0,#?V0
   \   000075   79..         MOV       R1,#?V4
   \   000077   12....       LCALL     ?L_ADD
   \   00007A   7404         MOV       A,#0x4
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   78..         MOV       R0,#?V0
   \   000081   12....       LCALL     ?L_MOV_TO_X
   1825               cmd.zigBeeLocalEndTime = BUILD_UINT32( pInMsg->pData[8], pInMsg->pData[9], pInMsg->pData[10], pInMsg->pData[11] );
   \   000084   8C82         MOV       DPL,R4
   \   000086   8D83         MOV       DPH,R5
   \   000088   A3           INC       DPTR
   \   000089   12....       LCALL     ?Subroutine31 & 0xFFFF
   1826             }
   \                     ??CrossCallReturnLabel_361:
   \   00008C   A3           INC       DPTR
   \   00008D   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000090   12....       LCALL     ?L_SHL
   \   000093   78..         MOV       R0,#?V0
   \   000095   79..         MOV       R1,#?V4
   \   000097   12....       LCALL     ?L_ADD
   \   00009A   8C82         MOV       DPL,R4
   \   00009C   8D83         MOV       DPH,R5
   \   00009E   A3           INC       DPTR
   \   00009F   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   0000A2   12....       LCALL     ?L_SHL
   \   0000A5   78..         MOV       R0,#?V0
   \   0000A7   79..         MOV       R1,#?V4
   \   0000A9   12....       LCALL     ?L_ADD
   \   0000AC   EC           MOV       A,R4
   \   0000AD   240B         ADD       A,#0xb
   \   0000AF   F582         MOV       DPL,A
   \   0000B1   E4           CLR       A
   \   0000B2   3D           ADDC      A,R5
   \   0000B3   F583         MOV       DPH,A
   \   0000B5   12....       LCALL     ??Subroutine159_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   0000B8   12....       LCALL     ?L_SHL
   \   0000BB   78..         MOV       R0,#?V0
   \   0000BD   79..         MOV       R1,#?V4
   \   0000BF   12....       LCALL     ?L_ADD
   \   0000C2   7408         MOV       A,#0x8
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   78..         MOV       R0,#?V0
   \   0000C9   12....       LCALL     ?L_MOV_TO_X
   1827          
   1828             return ( pCBs->pfnDoorLockGetYearDayScheduleRsp( pInMsg, &cmd ) );
   \                     ??zclClosures_ProcessInDoorLockGetYearDaySchedu_2:
   \   0000CC                ; Setup parameters for indirect call
   \   0000CC   AC..         MOV       R4,?XSP + 0
   \   0000CE   AD..         MOV       R5,?XSP + 1
   \   0000D0   8E82         MOV       DPL,R6
   \   0000D2   8F83         MOV       DPH,R7
   \   0000D4   12....       LCALL     ??Subroutine152_0 & 0xFFFF
   1829           }
   \                     ??CrossCallReturnLabel_369:
   \   0000D7   12....       LCALL     ?CALL_IND
   \   0000DA   8002         SJMP      ??zclClosures_ProcessInDoorLockGetYearDaySchedu_3
   1830          
   1831           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockGetYearDaySchedu_1:
   \   0000DC   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockGetYearDaySchedu_3:
   \   0000DE   740C         MOV       A,#0xc
   \   0000E0   02....       LJMP      ??Subroutine127_0 & 0xFFFF
   1832          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004                REQUIRE ??Subroutine146_0
   \   000004                ; // Fall through to label ??Subroutine146_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET
   1833          
   1834          /*********************************************************************
   1835           * @fn      zclClosures_ProcessInDoorLockClearYearDayScheduleRsp
   1836           *
   1837           * @brief   Process in the received Clear Year Day Schedule Response cmd
   1838           *
   1839           * @param   pInMsg - pointer to the incoming message
   1840           * @param   pCBs - pointer to the application callbacks
   1841           *
   1842           * @return  ZStatus_t
   1843           */
   1844          static ZStatus_t zclClosures_ProcessInDoorLockClearYearDayScheduleRsp( zclIncoming_t *pInMsg,
   1845                                                                                 zclClosures_DoorLockAppCallbacks_t *pCBs )
   1846          {
   1847           if ( pCBs->pfnDoorLockClearYearDayScheduleRsp )
   1848           {
   1849             return ( pCBs->pfnDoorLockClearYearDayScheduleRsp( pInMsg, pInMsg->pData[0] ) );
   1850           }
   1851          
   1852           return ( ZFailure );
   1853          }
   1854          
   1855          /*********************************************************************
   1856           * @fn      zclClosures_ProcessInDoorLockSetHolidayScheduleRsp
   1857           *
   1858           * @brief   Process in the received Set Holiday Schedule Response cmd
   1859           *
   1860           * @param   pInMsg - pointer to the incoming message
   1861           * @param   pCBs - pointer to the application callbacks
   1862           *
   1863           * @return  ZStatus_t
   1864           */
   1865          static ZStatus_t zclClosures_ProcessInDoorLockSetHolidayScheduleRsp( zclIncoming_t *pInMsg,
   1866                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs )
   1867          {
   1868           if ( pCBs->pfnDoorLockSetHolidayScheduleRsp )
   1869           {
   1870             return ( pCBs->pfnDoorLockSetHolidayScheduleRsp( pInMsg, pInMsg->pData[0] ) );
   1871           }
   1872          
   1873           return ( ZFailure );
   1874          }
   1875          
   1876          /*********************************************************************
   1877           * @fn      zclClosures_ProcessInDoorLockGetHolidayScheduleRsp
   1878           *
   1879           * @brief   Process in the received Get Holiday Schedule Response cmd
   1880           *
   1881           * @param   pInMsg - pointer to the incoming message
   1882           * @param   pCBs - pointer to the application callbacks
   1883           *
   1884           * @return  ZStatus_t
   1885           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1886          static ZStatus_t zclClosures_ProcessInDoorLockGetHolidayScheduleRsp( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockGetHolidayScheduleRsp:
   1887                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs )
   1888          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1889           if ( pCBs->pfnDoorLockGetHolidayScheduleRsp )
   \   00000A   EC           MOV       A,R4
   \   00000B   2450         ADD       A,#0x50
   \   00000D   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000010   12....       LCALL     ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000013   7003         JNZ       $+5
   \   000015   02....       LJMP      ??zclClosures_ProcessInDoorLockGetHolidaySchedu_1 & 0xFFFF
   1890           {
   1891             zclDoorLockGetHolidayScheduleRsp_t cmd;
   1892          
   1893             cmd.holidayScheduleID = pInMsg->pData[0];
   \   000018   12....       LCALL     ?Subroutine29 & 0xFFFF
   1894             cmd.status = pInMsg->pData[1];
   \                     ??CrossCallReturnLabel_68:
   \   00001B   F583         MOV       DPH,A
   \   00001D   8C82         MOV       DPL,R4
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   FC           MOV       R4,A
   \   000022   7401         MOV       A,#0x1
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   EC           MOV       A,R4
   \   000028   F0           MOVX      @DPTR,A
   1895          
   1896             if ( cmd.status == ZCL_STATUS_SUCCESS )
   \   000029   6003         JZ        $+5
   \   00002B   02....       LJMP      ??zclClosures_ProcessInDoorLockGetHolidaySchedu_2 & 0xFFFF
   1897             {
   1898               cmd.zigBeeLocalStartTime = BUILD_UINT32( pInMsg->pData[2], pInMsg->pData[3], pInMsg->pData[4], pInMsg->pData[5] );
   \   00002E   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   000031   12....       LCALL     ??Subroutine151_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   000034   12....       LCALL     ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000037   12....       LCALL     ?L_SHL
   \   00003A   78..         MOV       R0,#?V0
   \   00003C   79..         MOV       R1,#?V4
   \   00003E   12....       LCALL     ?L_ADD
   \   000041   8C82         MOV       DPL,R4
   \   000043   8D83         MOV       DPH,R5
   \   000045   12....       LCALL     ??Subroutine140_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000048   12....       LCALL     ?L_SHL
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   79..         MOV       R1,#?V4
   \   00004F   12....       LCALL     ?L_ADD
   \   000052   8C82         MOV       DPL,R4
   \   000054   8D83         MOV       DPH,R5
   \   000056   12....       LCALL     ??Subroutine157_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000059   12....       LCALL     ?L_SHL
   \   00005C   78..         MOV       R0,#?V0
   \   00005E   79..         MOV       R1,#?V4
   \   000060   12....       LCALL     ?L_ADD
   \   000063   7402         MOV       A,#0x2
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?L_MOV_TO_X
   1899               cmd.zigBeeLocalEndTime = BUILD_UINT32( pInMsg->pData[6], pInMsg->pData[7], pInMsg->pData[8], pInMsg->pData[9] );
   \   00006D   8C82         MOV       DPL,R4
   \   00006F   8D83         MOV       DPH,R5
   \   000071   12....       LCALL     ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   000074   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000077   12....       LCALL     ?L_SHL
   \   00007A   78..         MOV       R0,#?V0
   \   00007C   79..         MOV       R1,#?V4
   \   00007E   12....       LCALL     ?L_ADD
   \   000081   8C82         MOV       DPL,R4
   \   000083   8D83         MOV       DPH,R5
   \   000085   12....       LCALL     ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000088   12....       LCALL     ?L_SHL
   \   00008B   78..         MOV       R0,#?V0
   \   00008D   79..         MOV       R1,#?V4
   \   00008F   12....       LCALL     ?L_ADD
   \   000092   8C82         MOV       DPL,R4
   \   000094   8D83         MOV       DPH,R5
   \   000096   12....       LCALL     ??Subroutine153_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   000099   12....       LCALL     ?L_SHL
   \   00009C   78..         MOV       R0,#?V0
   \   00009E   79..         MOV       R1,#?V4
   \   0000A0   12....       LCALL     ?L_ADD
   \   0000A3   7406         MOV       A,#0x6
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   78..         MOV       R0,#?V0
   \   0000AA   12....       LCALL     ?L_MOV_TO_X
   1900               cmd.operatingModeDuringHoliday = pInMsg->pData[10];
   \   0000AD   8C82         MOV       DPL,R4
   \   0000AF   8D83         MOV       DPH,R5
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   C0E0         PUSH      A
   \   0000BE   740A         MOV       A,#0xa
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   D0E0         POP       A
   \   0000C5   F0           MOVX      @DPTR,A
   1901             }
   1902          
   1903             return ( pCBs->pfnDoorLockGetHolidayScheduleRsp( pInMsg, &cmd ) );
   \                     ??zclClosures_ProcessInDoorLockGetHolidaySchedu_2:
   \   0000C6                ; Setup parameters for indirect call
   \   0000C6   AC..         MOV       R4,?XSP + 0
   \   0000C8   AD..         MOV       R5,?XSP + 1
   \   0000CA   8E82         MOV       DPL,R6
   \   0000CC   8F83         MOV       DPH,R7
   \   0000CE   12....       LCALL     ??Subroutine152_0 & 0xFFFF
   1904           }
   \                     ??CrossCallReturnLabel_370:
   \   0000D1   12....       LCALL     ?CALL_IND
   \   0000D4   8002         SJMP      ??zclClosures_ProcessInDoorLockGetHolidaySchedu_3
   1905          
   1906           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockGetHolidaySchedu_1:
   \   0000D6   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockGetHolidaySchedu_3:
   \   0000D8   02....       LJMP      ?Subroutine7 & 0xFFFF
   1907          }
   1908          
   1909          /*********************************************************************
   1910           * @fn      zclClosures_ProcessInDoorLockClearHolidayScheduleRsp
   1911           *
   1912           * @brief   Process in the received Clear Holiday Schedule Response cmd
   1913           *
   1914           * @param   pInMsg - pointer to the incoming message
   1915           * @param   pCBs - pointer to the application callbacks
   1916           *
   1917           * @return  ZStatus_t
   1918           */
   1919          static ZStatus_t zclClosures_ProcessInDoorLockClearHolidayScheduleRsp( zclIncoming_t *pInMsg,
   1920                                                                                 zclClosures_DoorLockAppCallbacks_t *pCBs )
   1921          {
   1922           if ( pCBs->pfnDoorLockClearHolidayScheduleRsp )
   1923           {
   1924             return ( pCBs->pfnDoorLockClearHolidayScheduleRsp( pInMsg, pInMsg->pData[0] ) );
   1925           }
   1926          
   1927           return ( ZFailure );
   1928          }
   1929          
   1930          /*********************************************************************
   1931           * @fn      zclClosures_ProcessInDoorLockSetUserTypeRsp
   1932           *
   1933           * @brief   Process in the received Set User Type Response cmd
   1934           *
   1935           * @param   pInMsg - pointer to the incoming message
   1936           * @param   pCBs - pointer to the application callbacks
   1937           *
   1938           * @return  ZStatus_t
   1939           */
   1940          static ZStatus_t zclClosures_ProcessInDoorLockSetUserTypeRsp( zclIncoming_t *pInMsg,
   1941                                                                        zclClosures_DoorLockAppCallbacks_t *pCBs )
   1942          {
   1943           if ( pCBs->pfnDoorLockSetUserTypeRsp )
   1944           {
   1945             return ( pCBs->pfnDoorLockSetUserTypeRsp( pInMsg, pInMsg->pData[0] ) );
   1946           }
   1947          
   1948           return ( ZFailure );
   1949          }
   1950          
   1951          /*********************************************************************
   1952           * @fn      zclClosures_ProcessInDoorLockGetUserTypeRsp
   1953           *
   1954           * @brief   Process in the received Get User Type Response cmd
   1955           *
   1956           * @param   pInMsg - pointer to the incoming message
   1957           * @param   pCBs - pointer to the application callbacks
   1958           *
   1959           * @return  ZStatus_t
   1960           */
   1961          static ZStatus_t zclClosures_ProcessInDoorLockGetUserTypeRsp( zclIncoming_t *pInMsg,
   1962                                                                        zclClosures_DoorLockAppCallbacks_t *pCBs )
   1963          {
   1964           if ( pCBs->pfnDoorLockGetUserTypeRsp )
   1965           {
   1966             zclDoorLockGetUserTypeRsp_t cmd;
   1967          
   1968             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1969             cmd.userType = pInMsg->pData[2];
   1970          
   1971             return ( pCBs->pfnDoorLockGetUserTypeRsp( pInMsg, &cmd ) );
   1972           }
   1973          
   1974           return ( ZFailure );
   1975          }
   1976          
   1977          /*********************************************************************
   1978           * @fn      zclClosures_ProcessInDoorLockSetRFIDCodeRsp
   1979           *
   1980           * @brief   Process in the received Set RFID Code Response cmd
   1981           *
   1982           * @param   pInMsg - pointer to the incoming message
   1983           * @param   pCBs - pointer to the application callbacks
   1984           *
   1985           * @return  ZStatus_t
   1986           */
   1987          static ZStatus_t zclClosures_ProcessInDoorLockSetRFIDCodeRsp( zclIncoming_t *pInMsg,
   1988                                                                        zclClosures_DoorLockAppCallbacks_t *pCBs )
   1989          {
   1990           if ( pCBs->pfnDoorLockSetRFIDCodeRsp )
   1991           {
   1992             return ( pCBs->pfnDoorLockSetRFIDCodeRsp( pInMsg, pInMsg->pData[0] ) );
   1993           }
   1994          
   1995           return ( ZFailure );
   1996          }
   1997          
   1998          /*********************************************************************
   1999           * @fn      zclClosures_ProcessInDoorLockGetRFIDCodeRsp
   2000           *
   2001           * @brief   Process in the received Get RFID Code Response cmd
   2002           *
   2003           * @param   pInMsg - pointer to the incoming message
   2004           * @param   pCBs - pointer to the application callbacks
   2005           *
   2006           * @return  ZStatus_t
   2007           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2008          static ZStatus_t zclClosures_ProcessInDoorLockGetRFIDCodeRsp( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockGetRFIDCodeRsp:
   2009                                                                        zclClosures_DoorLockAppCallbacks_t *pCBs )
   2010          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2011            ZStatus_t status;
   2012          
   2013            if ( pCBs->pfnDoorLockGetRFIDCodeRsp )
   \   00000E   EC           MOV       A,R4
   \   00000F   245A         ADD       A,#0x5a
   \   000011   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   000014   6072         JZ        ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_0
   2014            {
   2015              uint8 i;
   2016              uint8 offset;
   2017              uint8 calculatedArrayLen;
   2018              zclDoorLockGetRFIDCodeRsp_t cmd;
   2019          
   2020              // first octet of PIN/RFID Code variable string identifies its length
   2021              calculatedArrayLen = pInMsg->pData[4] + 1; // add first byte of string
   \   000016   12....       LCALL     ?Subroutine20 & 0xFFFF
   2022          
   2023              cmd.pRfidCode = zcl_mem_alloc( calculatedArrayLen );
   \                     ??CrossCallReturnLabel_54:
   \   000019   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001C   8A..         MOV       ?V6,R2
   \   00001E   8B..         MOV       ?V7,R3
   \   000020   A8..         MOV       R0,?V6
   \   000022   A9..         MOV       R1,?V7
   \   000024   7404         MOV       A,#0x4
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   12....       LCALL     ?Subroutine61 & 0xFFFF
   2024              if ( !cmd.pRfidCode )
   \                     ??CrossCallReturnLabel_145:
   \   00002C   7004         JNZ       ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_1
   2025              {
   2026                return ( ZMemError );  // no memory
   \   00002E   7910         MOV       R1,#0x10
   \   000030   8058         SJMP      ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_2
   2027              }
   2028          
   2029              cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \                     ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_1:
   \   000032   12....       LCALL     ?Subroutine11 & 0xFFFF
   2030              cmd.userStatus = pInMsg->pData[2];
   \                     ??CrossCallReturnLabel_7:
   \   000035   C0E0         PUSH      A
   \   000037   7402         MOV       A,#0x2
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   D0E0         POP       A
   \   00003E   12....       LCALL     ?Subroutine24 & 0xFFFF
   2031              cmd.userType = pInMsg->pData[3];
   \                     ??CrossCallReturnLabel_64:
   \   000041   C0E0         PUSH      A
   \   000043   7403         MOV       A,#0x3
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   D0E0         POP       A
   \   00004A   12....       LCALL     ?Subroutine73 & 0xFFFF
   2032              offset = 4;
   2033              for ( i = 0; i < calculatedArrayLen; i++ )
   \                     ??CrossCallReturnLabel_171:
   \   00004D   801C         SJMP      ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_3
   2034              {
   2035                cmd.pRfidCode[i] = pInMsg->pData[offset++];
   \                     ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_4:
   \   00004F   E9           MOV       A,R1
   \   000050   FA           MOV       R2,A
   \   000051   85..82       MOV       DPL,?V2
   \   000054   85..83       MOV       DPH,?V3
   \   000057   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   2036              }
   \                     ??CrossCallReturnLabel_424:
   \   00005A   C0E0         PUSH      A
   \   00005C   E8           MOV       A,R0
   \   00005D   FA           MOV       R2,A
   \   00005E   7404         MOV       A,#0x4
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000066   D0E0         POP       A
   \   000068   F0           MOVX      @DPTR,A
   \   000069   09           INC       R1
   \   00006A   08           INC       R0
   \                     ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_3:
   \   00006B   E8           MOV       A,R0
   \   00006C   C3           CLR       C
   \   00006D   95..         SUBB      A,?V4
   \   00006F   40DE         JC        ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_4
   2037          
   2038              status = ( pCBs->pfnDoorLockGetRFIDCodeRsp( pInMsg, &cmd ) );
   \   000071                ; Setup parameters for indirect call
   \   000071   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   000074   12....       LCALL     ?CALL_IND
   \   000077   E9           MOV       A,R1
   \   000078   FE           MOV       R6,A
   2039              zcl_mem_free( cmd.pRfidCode );
   \   000079                ; Setup parameters for call to function osal_mem_free
   \   000079   7404         MOV       A,#0x4
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000081   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2040              return status;
   \   000084   EE           MOV       A,R6
   \   000085   F9           MOV       R1,A
   \   000086   8002         SJMP      ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_2
   2041            }
   2042          
   2043           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_0:
   \   000088   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_2:
   \   00008A   02....       LJMP      ?Subroutine2 & 0xFFFF
   2044          }
   2045          
   2046          /*********************************************************************
   2047           * @fn      zclClosures_ProcessInDoorLockClearRFIDCodeRsp
   2048           *
   2049           * @brief   Process in the received Clear RFID Code Response cmd
   2050           *
   2051           * @param   pInMsg - pointer to the incoming message
   2052           * @param   pCBs - pointer to the application callbacks
   2053           *
   2054           * @return  ZStatus_t
   2055           */
   2056          static ZStatus_t zclClosures_ProcessInDoorLockClearRFIDCodeRsp( zclIncoming_t *pInMsg,
   2057                                                                          zclClosures_DoorLockAppCallbacks_t *pCBs )
   2058          {
   2059           if ( pCBs->pfnDoorLockClearRFIDCodeRsp )
   2060           {
   2061             return ( pCBs->pfnDoorLockClearRFIDCodeRsp( pInMsg, pInMsg->pData[0] ) );
   2062           }
   2063          
   2064           return ( ZFailure );
   2065          }
   2066          
   2067          /*********************************************************************
   2068           * @fn      zclClosures_ProcessInDoorLockClearAllRFIDCodesRsp
   2069           *
   2070           * @brief   Process in the received Clear All RFID Codes Response cmd
   2071           *
   2072           * @param   pInMsg - pointer to the incoming message
   2073           * @param   pCBs - pointer to the application callbacks
   2074           *
   2075           * @return  ZStatus_t
   2076           */
   2077          static ZStatus_t zclClosures_ProcessInDoorLockClearAllRFIDCodesRsp( zclIncoming_t *pInMsg,
   2078                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs )
   2079          {
   2080           if ( pCBs->pfnDoorLockClearAllRFIDCodesRsp )
   2081           {
   2082             return ( pCBs->pfnDoorLockClearAllRFIDCodesRsp( pInMsg, pInMsg->pData[0] ) );
   2083           }
   2084          
   2085           return ( ZFailure );
   2086          }
   2087          
   2088          /*********************************************************************
   2089           * @fn      zclClosures_ProcessInDoorLockOperationEventNotification
   2090           *
   2091           * @brief   Process in the received Operation Event Notification cmd
   2092           *
   2093           * @param   pInMsg - pointer to the incoming message
   2094           * @param   pCBs - pointer to the application callbacks
   2095           *
   2096           * @return  ZStatus_t
   2097           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine132_0
   \   000001                ; // Fall through to label ??Subroutine132_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2098          static ZStatus_t zclClosures_ProcessInDoorLockOperationEventNotification( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockOperationEventNotification:
   2099                                                                                    zclClosures_DoorLockAppCallbacks_t *pCBs )
   2100          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V12,R2
   \   00000C   8B..         MOV       ?V13,R3
   2101            uint8 i;
   2102            uint8 offset;
   2103            uint8 calculatedArrayLen;
   2104            zclDoorLockOperationEventNotification_t cmd;
   2105            ZStatus_t status;
   2106          
   2107           if ( pCBs->pfnDoorLockOperationEventNotification )
   \   00000E   EC           MOV       A,R4
   \   00000F   2460         ADD       A,#0x60
   \   000011   F5..         MOV       ?V10,A
   \   000013   E4           CLR       A
   \   000014   3D           ADDC      A,R5
   \   000015   F5..         MOV       ?V11,A
   \   000017   85..82       MOV       DPL,?V10
   \   00001A   12....       LCALL     ??Subroutine143_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   00001D   7003         JNZ       $+5
   \   00001F   02....       LJMP      ??zclClosures_ProcessInDoorLockOperationEventNo_1 & 0xFFFF
   2108           {
   2109              calculatedArrayLen = pInMsg->pData[9] + 1;  // add first byte of string
   \   000022   EA           MOV       A,R2
   \   000023   2408         ADD       A,#0x8
   \   000025   FE           MOV       R6,A
   \   000026   E4           CLR       A
   \   000027   35..         ADDC      A,?V13
   \   000029   FF           MOV       R7,A
   \   00002A   12....       LCALL     ??Subroutine142_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   00002D   2409         ADD       A,#0x9
   \   00002F   F582         MOV       DPL,A
   \   000031   E4           CLR       A
   \   000032   38           ADDC      A,R0
   \   000033   F583         MOV       DPH,A
   \   000035   E0           MOVX      A,@DPTR
   \   000036   04           INC       A
   \   000037   F5..         MOV       ?V8,A
   2110          
   2111              cmd.pData = zcl_mem_alloc( calculatedArrayLen );
   \   000039                ; Setup parameters for call to function osal_mem_alloc
   \   000039   FA           MOV       R2,A
   \   00003A   7B00         MOV       R3,#0x0
   \   00003C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003F   8A..         MOV       ?V0,R2
   \   000041   8B..         MOV       ?V1,R3
   \   000043   A8..         MOV       R0,?V0
   \   000045   A9..         MOV       R1,?V1
   \   000047   7409         MOV       A,#0x9
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   12....       LCALL     ?Subroutine61 & 0xFFFF
   2112              if ( !cmd.pData )
   \                     ??CrossCallReturnLabel_146:
   \   00004F   7005         JNZ       ??zclClosures_ProcessInDoorLockOperationEventNo_2
   2113              {
   2114                return ( ZMemError );  // no memory
   \   000051   7910         MOV       R1,#0x10
   \   000053   02....       LJMP      ??zclClosures_ProcessInDoorLockOperationEventNo_3 & 0xFFFF
   2115              }
   2116          
   2117              cmd.operationEventSource = pInMsg->pData[0];
   \                     ??zclClosures_ProcessInDoorLockOperationEventNo_2:
   \   000056   12....       LCALL     ?Subroutine23 & 0xFFFF
   2118              cmd.operationEventCode = pInMsg->pData[1];
   \                     ??CrossCallReturnLabel_59:
   \   000059   C0E0         PUSH      A
   \   00005B   7401         MOV       A,#0x1
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   D0E0         POP       A
   \   000062   12....       LCALL     ?Subroutine27 & 0xFFFF
   2119              cmd.userID = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   \                     ??CrossCallReturnLabel_65:
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   12....       LCALL     ?Subroutine63 & 0xFFFF
   2120              cmd.pin = pInMsg->pData[4];
   \                     ??CrossCallReturnLabel_148:
   \   00006B   C0E0         PUSH      A
   \   00006D   7404         MOV       A,#0x4
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   D0E0         POP       A
   \   000074   12....       LCALL     ?Subroutine36 & 0xFFFF
   2121              cmd.zigBeeLocalTime = BUILD_UINT32( pInMsg->pData[5], pInMsg->pData[6], pInMsg->pData[7], pInMsg->pData[8] );
   \                     ??CrossCallReturnLabel_395:
   \   000077   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   00007A   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   00007D   12....       LCALL     ?L_SHL
   \   000080   78..         MOV       R0,#?V0
   \   000082   79..         MOV       R1,#?V4
   \   000084   12....       LCALL     ?L_ADD
   \   000087   8A82         MOV       DPL,R2
   \   000089   8B83         MOV       DPH,R3
   \   00008B   12....       LCALL     ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   00008E   12....       LCALL     ?L_SHL
   \   000091   78..         MOV       R0,#?V0
   \   000093   79..         MOV       R1,#?V4
   \   000095   12....       LCALL     ?L_ADD
   \   000098   8A82         MOV       DPL,R2
   \   00009A   8B83         MOV       DPH,R3
   \   00009C   12....       LCALL     ??Subroutine154_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   00009F   12....       LCALL     ?L_SHL
   \   0000A2   78..         MOV       R0,#?V0
   \   0000A4   79..         MOV       R1,#?V4
   \   0000A6   12....       LCALL     ?L_ADD
   \   0000A9   7405         MOV       A,#0x5
   \   0000AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL     ?Subroutine65 & 0xFFFF
   2122              offset = 9;
   \                     ??CrossCallReturnLabel_152:
   \   0000B1   7909         MOV       R1,#0x9
   2123              for ( i = 0; i < calculatedArrayLen; i++ )
   \   0000B3   7800         MOV       R0,#0x0
   \   0000B5   801A         SJMP      ??zclClosures_ProcessInDoorLockOperationEventNo_4
   2124              {
   2125                cmd.pData[i] = pInMsg->pData[offset++];
   \                     ??zclClosures_ProcessInDoorLockOperationEventNo_5:
   \   0000B7   E9           MOV       A,R1
   \   0000B8   FA           MOV       R2,A
   \   0000B9   8E82         MOV       DPL,R6
   \   0000BB   8F83         MOV       DPH,R7
   \   0000BD   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   2126              }
   \                     ??CrossCallReturnLabel_425:
   \   0000C0   C0E0         PUSH      A
   \   0000C2   E8           MOV       A,R0
   \   0000C3   FA           MOV       R2,A
   \   0000C4   7409         MOV       A,#0x9
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000CC   D0E0         POP       A
   \   0000CE   F0           MOVX      @DPTR,A
   \   0000CF   09           INC       R1
   \   0000D0   08           INC       R0
   \                     ??zclClosures_ProcessInDoorLockOperationEventNo_4:
   \   0000D1   E8           MOV       A,R0
   \   0000D2   C3           CLR       C
   \   0000D3   95..         SUBB      A,?V8
   \   0000D5   40E0         JC        ??zclClosures_ProcessInDoorLockOperationEventNo_5
   2127          
   2128              status = ( pCBs->pfnDoorLockOperationEventNotification( pInMsg, &cmd ) );
   \   0000D7                ; Setup parameters for indirect call
   \   0000D7   AC..         MOV       R4,?XSP + 0
   \   0000D9   AD..         MOV       R5,?XSP + 1
   \   0000DB   AA..         MOV       R2,?V12
   \   0000DD   AB..         MOV       R3,?V13
   \   0000DF   85..82       MOV       DPL,?V10
   \   0000E2   85..83       MOV       DPH,?V11
   \   0000E5   12....       LCALL     ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   0000E8   12....       LCALL     ?CALL_IND
   \   0000EB   E9           MOV       A,R1
   \   0000EC   FE           MOV       R6,A
   2129              zcl_mem_free( cmd.pData );
   \   0000ED                ; Setup parameters for call to function osal_mem_free
   \   0000ED   7409         MOV       A,#0x9
   \   0000EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F2   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0000F5   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2130              return status;
   \   0000F8   EE           MOV       A,R6
   \   0000F9   F9           MOV       R1,A
   \   0000FA   8002         SJMP      ??zclClosures_ProcessInDoorLockOperationEventNo_3
   2131            }
   2132           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockOperationEventNo_1:
   \   0000FC   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockOperationEventNo_3:
   \   0000FE   740B         MOV       A,#0xb
   \   000100   02....       LJMP      ??Subroutine169_0 & 0xFFFF
   2133          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine160_0
   \   000001                ; // Fall through to label ??Subroutine160_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine161_0
   \   000003                ; // Fall through to label ??Subroutine161_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   E5..         MOV       A,?V0
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E5..         MOV       A,?V1
   \   000006   F0           MOVX      @DPTR,A
   \   000007   A3           INC       DPTR
   \   000008   E5..         MOV       A,?V2
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   E5..         MOV       A,?V3
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   EA           MOV       A,R2
   \   000001   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000003   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FC           MOV       R4,A
   \   00000A   8882         MOV       DPL,R0
   \   00000C   8983         MOV       DPH,R1
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   FB           MOV       R3,A
   \   000013   EC           MOV       A,R4
   \   000014   FA           MOV       R2,A
   \   000015   7402         MOV       A,#0x2
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000007   85..82       MOV       DPL,?XSP + 0
   \   00000A   85..83       MOV       DPH,?XSP + 1
   \   00000D   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000010   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   22           RET
   2134          
   2135          /*********************************************************************
   2136           * @fn      zclClosures_ProcessInDoorLockProgrammingEventNotification
   2137           *
   2138           * @brief   Process in the received Programming Event Notification cmd
   2139           *
   2140           * @param   pInMsg - pointer to the incoming message
   2141           * @param   pCBs - pointer to the application callbacks
   2142           *
   2143           * @return  ZStatus_t
   2144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2145          static ZStatus_t zclClosures_ProcessInDoorLockProgrammingEventNotification( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockProgrammingEventNotification:
   2146                                                                                      zclClosures_DoorLockAppCallbacks_t *pCBs )
   2147          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V12,R2
   \   00000C   8B..         MOV       ?V13,R3
   2148            uint8 i;
   2149            uint8 offset;
   2150            uint8 calculatedArrayLen;
   2151            zclDoorLockProgrammingEventNotification_t cmd;
   2152            ZStatus_t status;
   2153          
   2154            if ( pCBs->pfnDoorLockProgrammingEventNotification )
   \   00000E   EC           MOV       A,R4
   \   00000F   2462         ADD       A,#0x62
   \   000011   F5..         MOV       ?V8,A
   \   000013   E4           CLR       A
   \   000014   3D           ADDC      A,R5
   \   000015   F5..         MOV       ?V9,A
   \   000017   85..82       MOV       DPL,?V8
   \   00001A   12....       LCALL     ??Subroutine143_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   00001D   7003         JNZ       $+5
   \   00001F   02....       LJMP      ??zclClosures_ProcessInDoorLockProgrammingEvent_1 & 0xFFFF
   2155            {
   2156              calculatedArrayLen = pInMsg->pData[11] + 1; // add first byte of string
   \   000022   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000025   F5..         MOV       ?V10,A
   2157          
   2158              cmd.pData = zcl_mem_alloc( calculatedArrayLen );
   \   000027                ; Setup parameters for call to function osal_mem_alloc
   \   000027   FA           MOV       R2,A
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002D   8A..         MOV       ?V0,R2
   \   00002F   8B..         MOV       ?V1,R3
   \   000031   A8..         MOV       R0,?V0
   \   000033   A9..         MOV       R1,?V1
   \   000035   740B         MOV       A,#0xb
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   12....       LCALL     ?Subroutine61 & 0xFFFF
   2159              if ( !cmd.pData )
   \                     ??CrossCallReturnLabel_147:
   \   00003D   7005         JNZ       ??zclClosures_ProcessInDoorLockProgrammingEvent_2
   2160              {
   2161                return ( ZMemError );  // no memory
   \   00003F   7910         MOV       R1,#0x10
   \   000041   02....       LJMP      ??zclClosures_ProcessInDoorLockProgrammingEvent_3 & 0xFFFF
   2162              }
   2163          
   2164              cmd.programEventSource = pInMsg->pData[0];
   \                     ??zclClosures_ProcessInDoorLockProgrammingEvent_2:
   \   000044   12....       LCALL     ?Subroutine23 & 0xFFFF
   2165              cmd.programEventCode = pInMsg->pData[1];
   \                     ??CrossCallReturnLabel_60:
   \   000047   C0E0         PUSH      A
   \   000049   7401         MOV       A,#0x1
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   D0E0         POP       A
   \   000050   12....       LCALL     ?Subroutine27 & 0xFFFF
   2166              cmd.userID = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   \                     ??CrossCallReturnLabel_66:
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   12....       LCALL     ?Subroutine63 & 0xFFFF
   2167              cmd.pin = pInMsg->pData[4];
   \                     ??CrossCallReturnLabel_149:
   \   000059   C0E0         PUSH      A
   \   00005B   7404         MOV       A,#0x4
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   D0E0         POP       A
   \   000062   12....       LCALL     ?Subroutine75 & 0xFFFF
   2168              cmd.userType = pInMsg->pData[5];
   \                     ??CrossCallReturnLabel_176:
   \   000065   12....       LCALL     ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   C0E0         PUSH      A
   \   000070   7405         MOV       A,#0x5
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   D0E0         POP       A
   \   000077   12....       LCALL     ?Subroutine55 & 0xFFFF
   2169              cmd.userStatus = pInMsg->pData[6];
   \                     ??CrossCallReturnLabel_313:
   \   00007A   2406         ADD       A,#0x6
   \   00007C   F582         MOV       DPL,A
   \   00007E   E4           CLR       A
   \   00007F   38           ADDC      A,R0
   \   000080   F583         MOV       DPH,A
   \   000082   E0           MOVX      A,@DPTR
   \   000083   C0E0         PUSH      A
   \   000085   7406         MOV       A,#0x6
   \   000087   12....       LCALL     ?XSTACK_DISP0_8
   \   00008A   D0E0         POP       A
   \   00008C   12....       LCALL     ?Subroutine36 & 0xFFFF
   2170              cmd.zigBeeLocalTime = BUILD_UINT32( pInMsg->pData[7], pInMsg->pData[8], pInMsg->pData[9], pInMsg->pData[10] );
   \                     ??CrossCallReturnLabel_396:
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000099   12....       LCALL     ?L_SHL
   \   00009C   78..         MOV       R0,#?V0
   \   00009E   79..         MOV       R1,#?V4
   \   0000A0   12....       LCALL     ?L_ADD
   \   0000A3   8A82         MOV       DPL,R2
   \   0000A5   8B83         MOV       DPH,R3
   \   0000A7   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   0000AA   12....       LCALL     ?L_SHL
   \   0000AD   78..         MOV       R0,#?V0
   \   0000AF   79..         MOV       R1,#?V4
   \   0000B1   12....       LCALL     ?L_ADD
   \   0000B4   8A82         MOV       DPL,R2
   \   0000B6   8B83         MOV       DPH,R3
   \   0000B8   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   0000BB   12....       LCALL     ?L_SHL
   \   0000BE   78..         MOV       R0,#?V0
   \   0000C0   79..         MOV       R1,#?V4
   \   0000C2   12....       LCALL     ?L_ADD
   \   0000C5   7407         MOV       A,#0x7
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   12....       LCALL     ?Subroutine65 & 0xFFFF
   2171              offset = 11;
   \                     ??CrossCallReturnLabel_153:
   \   0000CD   790B         MOV       R1,#0xb
   2172              for ( i = 0; i < calculatedArrayLen; i++ )
   \   0000CF   7800         MOV       R0,#0x0
   \   0000D1   801A         SJMP      ??zclClosures_ProcessInDoorLockProgrammingEvent_4
   2173              {
   2174                cmd.pData[i] = pInMsg->pData[offset++];
   \                     ??zclClosures_ProcessInDoorLockProgrammingEvent_5:
   \   0000D3   E9           MOV       A,R1
   \   0000D4   FA           MOV       R2,A
   \   0000D5   8E82         MOV       DPL,R6
   \   0000D7   8F83         MOV       DPH,R7
   \   0000D9   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   2175              }
   \                     ??CrossCallReturnLabel_426:
   \   0000DC   C0E0         PUSH      A
   \   0000DE   E8           MOV       A,R0
   \   0000DF   FA           MOV       R2,A
   \   0000E0   740B         MOV       A,#0xb
   \   0000E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000E8   D0E0         POP       A
   \   0000EA   F0           MOVX      @DPTR,A
   \   0000EB   09           INC       R1
   \   0000EC   08           INC       R0
   \                     ??zclClosures_ProcessInDoorLockProgrammingEvent_4:
   \   0000ED   E8           MOV       A,R0
   \   0000EE   C3           CLR       C
   \   0000EF   95..         SUBB      A,?V10
   \   0000F1   40E0         JC        ??zclClosures_ProcessInDoorLockProgrammingEvent_5
   2176          
   2177              status = ( pCBs->pfnDoorLockProgrammingEventNotification( pInMsg, &cmd ) );
   \   0000F3                ; Setup parameters for indirect call
   \   0000F3   AC..         MOV       R4,?XSP + 0
   \   0000F5   AD..         MOV       R5,?XSP + 1
   \   0000F7   AA..         MOV       R2,?V12
   \   0000F9   AB..         MOV       R3,?V13
   \   0000FB   85..82       MOV       DPL,?V8
   \   0000FE   85..83       MOV       DPH,?V9
   \   000101   12....       LCALL     ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   000104   12....       LCALL     ?CALL_IND
   \   000107   E9           MOV       A,R1
   \   000108   FE           MOV       R6,A
   2178              zcl_mem_free( cmd.pData );
   \   000109                ; Setup parameters for call to function osal_mem_free
   \   000109   740B         MOV       A,#0xb
   \   00010B   12....       LCALL     ?XSTACK_DISP0_8
   \   00010E   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000111   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2179              return status;
   \   000114   EE           MOV       A,R6
   \   000115   F9           MOV       R1,A
   \   000116   8002         SJMP      ??zclClosures_ProcessInDoorLockProgrammingEvent_3
   2180            }
   2181          
   2182           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockProgrammingEvent_1:
   \   000118   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockProgrammingEvent_3:
   \   00011A   02....       LJMP      ?Subroutine3 & 0xFFFF
   2183          }
   2184          
   2185          /*********************************************************************
   2186           * @fn      zclClosures_SendDoorLockRequest
   2187           *
   2188           * @brief   Call to send out a Door Lock Lock/Unlock/Toggle Command
   2189           *
   2190           * @param   srcEP - Sending application's endpoint
   2191           * @param   dstAddr - where you want the message to go
   2192           * @param   cmd - COMMAND_CLOSURES_LOCK_DOOR, COMMAND_CLOSURES_UNLOCK_DOOR, COMMAND_CLOSURES_TOGGLE_DOOR
   2193           * @param   pPayload:
   2194           *           aPinRfidCode - PIN/RFID code in ZCL Octet String Format
   2195           * @param   disableDefaultRsp - decides default response is necessary or not
   2196           * @param   seqNum - sequence number of the command packet
   2197           *
   2198           * @return  ZStatus_t
   2199           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2200          ZStatus_t zclClosures_SendDoorLockRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   \                     zclClosures_SendDoorLockRequest:
   2201                                                     zclDoorLock_t *pPayload,
   2202                                                     uint8 disableDefaultRsp, uint8 seqNum )
   2203          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   8C..         MOV       ?V6,R4
   \   00000D   8D..         MOV       ?V2,R5
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V4,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V5,A
   2204            uint8 i;
   2205            uint8 *pBuf;  // variable length payload
   2206            uint8 calculatedBufSize;
   2207            ZStatus_t status;
   2208          
   2209            // first octet of PIN/RFID Code variable string identifies its length
   2210            calculatedBufSize = pPayload->pPinRfidCode[0] + 1;  // add first byte of string
   \   00001B   85..82       MOV       DPL,?V4
   \   00001E   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000021   F5..         MOV       ?V7,A
   2211          
   2212            pBuf = zcl_mem_alloc( calculatedBufSize );
   \   000023   FE           MOV       R6,A
   \   000024                ; Setup parameters for call to function osal_mem_alloc
   \   000024   FA           MOV       R2,A
   \   000025   7B00         MOV       R3,#0x0
   \   000027   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002A   8A..         MOV       ?V0,R2
   \   00002C   8B..         MOV       ?V1,R3
   2213            if ( !pBuf )
   \   00002E   EA           MOV       A,R2
   \   00002F   45..         ORL       A,?V1
   \   000031   7005         JNZ       ??zclClosures_SendDoorLockRequest_0
   2214            {
   2215              return ( ZMemError );  // no memory
   \   000033   7910         MOV       R1,#0x10
   \   000035   02....       LJMP      ??zclClosures_SendDoorLockRequest_1 & 0xFFFF
   2216            }
   2217          
   2218            // over-the-air is always little endian. Break into a byte stream.
   2219            for ( i = 0; i < calculatedBufSize; i++ )
   \                     ??zclClosures_SendDoorLockRequest_0:
   \   000038   7A00         MOV       R2,#0x0
   \   00003A   801B         SJMP      ??zclClosures_SendDoorLockRequest_2
   2220            {
   2221              pBuf[i] = pPayload->pPinRfidCode[i];
   \                     ??zclClosures_SendDoorLockRequest_3:
   \   00003C   EA           MOV       A,R2
   \   00003D   F8           MOV       R0,A
   \   00003E   85..82       MOV       DPL,?V4
   \   000041   85..83       MOV       DPH,?V5
   \   000044   12....       LCALL     ?Subroutine49 & 0xFFFF
   2222            }
   \                     ??CrossCallReturnLabel_115:
   \   000047   C0E0         PUSH      A
   \   000049   E5..         MOV       A,?V0
   \   00004B   28           ADD       A,R0
   \   00004C   F582         MOV       DPL,A
   \   00004E   E4           CLR       A
   \   00004F   35..         ADDC      A,?V1
   \   000051   F583         MOV       DPH,A
   \   000053   D0E0         POP       A
   \   000055   F0           MOVX      @DPTR,A
   \   000056   0A           INC       R2
   \                     ??zclClosures_SendDoorLockRequest_2:
   \   000057   EA           MOV       A,R2
   \   000058   C3           CLR       C
   \   000059   95..         SUBB      A,?V7
   \   00005B   40DF         JC        ??zclClosures_SendDoorLockRequest_3
   2223          
   2224            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2225                                      cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2226                                      disableDefaultRsp, 0, seqNum, calculatedBufSize, pBuf );
   \   00005D                ; Setup parameters for call to function zcl_SendCommand
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000062   8E..         MOV       ?V4,R6
   \   000064   75..00       MOV       ?V5,#0x0
   \   000067   78..         MOV       R0,#?V4
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006C   741A         MOV       A,#0x1a
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F5..         MOV       ?V4,A
   \   000074   78..         MOV       R0,#?V4
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000079   E4           CLR       A
   \   00007A   F5..         MOV       ?V4,A
   \   00007C   78..         MOV       R0,#?V4
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   E5..         MOV       A,?V2
   \   000083   F5..         MOV       ?V4,A
   \   000085   78..         MOV       R0,#?V4
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008A   75..00       MOV       ?V4,#0x0
   \   00008D   78..         MOV       R0,#?V4
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000092   75..01       MOV       ?V4,#0x1
   \   000095   78..         MOV       R0,#?V4
   \   000097   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009A   E5..         MOV       A,?V6
   \   00009C   F5..         MOV       ?V4,A
   \   00009E   78..         MOV       R0,#?V4
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A3   7C01         MOV       R4,#0x1
   \   0000A5   7D01         MOV       R5,#0x1
   \   0000A7   AA..         MOV       R2,?V8
   \   0000A9   AB..         MOV       R3,?V9
   \   0000AB   A9..         MOV       R1,?V3
   \   0000AD   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000B0   740B         MOV       A,#0xb
   \   0000B2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B5   E9           MOV       A,R1
   \   0000B6   FE           MOV       R6,A
   2227            zcl_mem_free( pBuf );
   \   0000B7                ; Setup parameters for call to function osal_mem_free
   \   0000B7   AA..         MOV       R2,?V0
   \   0000B9   AB..         MOV       R3,?V1
   \   0000BB   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2228            return status;
   \   0000BE   EE           MOV       A,R6
   \   0000BF   F9           MOV       R1,A
   \                     ??zclClosures_SendDoorLockRequest_1:
   \   0000C0   02....       LJMP      ??Subroutine175_0 & 0xFFFF
   2229          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine162_0
   \   000002                ; // Fall through to label ??Subroutine162_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine175_0:
   \   000000   7F0C         MOV       R7,#0xc
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   2230          
   2231          /*********************************************************************
   2232           * @fn      zclClosures_SendDoorLockUnlockTimeoutRequest
   2233           *
   2234           * @brief   Call to send out a Unlock with Timeout Command
   2235           *
   2236           * @param   srcEP - Sending application's endpoint
   2237           * @param   dstAddr - where you want the message to go
   2238           * @param   pPayload:
   2239           *           timeout - The timeout in seconds
   2240           *           aPinRfidCode - PIN/RFID code in ZCL Octet String Format
   2241           * @param   disableDefaultRsp - decides default response is necessary or not
   2242           * @param   seqNum - sequence number of the command packet
   2243           *
   2244           * @return  ZStatus_t
   2245           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2246          ZStatus_t zclClosures_SendDoorLockUnlockTimeoutRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockUnlockTimeoutRequest:
   2247                                                                  zclDoorLockUnlockTimeout_t *pPayload,
   2248                                                                  uint8 disableDefaultRsp, uint8 seqNum )
   2249          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   2250            uint8 i;
   2251            uint8 *pBuf;  // variable length payload
   2252            uint8 offset;
   2253            uint8 calculatedArrayLen;
   2254            uint8 calculatedBufSize;
   2255            ZStatus_t status;
   2256          
   2257            // first octet of PIN/RFID Code variable string identifies its length
   2258            calculatedArrayLen = pPayload->pPinRfidCode[0] + 1;  // add first byte of string
   \   00000F   EC           MOV       A,R4
   \   000010   2402         ADD       A,#0x2
   \   000012   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000015   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   000018   F5..         MOV       ?V3,A
   2259          
   2260            // determine total size of buffer
   2261            calculatedBufSize = calculatedArrayLen + PAYLOAD_LEN_UNLOCK_TIMEOUT;
   \   00001A   7402         MOV       A,#0x2
   \   00001C   25..         ADD       A,?V3
   2262          
   2263            pBuf = zcl_mem_alloc( calculatedBufSize );
   \   00001E   F5..         MOV       ?V8,A
   \   000020   75..00       MOV       ?V9,#0x0
   \   000023                ; Setup parameters for call to function osal_mem_alloc
   \   000023   FA           MOV       R2,A
   \   000024   AB..         MOV       R3,?V9
   \   000026   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000029   8A..         MOV       ?V6,R2
   \   00002B   8B..         MOV       ?V7,R3
   2264            if ( !pBuf )
   \   00002D   EA           MOV       A,R2
   \   00002E   45..         ORL       A,?V7
   \   000030   7005         JNZ       ??zclClosures_SendDoorLockUnlockTimeoutRequest_0
   2265            {
   2266              return ( ZMemError );  // no memory
   \   000032   7910         MOV       R1,#0x10
   \   000034   02....       LJMP      ??zclClosures_SendDoorLockUnlockTimeoutRequest_1 & 0xFFFF
   2267            }
   2268          
   2269            // over-the-air is always little endian. Break into a byte stream.
   2270            pBuf[0] = LO_UINT16(pPayload->timeout);
   \                     ??zclClosures_SendDoorLockUnlockTimeoutRequest_0:
   \   000037   85..82       MOV       DPL,?V0
   \   00003A   85..83       MOV       DPH,?V1
   \   00003D   12....       LCALL     ??Subroutine167_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   000040   12....       LCALL     ?Subroutine79 & 0xFFFF
   2271            pBuf[1] = HI_UINT16(pPayload->timeout);
   \                     ??CrossCallReturnLabel_185:
   \   000043   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   000046   A3           INC       DPTR
   \   000047   F0           MOVX      @DPTR,A
   2272            offset = 2;
   \   000048   7902         MOV       R1,#0x2
   2273            for ( i = 0; i < calculatedArrayLen; i++ )
   \   00004A   7800         MOV       R0,#0x0
   \   00004C   800D         SJMP      ??zclClosures_SendDoorLockUnlockTimeoutRequest_2
   2274            {
   2275              pBuf[offset++] = pPayload->pPinRfidCode[i];
   \                     ??zclClosures_SendDoorLockUnlockTimeoutRequest_3:
   \   00004E   12....       LCALL     ?Subroutine10 & 0xFFFF
   2276            }
   \                     ??CrossCallReturnLabel_428:
   \   000051   C0E0         PUSH      A
   \   000053   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000056   D0E0         POP       A
   \   000058   F0           MOVX      @DPTR,A
   \   000059   09           INC       R1
   \   00005A   08           INC       R0
   \                     ??zclClosures_SendDoorLockUnlockTimeoutRequest_2:
   \   00005B   E8           MOV       A,R0
   \   00005C   C3           CLR       C
   \   00005D   95..         SUBB      A,?V3
   \   00005F   40ED         JC        ??zclClosures_SendDoorLockUnlockTimeoutRequest_3
   2277          
   2278            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2279                                      COMMAND_CLOSURES_UNLOCK_WITH_TIMEOUT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2280                                      disableDefaultRsp, 0, seqNum, calculatedBufSize, pBuf );
   \   000061                ; Setup parameters for call to function zcl_SendCommand
   \   000061   78..         MOV       R0,#?V6
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   78..         MOV       R0,#?V8
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006B   7419         MOV       A,#0x19
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000073   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000076   E4           CLR       A
   \   000077   F5..         MOV       ?V0,A
   \   000079   F5..         MOV       ?V1,A
   \   00007B   78..         MOV       R0,#?V0
   \   00007D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000080   741B         MOV       A,#0x1b
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000088   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008B   75..00       MOV       ?V0,#0x0
   \   00008E   78..         MOV       R0,#?V0
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000093   75..01       MOV       ?V0,#0x1
   \   000096   78..         MOV       R0,#?V0
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009B   75..03       MOV       ?V0,#0x3
   \   00009E   78..         MOV       R0,#?V0
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A3   7C01         MOV       R4,#0x1
   \   0000A5   7D01         MOV       R5,#0x1
   \   0000A7   EE           MOV       A,R6
   \   0000A8   FA           MOV       R2,A
   \   0000A9   EF           MOV       A,R7
   \   0000AA   FB           MOV       R3,A
   \   0000AB   A9..         MOV       R1,?V2
   \   0000AD   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000B0   740B         MOV       A,#0xb
   \   0000B2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B5   E9           MOV       A,R1
   \   0000B6   FE           MOV       R6,A
   2281            zcl_mem_free( pBuf );
   \   0000B7                ; Setup parameters for call to function osal_mem_free
   \   0000B7   AA..         MOV       R2,?V6
   \   0000B9   AB..         MOV       R3,?V7
   \   0000BB   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2282            return status;
   \   0000BE   EE           MOV       A,R6
   \   0000BF   F9           MOV       R1,A
   \                     ??zclClosures_SendDoorLockUnlockTimeoutRequest_1:
   \   0000C0   02....       LJMP      ??Subroutine175_0 & 0xFFFF
   2283          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   E9           MOV       A,R1
   \   000001   FA           MOV       R2,A
   \   000002   E5..         MOV       A,?V6
   \   000004   2A           ADD       A,R2
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   3B           ADDC      A,R3
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine167_0
   \   000001                ; // Fall through to label ??Subroutine167_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine167_0:
   \   000000   12....       LCALL     ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E8           MOV       A,R0
   \   000001   FA           MOV       R2,A
   \   000002   85..82       MOV       DPL,?V4
   \   000005   85..83       MOV       DPH,?V5
   \   000008                REQUIRE ??Subroutine168_0
   \   000008                ; // Fall through to label ??Subroutine168_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V1
   \   000004   F9           MOV       R1,A
   \   000005   88..         MOV       ?V4,R0
   \   000007   89..         MOV       ?V5,R1
   \   000009   8882         MOV       DPL,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine172_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET
   2284          
   2285          /*********************************************************************
   2286           * @fn      zclClosures_SendDoorLockGetLogRecordRequest
   2287           *
   2288           * @brief   Call to send out a Get Log Record Command
   2289           *
   2290           * @param   srcEP - Sending application's endpoint
   2291           * @param   dstAddr - where you want the message to go
   2292           * @param   logIndex - Log number between 1 - [max log attribute]
   2293           * @param   disableDefaultRsp - decides default response is necessary or not
   2294           * @param   seqNum - sequence number of the command packet
   2295           *
   2296           * @return  ZStatus_t
   2297           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2298          ZStatus_t zclClosures_SendDoorLockGetLogRecordRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockGetLogRecordRequest:
   2299                                                                 uint16 logIndex, uint8 disableDefaultRsp, uint8 seqNum )
   2300          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2301            uint8 payload[PAYLOAD_LEN_GET_LOG_RECORD];
   2302          
   2303            payload[0] = LO_UINT16( logIndex );
   \   00000C   EC           MOV       A,R4
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
   2304            payload[1] = HI_UINT16( logIndex );
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine57 & 0xFFFF
   2305          
   2306            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2307                                    COMMAND_CLOSURES_GET_LOG_RECORD, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2308                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_GET_LOG_RECORD, payload );
   \                     ??CrossCallReturnLabel_449:
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   75..02       MOV       ?V0,#0x2
   \   000022   75..00       MOV       ?V1,#0x0
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   7411         MOV       A,#0x11
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000035   E4           CLR       A
   \   000036   F5..         MOV       ?V0,A
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7413         MOV       A,#0x13
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000045   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000048   75..00       MOV       ?V0,#0x0
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000050   75..01       MOV       ?V0,#0x1
   \   000053   78..         MOV       R0,#?V0
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000058   75..04       MOV       ?V0,#0x4
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000060   7C01         MOV       R4,#0x1
   \   000062   7D01         MOV       R5,#0x1
   \   000064   EE           MOV       A,R6
   \   000065   F9           MOV       R1,A
   \   000066   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000069   740B         MOV       A,#0xb
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006E   7402         MOV       A,#0x2
   \   000070   02....       LJMP      ??Subroutine174_0 & 0xFFFF
   2309          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   ED           MOV       A,R5
   \   000001                REQUIRE ??Subroutine173_0
   \   000001                ; // Fall through to label ??Subroutine173_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine173_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET
   2310          
   2311          /*********************************************************************
   2312           * @fn      zclClosures_SendDoorLockSetPINCodeRequest
   2313           *
   2314           * @brief   Call to send out a Set PIN Code Command
   2315           *
   2316           * @param   srcEP - Sending application's endpoint
   2317           * @param   dstAddr - where you want the message to go
   2318           * @param   pPayload:
   2319           *           userID - User ID is between 0 - [# PINs User supported attribute]
   2320           *           userStatus - Used to indicate what the status is for a specific User ID
   2321           *           userType - Used to indicate what the type is for a specific User ID
   2322           *           pPIN - A ZigBee string indicating the PIN code used to create the event on the door lock
   2323           * @param   disableDefaultRsp - decides default response is necessary or not
   2324           * @param   seqNum - sequence number of the command packet
   2325           *
   2326           * @return  ZStatus_t
   2327           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2328          ZStatus_t zclClosures_SendDoorLockSetPINCodeRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockSetPINCodeRequest:
   2329                                                               zclDoorLockSetPINCode_t *pPayload,
   2330                                                               uint8 disableDefaultRsp, uint8 seqNum )
   2331          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine12 & 0xFFFF
   2332            uint8 i;
   2333            uint8 *pBuf;  // variable length payload
   2334            uint8 offset;
   2335            uint8 calculatedArrayLen;
   2336            uint8 calculatedBufSize;
   2337            ZStatus_t status;
   2338          
   2339            // first octet of PIN/RFID Code variable string identifies its length
   2340            calculatedArrayLen = pPayload->pPIN[0] + 1;  // add first byte of string
   2341          
   2342            // determine the total buffer size
   2343            calculatedBufSize = calculatedArrayLen + PAYLOAD_LEN_SET_PIN_CODE;
   2344          
   2345            pBuf = zcl_mem_alloc( calculatedBufSize );
   \                     ??CrossCallReturnLabel_8:
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000010   8A..         MOV       ?V6,R2
   \   000012   8B..         MOV       ?V7,R3
   2346            if ( !pBuf )
   \   000014   EA           MOV       A,R2
   \   000015   45..         ORL       A,?V7
   \   000017   7004         JNZ       ??zclClosures_SendDoorLockSetPINCodeRequest_0
   2347            {
   2348              return ( ZMemError );  // no memory
   \   000019   7910         MOV       R1,#0x10
   \   00001B   8077         SJMP      ??zclClosures_SendDoorLockSetPINCodeRequest_1
   2349            }
   2350          
   2351            // over-the-air is always little endian. Break into a byte stream.
   2352            pBuf[0] = LO_UINT16(pPayload->userID);
   \                     ??zclClosures_SendDoorLockSetPINCodeRequest_0:
   \   00001D   12....       LCALL     ?Subroutine9 & 0xFFFF
   2353            pBuf[1] = HI_UINT16(pPayload->userID);
   2354            pBuf[2] = pPayload->userStatus;
   2355            pBuf[3] = pPayload->userType;
   2356            offset = 4;
   2357            for ( i = 0; i < calculatedArrayLen; i++ )
   \                     ??CrossCallReturnLabel_0:
   \   000020   800D         SJMP      ??zclClosures_SendDoorLockSetPINCodeRequest_2
   2358            {
   2359              pBuf[offset++] = pPayload->pPIN[i];
   \                     ??zclClosures_SendDoorLockSetPINCodeRequest_3:
   \   000022   12....       LCALL     ?Subroutine10 & 0xFFFF
   2360            }
   \                     ??CrossCallReturnLabel_429:
   \   000025   C0E0         PUSH      A
   \   000027   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   00002A   D0E0         POP       A
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   09           INC       R1
   \   00002E   08           INC       R0
   \                     ??zclClosures_SendDoorLockSetPINCodeRequest_2:
   \   00002F   E8           MOV       A,R0
   \   000030   C3           CLR       C
   \   000031   95..         SUBB      A,?V3
   \   000033   40ED         JC        ??zclClosures_SendDoorLockSetPINCodeRequest_3
   2361          
   2362          
   2363            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2364                                      COMMAND_CLOSURES_SET_PIN_CODE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2365                                      disableDefaultRsp, 0, seqNum, calculatedBufSize, pBuf );
   \   000035                ; Setup parameters for call to function zcl_SendCommand
   \   000035   78..         MOV       R0,#?V6
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   78..         MOV       R0,#?V8
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   741A         MOV       A,#0x1a
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004A   E4           CLR       A
   \   00004B   F5..         MOV       ?V0,A
   \   00004D   F5..         MOV       ?V1,A
   \   00004F   78..         MOV       R0,#?V0
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000054   741C         MOV       A,#0x1c
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005F   75..00       MOV       ?V0,#0x0
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000067   75..01       MOV       ?V0,#0x1
   \   00006A   78..         MOV       R0,#?V0
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006F   75..05       MOV       ?V0,#0x5
   \   000072   78..         MOV       R0,#?V0
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000077   7C01         MOV       R4,#0x1
   \   000079   7D01         MOV       R5,#0x1
   \   00007B   EE           MOV       A,R6
   \   00007C   FA           MOV       R2,A
   \   00007D   EF           MOV       A,R7
   \   00007E   FB           MOV       R3,A
   \   00007F   A9..         MOV       R1,?V2
   \   000081   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000084   740B         MOV       A,#0xb
   \   000086   12....       LCALL     ?DEALLOC_XSTACK8
   \   000089   E9           MOV       A,R1
   \   00008A   FE           MOV       R6,A
   2366            zcl_mem_free( pBuf );
   \   00008B                ; Setup parameters for call to function osal_mem_free
   \   00008B   AA..         MOV       R2,?V6
   \   00008D   AB..         MOV       R3,?V7
   \   00008F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2367            return status;
   \   000092   EE           MOV       A,R6
   \   000093   F9           MOV       R1,A
   \                     ??zclClosures_SendDoorLockSetPINCodeRequest_1:
   \   000094   02....       LJMP      ?Subroutine4 & 0xFFFF
   2368          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   89..         MOV       ?V2,R1
   \   000002   EA           MOV       A,R2
   \   000003   FE           MOV       R6,A
   \   000004   EB           MOV       A,R3
   \   000005   FF           MOV       R7,A
   \   000006   8C..         MOV       ?V0,R4
   \   000008   8D..         MOV       ?V1,R5
   \   00000A   EC           MOV       A,R4
   \   00000B   2404         ADD       A,#0x4
   \   00000D   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000010   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   000013   F5..         MOV       ?V3,A
   \   000015   7404         MOV       A,#0x4
   \   000017   25..         ADD       A,?V3
   \   000019   85..82       MOV       DPL,?XSP + 0
   \   00001C   85..83       MOV       DPH,?XSP + 1
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   F5..         MOV       ?V8,A
   \   000022   75..00       MOV       ?V9,#0x0
   \   000025                ; Setup parameters for call to function osal_mem_alloc
   \   000025                ; Setup parameters for call to function osal_mem_alloc
   \   000025                ; Setup parameters for call to function osal_mem_alloc
   \   000025                ; Setup parameters for call to function osal_mem_alloc
   \   000025   FA           MOV       R2,A
   \   000026   AB..         MOV       R3,?V9
   \   000028   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine171_0
   \   000002                ; // Fall through to label ??Subroutine171_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   12....       LCALL     ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   000009   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   00000C   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   00000F   A3           INC       DPTR
   \   000010   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000018   85..82       MOV       DPL,?V0
   \   00001B   85..83       MOV       DPH,?V1
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000023   7904         MOV       R1,#0x4
   \   000025   7800         MOV       R0,#0x0
   \   000027   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine172_0
   \   000001                ; // Fall through to label ??Subroutine172_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7401         MOV       A,#0x1
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine175_0
   \   000005                ; // Fall through to label ??Subroutine175_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET
   2369          
   2370          /*********************************************************************
   2371           * @fn      zclClosures_SendDoorLockUserIDRequest
   2372           *
   2373           * @brief   Call to send out a User ID Command
   2374           *
   2375           * @param   srcEP - Sending application's endpoint
   2376           * @param   dstAddr - where you want the message to go
   2377           * @param   cmd - COMMAND_CLOSURES_GET_PIN_CODE, COMMAND_CLOSURES_CLEAR_PIN_CODE,
   2378           *                COMMAND_CLOSURES_GET_USER_STATUS, COMMAND_CLOSURES_GET_USER_TYPE,
   2379           *                COMMAND_CLOSURES_GET_RFID_CODE, COMMAND_CLOSURES_CLEAR_RFID_CODE
   2380           * @param   userID - User ID is between 0 - [# PINs User supported attribute]
   2381           * @param   disableDefaultRsp - decides default response is necessary or not
   2382           * @param   seqNum - sequence number of the command packet
   2383           *
   2384           * @return  ZStatus_t
   2385           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2386          ZStatus_t zclClosures_SendDoorLockUserIDRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   \                     zclClosures_SendDoorLockUserIDRequest:
   2387                                                           uint16 userID, uint8 disableDefaultRsp, uint8 seqNum )
   2388          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EC           MOV       A,R4
   \   00000D   FE           MOV       R6,A
   \   00000E   ED           MOV       A,R5
   \   00000F   FF           MOV       R7,A
   \   000010   740E         MOV       A,#0xe
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine100 & 0xFFFF
   2389            uint8 payload[PAYLOAD_LEN_USER_ID];
   2390          
   2391            payload[0] = LO_UINT16(userID);
   \                     ??CrossCallReturnLabel_332:
   \   000018   85..82       MOV       DPL,?XSP + 0
   \   00001B   85..83       MOV       DPH,?XSP + 1
   \   00001E   F0           MOVX      @DPTR,A
   2392            payload[1] = HI_UINT16(userID);
   \   00001F   7401         MOV       A,#0x1
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   E9           MOV       A,R1
   \   000025   12....       LCALL     ??Subroutine165_0 & 0xFFFF
   2393          
   2394            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2395                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2396                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_USER_ID, payload );
   \                     ??CrossCallReturnLabel_409:
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   75..02       MOV       ?V2,#0x2
   \   00002E   75..00       MOV       ?V3,#0x0
   \   000031   78..         MOV       R0,#?V2
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   7414         MOV       A,#0x14
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000041   E4           CLR       A
   \   000042   F5..         MOV       ?V2,A
   \   000044   78..         MOV       R0,#?V2
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000049   EF           MOV       A,R7
   \   00004A   F5..         MOV       ?V1,A
   \   00004C   78..         MOV       R0,#?V1
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000051   75..00       MOV       ?V1,#0x0
   \   000054   78..         MOV       R0,#?V1
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059   75..01       MOV       ?V1,#0x1
   \   00005C   78..         MOV       R0,#?V1
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000061   EE           MOV       A,R6
   \   000062   F5..         MOV       ?V1,A
   \   000064   78..         MOV       R0,#?V1
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000069   7C01         MOV       R4,#0x1
   \   00006B   7D01         MOV       R5,#0x1
   \   00006D   A9..         MOV       R1,?V0
   \   00006F   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000072   740B         MOV       A,#0xb
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   \   000077   7402         MOV       A,#0x2
   \   000079   80..         SJMP      ??Subroutine163_0
   2397          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine165_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V2,R0
   \   000007   89..         MOV       ?V3,R1
   \   000009   78..         MOV       R0,#?V2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V1,A
   \   000003   78..         MOV       R0,#?V1
   \   000005   22           RET
   2398          
   2399          /*********************************************************************
   2400           * @fn      zclClosures_SendDoorLockClearAllCodesRequest
   2401           *
   2402           * @brief   Call to send out a Clear All Codes Command
   2403           *
   2404           * @param   srcEP - Sending application's endpoint
   2405           * @param   dstAddr - where you want the message to go
   2406           * @param   cmd - COMMAND_CLOSURES_CLEAR_ALL_PIN_CODES, COMMAND_CLOSURES_CLEAR_ALL_RFID_CODES
   2407           * @param   disableDefaultRsp - decides default response is necessary or not
   2408           * @param   seqNum - sequence number of the command packet
   2409           *
   2410           * @return  ZStatus_t
   2411           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2412          ZStatus_t zclClosures_SendDoorLockClearAllCodesRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   \                     zclClosures_SendDoorLockClearAllCodesRequest:
   2413                                                                  uint8 disableDefaultRsp, uint8 seqNum )
   2414          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FF           MOV       R7,A
   2415            // no payload
   2416          
   2417            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2418                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2419                                    disableDefaultRsp, 0, seqNum, 0, NULL );
   \   000007                ; Setup parameters for call to function zcl_SendCommand
   \   000007   E4           CLR       A
   \   000008   F5..         MOV       ?V2,A
   \   00000A   F5..         MOV       ?V3,A
   \   00000C   78..         MOV       R0,#?V2
   \   00000E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000011   78..         MOV       R0,#?V2
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   7410         MOV       A,#0x10
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000021   78..         MOV       R0,#?V2
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   ED           MOV       A,R5
   \   000027   F5..         MOV       ?V1,A
   \   000029   78..         MOV       R0,#?V1
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002E   75..00       MOV       ?V1,#0x0
   \   000031   78..         MOV       R0,#?V1
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000036   75..01       MOV       ?V1,#0x1
   \   000039   78..         MOV       R0,#?V1
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003E   EF           MOV       A,R7
   \   00003F   F5..         MOV       ?V1,A
   \   000041   78..         MOV       R0,#?V1
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000046   7C01         MOV       R4,#0x1
   \   000048   7D01         MOV       R5,#0x1
   \   00004A   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00004D   740B         MOV       A,#0xb
   \   00004F   80..         SJMP      ??Subroutine163_0
   2420          }
   2421          
   2422          /*********************************************************************
   2423           * @fn      zclClosures_SendDoorLockSetUserStatusRequest
   2424           *
   2425           * @brief   Call to send out a Set User Status Command
   2426           *
   2427           * @param   srcEP - Sending application's endpoint
   2428           * @param   dstAddr - where you want the message to go
   2429           * @param   userID - User ID is between 0 - [# PINs User supported attribute]
   2430           * @param   userStatus - Used to indicate what the status is for a specific User ID
   2431           * @param   disableDefaultRsp - decides default response is necessary or not
   2432           * @param   seqNum - sequence number of the command packet
   2433           *
   2434           * @return  ZStatus_t
   2435           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2436          ZStatus_t zclClosures_SendDoorLockSetUserStatusRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockSetUserStatusRequest:
   2437                                                                  uint16 userID, uint8 userStatus,
   2438                                                                  uint8 disableDefaultRsp, uint8 seqNum )
   2439          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2440            uint8 payload[PAYLOAD_LEN_SET_USER_STATUS];
   2441          
   2442            payload[0] = LO_UINT16(userID);
   \   00000C   EC           MOV       A,R4
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
   2443            payload[1] = HI_UINT16(userID);
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   ED           MOV       A,R5
   \   00001A   F0           MOVX      @DPTR,A
   2444            payload[2] = userStatus;
   \   00001B   740D         MOV       A,#0xd
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   E0           MOVX      A,@DPTR
   \   000021   C0E0         PUSH      A
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   D0E0         POP       A
   \   00002A   12....       LCALL     ??Subroutine173_0 & 0xFFFF
   2445          
   2446            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2447                                    COMMAND_CLOSURES_SET_USER_STATUS, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2448                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_SET_USER_STATUS, payload );
   \                     ??CrossCallReturnLabel_451:
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   75..03       MOV       ?V0,#0x3
   \   000033   75..00       MOV       ?V1,#0x0
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7413         MOV       A,#0x13
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000046   E4           CLR       A
   \   000047   F5..         MOV       ?V0,A
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7415         MOV       A,#0x15
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059   75..00       MOV       ?V0,#0x0
   \   00005C   78..         MOV       R0,#?V0
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000061   75..01       MOV       ?V0,#0x1
   \   000064   78..         MOV       R0,#?V0
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000069   75..09       MOV       ?V0,#0x9
   \   00006C   02....       LJMP      ?Subroutine1 & 0xFFFF
   2449          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   78..         MOV       R0,#?V0
   \   000002   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000005   7C01         MOV       R4,#0x1
   \   000007   7D01         MOV       R5,#0x1
   \   000009   EE           MOV       A,R6
   \   00000A   F9           MOV       R1,A
   \   00000B   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00000E   740B         MOV       A,#0xb
   \   000010   12....       LCALL     ?DEALLOC_XSTACK8
   \   000013   7403         MOV       A,#0x3
   \   000015                REQUIRE ??Subroutine174_0
   \   000015                ; // Fall through to label ??Subroutine174_0
   2450          
   2451          /*********************************************************************
   2452           * @fn      zclClosures_SendDoorLockSetWeekDayScheduleRequest
   2453           *
   2454           * @brief   Call to send out a Set Week Day Schedule Command
   2455           *
   2456           * @param   srcEP - Sending application's endpoint
   2457           * @param   dstAddr - where you want the message to go
   2458           * @param   scheduleID - The Schedule ID # is between 0 - [# Schedule IDs per user attribute]
   2459           * @param   userID - User ID is between 0 - [# PINs User supported attribute]
   2460           * @param   daysMask - Bitmask of the effective days in the order XSFTWTMS
   2461           * @param   startHour - The start hour of the Week Day Schedule: 0-23
   2462           * @param   startMinute - The start minute of the Week Day Schedule: 0-59
   2463           * @param   endHour - The end hour of the Week Day Schedule: 0-23
   2464           * @param   endMinute - The end minute of the Week Day Schedule: 0-59
   2465           * @param   disableDefaultRsp - decides default response is necessary or not
   2466           * @param   seqNum - sequence number of the command packet
   2467           *
   2468           * @return  ZStatus_t
   2469           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2470          ZStatus_t zclClosures_SendDoorLockSetWeekDayScheduleRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockSetWeekDayScheduleRequest:
   2471                                                                       uint8 scheduleID, uint16 userID,
   2472                                                                       uint8 daysMask, uint8 startHour,
   2473                                                                       uint8 startMinute, uint8 endHour,
   2474                                                                       uint8 endMinute, uint8 disableDefaultRsp, uint8 seqNum )
   2475          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EC           MOV       A,R4
   2476            uint8 payload[PAYLOAD_LEN_SET_WEEK_DAY_SCHEDULE];
   2477          
   2478            payload[0] = scheduleID;
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
   \   000014   7414         MOV       A,#0x14
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine51 & 0xFFFF
   2479            payload[1] = LO_UINT16(userID);
   \                     ??CrossCallReturnLabel_118:
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E8           MOV       A,R0
   \   000020   F0           MOVX      @DPTR,A
   2480            payload[2] = HI_UINT16(userID);
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E9           MOV       A,R1
   \   000027   F0           MOVX      @DPTR,A
   2481            payload[3] = daysMask;
   \   000028   7403         MOV       A,#0x3
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   ED           MOV       A,R5
   \   00002E   F0           MOVX      @DPTR,A
   2482            payload[4] = startHour;
   \   00002F   7416         MOV       A,#0x16
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   E0           MOVX      A,@DPTR
   \   000035   C0E0         PUSH      A
   \   000037   7404         MOV       A,#0x4
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   D0E0         POP       A
   \   00003E   F0           MOVX      @DPTR,A
   2483            payload[5] = startMinute;
   \   00003F   7417         MOV       A,#0x17
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   E0           MOVX      A,@DPTR
   \   000045   C0E0         PUSH      A
   \   000047   7405         MOV       A,#0x5
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   D0E0         POP       A
   \   00004E   F0           MOVX      @DPTR,A
   2484            payload[6] = endHour;
   \   00004F   7418         MOV       A,#0x18
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   E0           MOVX      A,@DPTR
   \   000055   C0E0         PUSH      A
   \   000057   7406         MOV       A,#0x6
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   D0E0         POP       A
   \   00005E   F0           MOVX      @DPTR,A
   2485            payload[7] = endMinute;
   \   00005F   7419         MOV       A,#0x19
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   E0           MOVX      A,@DPTR
   \   000065   C0E0         PUSH      A
   \   000067   7407         MOV       A,#0x7
   \   000069   12....       LCALL     ?XSTACK_DISP0_8
   \   00006C   D0E0         POP       A
   \   00006E   12....       LCALL     ??Subroutine165_0 & 0xFFFF
   2486          
   2487            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2488                                    COMMAND_CLOSURES_SET_WEEK_DAY_SCHEDULE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2489                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_SET_WEEK_DAY_SCHEDULE, payload );
   \                     ??CrossCallReturnLabel_410:
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000074   75..08       MOV       ?V2,#0x8
   \   000077   75..00       MOV       ?V3,#0x0
   \   00007A   78..         MOV       R0,#?V2
   \   00007C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007F   741F         MOV       A,#0x1f
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008A   E4           CLR       A
   \   00008B   F5..         MOV       ?V2,A
   \   00008D   78..         MOV       R0,#?V2
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000092   7421         MOV       A,#0x21
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009D   75..00       MOV       ?V1,#0x0
   \   0000A0   78..         MOV       R0,#?V1
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A5   75..01       MOV       ?V1,#0x1
   \   0000A8   78..         MOV       R0,#?V1
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AD   75..0B       MOV       ?V1,#0xb
   \   0000B0   78..         MOV       R0,#?V1
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B5   7C01         MOV       R4,#0x1
   \   0000B7   7D01         MOV       R5,#0x1
   \   0000B9   A9..         MOV       R1,?V0
   \   0000BB   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000BE   740B         MOV       A,#0xb
   \   0000C0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C3   02....       LJMP      ?Subroutine8 & 0xFFFF
   2490          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000003   7401         MOV       A,#0x1
   \   000005   22           RET
   2491          
   2492          /*********************************************************************
   2493           * @fn      zclClosures_SendDoorLockScheduleRequest
   2494           *
   2495           * @brief   Call to send out a Schedule Command
   2496           *
   2497           * @param   srcEP - Sending application's endpoint
   2498           * @param   dstAddr - where you want the message to go
   2499           * @param   cmd - COMMAND_CLOSURES_GET_WEEK_DAY_SCHEDULE, COMMAND_CLOSURES_CLEAR_WEEK_DAY_SCHEDULE,
   2500           *                COMMAND_CLOSURES_GET_YEAR_DAY_SCHEDULE, COMMAND_CLOSURES_CLEAR_YEAR_DAY_SCHEDULE
   2501           * @param   scheduleID - The Schedule ID # is between 0 - [# Schedule IDs per user attribute]
   2502           * @param   userID - User ID is between 0 - [# PINs User supported attribute]
   2503           * @param   disableDefaultRsp - decides default response is necessary or not
   2504           * @param   seqNum - sequence number of the command packet
   2505           *
   2506           * @return  ZStatus_t
   2507           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2508          ZStatus_t zclClosures_SendDoorLockScheduleRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   \                     zclClosures_SendDoorLockScheduleRequest:
   2509                                                             uint8 scheduleID, uint16 userID,
   2510                                                             uint8 disableDefaultRsp, uint8 seqNum )
   2511          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
   \   00000D   FF           MOV       R7,A
   2512            uint8 payload[PAYLOAD_LEN_SCHEDULE];
   2513          
   2514            payload[0] = scheduleID;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   ED           MOV       A,R5
   \   000015   F0           MOVX      @DPTR,A
   \   000016   740F         MOV       A,#0xf
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine51 & 0xFFFF
   2515            payload[1] = LO_UINT16(userID);
   \                     ??CrossCallReturnLabel_119:
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   E8           MOV       A,R0
   \   000022   F0           MOVX      @DPTR,A
   2516            payload[2] = HI_UINT16(userID);
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E9           MOV       A,R1
   \   000029   12....       LCALL     ??Subroutine165_0 & 0xFFFF
   2517          
   2518            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2519                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2520                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_SCHEDULE, payload );
   \                     ??CrossCallReturnLabel_411:
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   75..03       MOV       ?V2,#0x3
   \   000032   75..00       MOV       ?V3,#0x0
   \   000035   78..         MOV       R0,#?V2
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   7416         MOV       A,#0x16
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000045   E4           CLR       A
   \   000046   F5..         MOV       ?V2,A
   \   000048   78..         MOV       R0,#?V2
   \   00004A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004D   7418         MOV       A,#0x18
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000058   75..00       MOV       ?V1,#0x0
   \   00005B   78..         MOV       R0,#?V1
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000060   75..01       MOV       ?V1,#0x1
   \   000063   78..         MOV       R0,#?V1
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000068   EF           MOV       A,R7
   \   000069   F5..         MOV       ?V1,A
   \   00006B   78..         MOV       R0,#?V1
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000070   7C01         MOV       R4,#0x1
   \   000072   7D01         MOV       R5,#0x1
   \   000074   EE           MOV       A,R6
   \   000075   F9           MOV       R1,A
   \   000076   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000079   740B         MOV       A,#0xb
   \   00007B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007E   7403         MOV       A,#0x3
   \   000080   02....       LJMP      ??Subroutine163_0 & 0xFFFF
   2521          }
   2522          
   2523          /*********************************************************************
   2524           * @fn      zclClosures_SendDoorLockSetYearDayScheduleRequest
   2525           *
   2526           * @brief   Call to send out a Set Year Day Schedule Command
   2527           *
   2528           * @param   srcEP - Sending application's endpoint
   2529           * @param   dstAddr - where you want the message to go
   2530           * @param   scheduleID - The Schedule ID # is between 0 - [# Schedule IDs per user attribute]
   2531           * @param   userID - User ID is between 0 - [# PINs User supported attribute]
   2532           * @param   zigBeeLocalStartTime - Start time of the Year Day Schedule representing by ZigBeeLocalTime
   2533           * @param   zigBeeLocalEndTime - End time of the Year Day Schedule representing by ZigBeeLocalTime
   2534           * @param   disableDefaultRsp - decides default response is necessary or not
   2535           * @param   seqNum - sequence number of the command packet
   2536           *
   2537           * @return  ZStatus_t
   2538           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2539          ZStatus_t zclClosures_SendDoorLockSetYearDayScheduleRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockSetYearDayScheduleRequest:
   2540                                                                       uint8 scheduleID, uint16 userID,
   2541                                                                       uint32 zigBeeLocalStartTime,
   2542                                                                       uint32 zigBeeLocalEndTime,
   2543                                                                       uint8 disableDefaultRsp, uint8 seqNum )
   2544          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV       A,#-0x11
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
   \   00000C   EC           MOV       A,R4
   2545            uint8 payload[PAYLOAD_LEN_SET_YEAR_DAY_SCHEDULE];
   2546          
   2547            payload[0] = scheduleID;
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
   \   000014   741C         MOV       A,#0x1c
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine51 & 0xFFFF
   2548            payload[1] = LO_UINT16(userID);
   \                     ??CrossCallReturnLabel_120:
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E8           MOV       A,R0
   \   000020   F0           MOVX      @DPTR,A
   2549            payload[2] = HI_UINT16(userID);
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E9           MOV       A,R1
   \   000027   F0           MOVX      @DPTR,A
   \   000028   741E         MOV       A,#0x1e
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?L_MOV_X
   2550            payload[3] = BREAK_UINT32(zigBeeLocalStartTime, 0);
   \   000032   7403         MOV       A,#0x3
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   E5..         MOV       A,?V0
   \   000039   F0           MOVX      @DPTR,A
   2551            payload[4] = BREAK_UINT32(zigBeeLocalStartTime, 1);
   \   00003A   7404         MOV       A,#0x4
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ?Subroutine59 & 0xFFFF
   2552            payload[5] = BREAK_UINT32(zigBeeLocalStartTime, 2);
   \                     ??CrossCallReturnLabel_136:
   \   000042   12....       LCALL     ?UL_SHR
   \   000045   7405         MOV       A,#0x5
   \   000047   12....       LCALL     ?XSTACK_DISP0_8
   \   00004A   12....       LCALL     ?Subroutine76 & 0xFFFF
   2553            payload[6] = BREAK_UINT32(zigBeeLocalStartTime, 3);
   \                     ??CrossCallReturnLabel_179:
   \   00004D   12....       LCALL     ?UL_SHR
   \   000050   7406         MOV       A,#0x6
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   E5..         MOV       A,?V0
   \   000057   F0           MOVX      @DPTR,A
   \   000058   7422         MOV       A,#0x22
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?L_MOV_X
   2554            payload[7] = BREAK_UINT32(zigBeeLocalEndTime, 0);
   \   000062   7407         MOV       A,#0x7
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   E5..         MOV       A,?V0
   \   000069   F0           MOVX      @DPTR,A
   2555            payload[8] = BREAK_UINT32(zigBeeLocalEndTime, 1);
   \   00006A   7408         MOV       A,#0x8
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   12....       LCALL     ?Subroutine59 & 0xFFFF
   2556            payload[9] = BREAK_UINT32(zigBeeLocalEndTime, 2);
   \                     ??CrossCallReturnLabel_137:
   \   000072   12....       LCALL     ?UL_SHR
   \   000075   7409         MOV       A,#0x9
   \   000077   12....       LCALL     ?XSTACK_DISP0_8
   \   00007A   12....       LCALL     ?Subroutine76 & 0xFFFF
   2557            payload[10] = BREAK_UINT32(zigBeeLocalEndTime, 3);
   \                     ??CrossCallReturnLabel_180:
   \   00007D   12....       LCALL     ?UL_SHR
   \   000080   740A         MOV       A,#0xa
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   E5..         MOV       A,?V0
   \   000087   12....       LCALL     ??Subroutine173_0 & 0xFFFF
   2558          
   2559            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2560                                    COMMAND_CLOSURES_SET_YEAR_DAY_SCHEDULE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2561                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_SET_YEAR_DAY_SCHEDULE, payload );
   \                     ??CrossCallReturnLabel_452:
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008D   75..0B       MOV       ?V0,#0xb
   \   000090   75..00       MOV       ?V1,#0x0
   \   000093   78..         MOV       R0,#?V0
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000098   742A         MOV       A,#0x2a
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A3   E4           CLR       A
   \   0000A4   F5..         MOV       ?V0,A
   \   0000A6   78..         MOV       R0,#?V0
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AB   ED           MOV       A,R5
   \   0000AC   F5..         MOV       ?V0,A
   \   0000AE   78..         MOV       R0,#?V0
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B3   75..00       MOV       ?V0,#0x0
   \   0000B6   78..         MOV       R0,#?V0
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BB   75..01       MOV       ?V0,#0x1
   \   0000BE   78..         MOV       R0,#?V0
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C3   75..0E       MOV       ?V0,#0xe
   \   0000C6   78..         MOV       R0,#?V0
   \   0000C8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CB   7C01         MOV       R4,#0x1
   \   0000CD   7D01         MOV       R5,#0x1
   \   0000CF   EF           MOV       A,R7
   \   0000D0   F9           MOV       R1,A
   \   0000D1   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000D4   740B         MOV       A,#0xb
   \   0000D6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D9   740B         MOV       A,#0xb
   \   0000DB                REQUIRE ?Subroutine5
   \   0000DB                ; // Fall through to label ?Subroutine5
   2562          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F09         MOV       R7,#0x9
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   E5..         MOV       A,?V4
   \   000002   F0           MOVX      @DPTR,A
   \   000003   7418         MOV       A,#0x18
   \   000005   78..         MOV       R0,#?V0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   E5..         MOV       A,?V1
   \   000002   F0           MOVX      @DPTR,A
   \   000003   85....       MOV       ?V4,?V0
   \   000006   F5..         MOV       ?V5,A
   \   000008   85....       MOV       ?V6,?V2
   \   00000B   85....       MOV       ?V7,?V3
   \   00000E   7410         MOV       A,#0x10
   \   000010   78..         MOV       R0,#?V4
   \   000012   22           RET
   2563          
   2564          /*********************************************************************
   2565           * @fn      zclClosures_SendDoorLockSetHolidayScheduleRequest
   2566           *
   2567           * @brief   Call to send out a Set Holiday Schedule Command
   2568           *
   2569           * @param   srcEP - Sending application's endpoint
   2570           * @param   dstAddr - where you want the message to go
   2571           * @param   holidayScheduleID - A unique ID for given Holiday Schedule (0 to 254)
   2572           * @param   zigBeeLocalStartTime - Start time of the Year Day Schedule representing by ZigBeeLocalTime
   2573           * @param   zigBeeLocalEndTime - End time of the Year Day Schedule representing by ZigBeeLocalTime
   2574           * @param   operatingModeDuringHoliday - A valid enumeration value as listed in operating mode attribute
   2575           * @param   disableDefaultRsp - decides default response is necessary or not
   2576           * @param   seqNum - sequence number of the command packet
   2577           *
   2578           * @return  ZStatus_t
   2579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2580          ZStatus_t zclClosures_SendDoorLockSetHolidayScheduleRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockSetHolidayScheduleRequest:
   2581                                                                       uint8 holidayScheduleID,
   2582                                                                       uint32 zigBeeLocalStartTime,
   2583                                                                       uint32 zigBeeLocalEndTime,
   2584                                                                       uint8 operatingModeDuringHoliday,
   2585                                                                       uint8 disableDefaultRsp, uint8 seqNum )
   2586          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV       A,#-0x11
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V8,R1
   \   00000C   EC           MOV       A,R4
   2587            uint8 payload[PAYLOAD_LEN_SET_HOLIDAY_SCHEDULE];
   2588          
   2589            payload[0] = holidayScheduleID;
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
   \   000014   741B         MOV       A,#0x1b
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?L_MOV_X
   2590            payload[1] = BREAK_UINT32(zigBeeLocalStartTime, 0);
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E5..         MOV       A,?V0
   \   000025   F0           MOVX      @DPTR,A
   2591            payload[2] = BREAK_UINT32(zigBeeLocalStartTime, 1);
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   12....       LCALL     ?Subroutine59 & 0xFFFF
   2592            payload[3] = BREAK_UINT32(zigBeeLocalStartTime, 2);
   \                     ??CrossCallReturnLabel_138:
   \   00002E   12....       LCALL     ?UL_SHR
   \   000031   7403         MOV       A,#0x3
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   12....       LCALL     ?Subroutine76 & 0xFFFF
   2593            payload[4] = BREAK_UINT32(zigBeeLocalStartTime, 3);
   \                     ??CrossCallReturnLabel_181:
   \   000039   12....       LCALL     ?UL_SHR
   \   00003C   7404         MOV       A,#0x4
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   E5..         MOV       A,?V0
   \   000043   F0           MOVX      @DPTR,A
   \   000044   741F         MOV       A,#0x1f
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?L_MOV_X
   2594            payload[5] = BREAK_UINT32(zigBeeLocalEndTime, 0);
   \   00004E   7405         MOV       A,#0x5
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   E5..         MOV       A,?V0
   \   000055   F0           MOVX      @DPTR,A
   2595            payload[6] = BREAK_UINT32(zigBeeLocalEndTime, 1);
   \   000056   7406         MOV       A,#0x6
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine59 & 0xFFFF
   2596            payload[7] = BREAK_UINT32(zigBeeLocalEndTime, 2);
   \                     ??CrossCallReturnLabel_139:
   \   00005E   12....       LCALL     ?UL_SHR
   \   000061   7407         MOV       A,#0x7
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   12....       LCALL     ?Subroutine76 & 0xFFFF
   2597            payload[8] = BREAK_UINT32(zigBeeLocalEndTime, 3);
   \                     ??CrossCallReturnLabel_182:
   \   000069   12....       LCALL     ?UL_SHR
   \   00006C   7408         MOV       A,#0x8
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   E5..         MOV       A,?V0
   \   000073   F0           MOVX      @DPTR,A
   2598            payload[9] = operatingModeDuringHoliday;
   \   000074   7409         MOV       A,#0x9
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   12....       LCALL     ?Subroutine57 & 0xFFFF
   2599          
   2600            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2601                                    COMMAND_CLOSURES_SET_HOLIDAY_SCHEDULE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2602                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_SET_HOLIDAY_SCHEDULE, payload );
   \                     ??CrossCallReturnLabel_450:
   \   00007C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007F   75..0A       MOV       ?V0,#0xa
   \   000082   75..00       MOV       ?V1,#0x0
   \   000085   78..         MOV       R0,#?V0
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008A   7428         MOV       A,#0x28
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000095   E4           CLR       A
   \   000096   F5..         MOV       ?V0,A
   \   000098   78..         MOV       R0,#?V0
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009D   742A         MOV       A,#0x2a
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A8   75..00       MOV       ?V0,#0x0
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B0   75..01       MOV       ?V0,#0x1
   \   0000B3   78..         MOV       R0,#?V0
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B8   75..11       MOV       ?V0,#0x11
   \   0000BB   78..         MOV       R0,#?V0
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C0   7C01         MOV       R4,#0x1
   \   0000C2   7D01         MOV       R5,#0x1
   \   0000C4   A9..         MOV       R1,?V8
   \   0000C6   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000C9   740B         MOV       A,#0xb
   \   0000CB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CE   740A         MOV       A,#0xa
   \   0000D0   02....       LJMP      ?Subroutine5 & 0xFFFF
   2603          }
   2604          
   2605          /*********************************************************************
   2606           * @fn      zclClosures_SendDoorLockHolidayScheduleRequest
   2607           *
   2608           * @brief   Call to send out a Holiday Schedule Command
   2609           *
   2610           * @param   srcEP - Sending application's endpoint
   2611           * @param   dstAddr - where you want the message to go
   2612           * @param   cmd - COMMAND_CLOSURES_GET_HOLIDAY_SCHEDULE, COMMAND_CLOSURES_CLEAR_HOLIDAY_SCHEDULE
   2613           * @param   holidayScheduleID - A unique ID for given Holiday Schedule (0 to 254)
   2614           * @param   disableDefaultRsp - decides default response is necessary or not
   2615           * @param   seqNum - sequence number of the command packet
   2616           *
   2617           * @return  ZStatus_t
   2618           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   78..         MOV       R0,#?V1
   \   000002   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000005   EF           MOV       A,R7
   \   000006   F5..         MOV       ?V1,A
   \   000008   78..         MOV       R0,#?V1
   \   00000A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00000D   7C01         MOV       R4,#0x1
   \   00000F   7D01         MOV       R5,#0x1
   \   000011   EE           MOV       A,R6
   \   000012   F9           MOV       R1,A
   \   000013   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000016   740B         MOV       A,#0xb
   \   000018   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001B   7401         MOV       A,#0x1
   \   00001D                REQUIRE ??Subroutine163_0
   \   00001D                ; // Fall through to label ??Subroutine163_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   E9           MOV       A,R1
   \   000001   FE           MOV       R6,A
   \   000002   EC           MOV       A,R4
   \   000003   FF           MOV       R7,A
   \   000004   85..82       MOV       DPL,?XSP + 0
   \   000007   85..83       MOV       DPH,?XSP + 1
   \   00000A   ED           MOV       A,R5
   \   00000B                REQUIRE ??Subroutine165_0
   \   00000B                ; // Fall through to label ??Subroutine165_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2619          ZStatus_t zclClosures_SendDoorLockHolidayScheduleRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   \                     zclClosures_SendDoorLockHolidayScheduleRequest:
   2620                                                                    uint8 holidayScheduleID,
   2621                                                                    uint8 disableDefaultRsp, uint8 seqNum )
   2622          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine60 & 0xFFFF
   2623            uint8 payload[PAYLOAD_LEN_HOLIDAY_SCHEDULE];
   2624          
   2625            payload[0] = holidayScheduleID;
   2626          
   2627            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2628                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2629                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_HOLIDAY_SCHEDULE, payload );
   \                     ??CrossCallReturnLabel_407:
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV       ?V2,#0x1
   \   000013   75..00       MOV       ?V3,#0x0
   \   000016   78..         MOV       R0,#?V2
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   7412         MOV       A,#0x12
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000026   E4           CLR       A
   \   000027   F5..         MOV       ?V2,A
   \   000029   78..         MOV       R0,#?V2
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7414         MOV       A,#0x14
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000039   75..00       MOV       ?V1,#0x0
   \   00003C   78..         MOV       R0,#?V1
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000041   75..01       MOV       ?V1,#0x1
   \   000044   02....       LJMP      ?Subroutine0 & 0xFFFF
   2630          }
   2631          
   2632          /*********************************************************************
   2633           * @fn      zclClosures_SendDoorLockSetUserTypeRequest
   2634           *
   2635           * @brief   Call to send out a Set User Type Command
   2636           *
   2637           * @param   srcEP - Sending application's endpoint
   2638           * @param   dstAddr - where you want the message to go
   2639           * @param   userID - User ID is between 0 - [# PINs User supported attribute]
   2640           * @param   userType - Used to indicate what the type is for a specific User ID
   2641           * @param   disableDefaultRsp - decides default response is necessary or not
   2642           * @param   seqNum - sequence number of the command packet
   2643           *
   2644           * @return  ZStatus_t
   2645           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2646          ZStatus_t zclClosures_SendDoorLockSetUserTypeRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockSetUserTypeRequest:
   2647                                                                uint16 userID, uint8 userType,
   2648                                                                uint8 disableDefaultRsp, uint8 seqNum )
   2649          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2650            uint8 payload[PAYLOAD_LEN_SET_USER_TYPE];
   2651          
   2652            payload[0] = LO_UINT16(userID);
   \   00000C   EC           MOV       A,R4
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
   2653            payload[1] = HI_UINT16(userID);
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   ED           MOV       A,R5
   \   00001A   F0           MOVX      @DPTR,A
   2654            payload[2] = userType;
   \   00001B   740D         MOV       A,#0xd
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   E0           MOVX      A,@DPTR
   \   000021   C0E0         PUSH      A
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   D0E0         POP       A
   \   00002A   12....       LCALL     ??Subroutine173_0 & 0xFFFF
   2655          
   2656            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2657                                    COMMAND_CLOSURES_SET_USER_TYPE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2658                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_SET_USER_TYPE, payload );
   \                     ??CrossCallReturnLabel_453:
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   75..03       MOV       ?V0,#0x3
   \   000033   75..00       MOV       ?V1,#0x0
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7413         MOV       A,#0x13
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000046   E4           CLR       A
   \   000047   F5..         MOV       ?V0,A
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7415         MOV       A,#0x15
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059   75..00       MOV       ?V0,#0x0
   \   00005C   78..         MOV       R0,#?V0
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000061   75..01       MOV       ?V0,#0x1
   \   000064   78..         MOV       R0,#?V0
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000069   75..14       MOV       ?V0,#0x14
   \   00006C   02....       LJMP      ?Subroutine1 & 0xFFFF
   2659          }
   2660          
   2661          /*********************************************************************
   2662           * @fn      zclClosures_SendDoorLockSetRFIDCodeRequest
   2663           *
   2664           * @brief   Call to send out a Set RFID Code Command
   2665           *
   2666           * @param   srcEP - Sending application's endpoint
   2667           * @param   dstAddr - where you want the message to go
   2668           * @param   pPayload:
   2669           *           userID - User ID is between 0 - [# PINs User supported attribute]
   2670           *           userStatus - Used to indicate what the status is for a specific User ID
   2671           *           userType - Used to indicate what the type is for a specific User ID
   2672           *           aRfidCode - A ZigBee string indicating the RFID code used to create the event
   2673           * @param   disableDefaultRsp - decides default response is necessary or not
   2674           * @param   seqNum - sequence number of the command packet
   2675           *
   2676           * @return  ZStatus_t
   2677           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2678          ZStatus_t zclClosures_SendDoorLockSetRFIDCodeRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockSetRFIDCodeRequest:
   2679                                                                zclDoorLockSetRFIDCode_t *pPayload,
   2680                                                                uint8 disableDefaultRsp, uint8 seqNum )
   2681          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine12 & 0xFFFF
   2682            uint8 i;
   2683            uint8 *pBuf;  // variable length payload
   2684            uint8 offset;
   2685            uint8 calculatedArrayLen;
   2686            uint8 calculatedBufSize;
   2687            ZStatus_t status;
   2688          
   2689            // first octet of PIN/RFID Code variable string identifies its length
   2690            calculatedArrayLen = pPayload->pRfidCode[0] + 1;   // add first byte of string
   2691          
   2692            // determine the total buffer size
   2693            calculatedBufSize = calculatedArrayLen + PAYLOAD_LEN_SET_RFID_CODE;
   2694          
   2695            pBuf = zcl_mem_alloc( calculatedBufSize );
   \                     ??CrossCallReturnLabel_9:
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000010   8A..         MOV       ?V6,R2
   \   000012   8B..         MOV       ?V7,R3
   2696            if ( !pBuf )
   \   000014   EA           MOV       A,R2
   \   000015   45..         ORL       A,?V7
   \   000017   7004         JNZ       ??zclClosures_SendDoorLockSetRFIDCodeRequest_0
   2697            {
   2698              return ( ZMemError );  // no memory
   \   000019   7910         MOV       R1,#0x10
   \   00001B   8077         SJMP      ??zclClosures_SendDoorLockSetRFIDCodeRequest_1
   2699            }
   2700          
   2701            // over-the-air is always little endian. Break into a byte stream.
   2702            pBuf[0] = LO_UINT16(pPayload->userID);
   \                     ??zclClosures_SendDoorLockSetRFIDCodeRequest_0:
   \   00001D   12....       LCALL     ?Subroutine9 & 0xFFFF
   2703            pBuf[1] = HI_UINT16(pPayload->userID);
   2704            pBuf[2] = pPayload->userStatus;
   2705            pBuf[3] = pPayload->userType;
   2706            offset = 4;
   2707            for ( i = 0; i < calculatedArrayLen; i++ )
   \                     ??CrossCallReturnLabel_1:
   \   000020   800D         SJMP      ??zclClosures_SendDoorLockSetRFIDCodeRequest_2
   2708            {
   2709              pBuf[offset++] = pPayload->pRfidCode[i];
   \                     ??zclClosures_SendDoorLockSetRFIDCodeRequest_3:
   \   000022   12....       LCALL     ?Subroutine10 & 0xFFFF
   2710            }
   \                     ??CrossCallReturnLabel_430:
   \   000025   C0E0         PUSH      A
   \   000027   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00002A   D0E0         POP       A
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   09           INC       R1
   \   00002E   08           INC       R0
   \                     ??zclClosures_SendDoorLockSetRFIDCodeRequest_2:
   \   00002F   E8           MOV       A,R0
   \   000030   C3           CLR       C
   \   000031   95..         SUBB      A,?V3
   \   000033   40ED         JC        ??zclClosures_SendDoorLockSetRFIDCodeRequest_3
   2711          
   2712            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2713                                      COMMAND_CLOSURES_SET_RFID_CODE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2714                                      disableDefaultRsp, 0, seqNum, calculatedBufSize, pBuf );
   \   000035                ; Setup parameters for call to function zcl_SendCommand
   \   000035   78..         MOV       R0,#?V6
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   78..         MOV       R0,#?V8
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   741A         MOV       A,#0x1a
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004A   E4           CLR       A
   \   00004B   F5..         MOV       ?V0,A
   \   00004D   F5..         MOV       ?V1,A
   \   00004F   78..         MOV       R0,#?V0
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000054   741C         MOV       A,#0x1c
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005F   75..00       MOV       ?V0,#0x0
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000067   75..01       MOV       ?V0,#0x1
   \   00006A   78..         MOV       R0,#?V0
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006F   75..16       MOV       ?V0,#0x16
   \   000072   78..         MOV       R0,#?V0
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000077   7C01         MOV       R4,#0x1
   \   000079   7D01         MOV       R5,#0x1
   \   00007B   EE           MOV       A,R6
   \   00007C   FA           MOV       R2,A
   \   00007D   EF           MOV       A,R7
   \   00007E   FB           MOV       R3,A
   \   00007F   A9..         MOV       R1,?V2
   \   000081   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000084   740B         MOV       A,#0xb
   \   000086   12....       LCALL     ?DEALLOC_XSTACK8
   \   000089   E9           MOV       A,R1
   \   00008A   FE           MOV       R6,A
   2715            zcl_mem_free( pBuf );
   \   00008B                ; Setup parameters for call to function osal_mem_free
   \   00008B   AA..         MOV       R2,?V6
   \   00008D   AB..         MOV       R3,?V7
   \   00008F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2716            return status;
   \   000092   EE           MOV       A,R6
   \   000093   F9           MOV       R1,A
   \                     ??zclClosures_SendDoorLockSetRFIDCodeRequest_1:
   \   000094   02....       LJMP      ?Subroutine4 & 0xFFFF
   2717          }
   2718          
   2719          /*********************************************************************
   2720           * @fn      zclClosures_SendDoorLockStatusResponse
   2721           *
   2722           * @brief   Call to send out a Status Response
   2723           *
   2724           * @param   srcEP - Sending application's endpoint
   2725           * @param   dstAddr - where you want the message to go
   2726           * @param   cmd - COMMAND_CLOSURES_LOCK_DOOR_RSP, COMMAND_CLOSURES_UNLOCK_DOOR_RSP
   2727           *                COMMAND_CLOSURES_TOGGLE_RSP, COMMAND_CLOSURES_UNLOCK_WITH_TIMEOUT_RSP,
   2728           *                COMMAND_CLOSURES_SET_PIN_CODE_RSP, COMMAND_CLOSURES_CLEAR_PIN_CODE_RSP,
   2729           *                COMMAND_CLOSURES_CLEAR_ALL_PIN_CODES_RSP, COMMAND_CLOSURES_SET_USER_STATUS_RSP,
   2730           *                COMMAND_CLOSURES_SET_WEEK_DAY_SCHEDULE_RSP, COMMAND_CLOSURES_CLEAR_WEEK_DAY_SCHEDULE_RSP,
   2731           *                COMMAND_CLOSURES_SET_YEAR_DAY_SCHEDULE_RSP, COMMAND_CLOSURES_CLEAR_YEAR_DAY_SCHEDULE_RSP,
   2732           *                COMMAND_CLOSURES_SET_HOLIDAY_SCHEDULE_RSP, COMMAND_CLOSURES_CLEAR_HOLIDAY_SCHEDULE_RSP,
   2733           *                COMMAND_CLOSURES_SET_USER_TYPE_RSP, COMMAND_CLOSURES_SET_RFID_CODE_RSP,
   2734           *                COMMAND_CLOSURES_CLEAR_RFID_CODE_RSP, COMMAND_CLOSURES_CLEAR_ALL_RFID_CODES_RSP
   2735           * @param   status - Returns the state due to the requesting command
   2736           * @param   disableDefaultRsp - decides default response is necessary or not
   2737           * @param   seqNum - sequence number of the command packet
   2738           *
   2739           * @return  ZStatus_t
   2740           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2741          ZStatus_t zclClosures_SendDoorLockStatusResponse( uint8 srcEP, afAddrType_t *dstAddr,uint8 cmd,
   \                     zclClosures_SendDoorLockStatusResponse:
   2742                                                            uint8 status, uint8 disableDefaultRsp, uint8 seqNum )
   2743          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine60 & 0xFFFF
   2744            uint8 payload[1];   // 1 byte payload
   2745          
   2746            payload[0] = status;
   2747          
   2748            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2749                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   2750                                    disableDefaultRsp, 0, seqNum, sizeof( payload ), payload );
   \                     ??CrossCallReturnLabel_408:
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV       ?V2,#0x1
   \   000013   75..00       MOV       ?V3,#0x0
   \   000016   78..         MOV       R0,#?V2
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   7412         MOV       A,#0x12
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000026   E4           CLR       A
   \   000027   F5..         MOV       ?V2,A
   \   000029   78..         MOV       R0,#?V2
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7414         MOV       A,#0x14
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000039   75..01       MOV       ?V1,#0x1
   \   00003C   78..         MOV       R0,#?V1
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000041   02....       LJMP      ?Subroutine0 & 0xFFFF
   2751          }
   2752          
   2753          /*********************************************************************
   2754           * @fn      zclClosures_SendDoorLockGetLogRecordResponse
   2755           *
   2756           * @brief   Call to send out a Get Log Record Response
   2757           *
   2758           * @param   srcEP - Sending application's endpoint
   2759           * @param   dstAddr - where you want the message to go
   2760           * @param   pPayload:
   2761           *           logEntryID - The index into the log table where this log entry is stored
   2762           *           timestamp - A ZigBeeLocalTime used to timestamp all events and alarms on the door lock
   2763           *           eventType - Indicates the type of event that took place on the door lock
   2764           *           source - A source value of available sources
   2765           *           eventIDAlarmCode - A one byte value indicating the type of event that took place on the door lock
   2766           *           userID - User ID is between 0 - [# PINs User supported attribute]
   2767           *           aPIN - A ZigBee string indicating the PIN code used to create the event on the door lock
   2768           * @param   disableDefaultRsp - decides default response is necessary or not
   2769           * @param   seqNum - sequence number of the command packet
   2770           *
   2771           * @return  ZStatus_t
   2772           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2773          ZStatus_t zclClosures_SendDoorLockGetLogRecordResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockGetLogRecordResponse:
   2774                                                                  zclDoorLockGetLogRecordRsp_t *pPayload,
   2775                                                                  uint8 disableDefaultRsp, uint8 seqNum )
   2776          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V11,R1
   \   00000C   8A..         MOV       ?V12,R2
   \   00000E   8B..         MOV       ?V13,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   2777            uint8 i;
   2778            uint8 *pBuf;  // variable length payload
   2779            uint8 offset;
   2780            uint8 calculatedArrayLen;
   2781            uint8 calculatedBufSize;
   2782            ZStatus_t status;
   2783          
   2784            // first octet of PIN/RFID Code variable string identifies its length
   2785            calculatedArrayLen = pPayload->pPIN[0] + 1;   // add first byte of string
   \   000014   EE           MOV       A,R6
   \   000015   240B         ADD       A,#0xb
   \   000017   F5..         MOV       ?V8,A
   \   000019   E4           CLR       A
   \   00001A   3F           ADDC      A,R7
   \   00001B   F5..         MOV       ?V9,A
   \   00001D   85..82       MOV       DPL,?V8
   \   000020   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000023   F5..         MOV       ?V10,A
   2786          
   2787            // determine the total buffer size
   2788            calculatedBufSize = calculatedArrayLen + PAYLOAD_LEN_GET_LOG_RECORD_RSP;
   \   000025   740B         MOV       A,#0xb
   \   000027   25..         ADD       A,?V10
   \   000029   85..82       MOV       DPL,?XSP + 0
   \   00002C   85..83       MOV       DPH,?XSP + 1
   \   00002F   F0           MOVX      @DPTR,A
   2789          
   2790            pBuf = zcl_mem_alloc( calculatedBufSize );
   \   000030   F5..         MOV       ?V2,A
   \   000032   75..00       MOV       ?V3,#0x0
   \   000035                ; Setup parameters for call to function osal_mem_alloc
   \   000035   FA           MOV       R2,A
   \   000036   AB..         MOV       R3,?V3
   \   000038   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003B   8A..         MOV       ?V0,R2
   \   00003D   8B..         MOV       ?V1,R3
   2791            if ( !pBuf )
   \   00003F   EA           MOV       A,R2
   \   000040   45..         ORL       A,?V1
   \   000042   7005         JNZ       ??zclClosures_SendDoorLockGetLogRecordResponse_0
   2792            {
   2793              return ( ZMemError );  // no memory
   \   000044   7910         MOV       R1,#0x10
   \   000046   02....       LJMP      ??zclClosures_SendDoorLockGetLogRecordResponse_1 & 0xFFFF
   2794            }
   2795          
   2796            // over-the-air is always little endian. Break into a byte stream.
   2797            pBuf[0] = LO_UINT16(pPayload->logEntryID);
   \                     ??zclClosures_SendDoorLockGetLogRecordResponse_0:
   \   000049   8E82         MOV       DPL,R6
   \   00004B   8F83         MOV       DPH,R7
   \   00004D   12....       LCALL     ??Subroutine167_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   000050   12....       LCALL     ?Subroutine75 & 0xFFFF
   2798            pBuf[1] = HI_UINT16(pPayload->logEntryID);
   \                     ??CrossCallReturnLabel_177:
   \   000053   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   000056   A3           INC       DPTR
   \   000057   F0           MOVX      @DPTR,A
   2799            pBuf[2] = BREAK_UINT32(pPayload->timestamp, 0);
   \   000058   EE           MOV       A,R6
   \   000059   2402         ADD       A,#0x2
   \   00005B   FA           MOV       R2,A
   \   00005C   E4           CLR       A
   \   00005D   3F           ADDC      A,R7
   \   00005E   FB           MOV       R3,A
   \   00005F   8A82         MOV       DPL,R2
   \   000061   8B83         MOV       DPH,R3
   \   000063   78..         MOV       R0,#?V4
   \   000065   12....       LCALL     ?L_MOV_X
   \   000068   85..82       MOV       DPL,?V0
   \   00006B   85..83       MOV       DPH,?V1
   \   00006E   12....       LCALL     ?Subroutine70 & 0xFFFF
   2800            pBuf[3] = BREAK_UINT32(pPayload->timestamp, 1);
   \                     ??CrossCallReturnLabel_412:
   \   000071   12....       LCALL     ?L_MOV_X
   \   000074   E5..         MOV       A,?V5
   \   000076   85..82       MOV       DPL,?V0
   \   000079   85..83       MOV       DPH,?V1
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   12....       LCALL     ??Subroutine166_0 & 0xFFFF
   2801            pBuf[4] = BREAK_UINT32(pPayload->timestamp, 2);
   \                     ??CrossCallReturnLabel_414:
   \   000082   12....       LCALL     ?L_MOV_X
   \   000085   7410         MOV       A,#0x10
   \   000087   78..         MOV       R0,#?V4
   \   000089   12....       LCALL     ?UL_SHR
   \   00008C   85..82       MOV       DPL,?V0
   \   00008F   85..83       MOV       DPH,?V1
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   12....       LCALL     ?Subroutine70 & 0xFFFF
   2802            pBuf[5] = BREAK_UINT32(pPayload->timestamp, 3);
   \                     ??CrossCallReturnLabel_413:
   \   000097   12....       LCALL     ?L_MOV_X
   \   00009A   7418         MOV       A,#0x18
   \   00009C   78..         MOV       R0,#?V4
   \   00009E   12....       LCALL     ?UL_SHR
   \   0000A1   85..82       MOV       DPL,?V0
   \   0000A4   85..83       MOV       DPH,?V1
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   E5..         MOV       A,?V4
   \   0000AE   12....       LCALL     ?Subroutine74 & 0xFFFF
   2803            pBuf[6] = pPayload->eventType;
   \                     ??CrossCallReturnLabel_172:
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   0000B9   12....       LCALL     ?Subroutine75 & 0xFFFF
   2804            pBuf[7] = pPayload->source;
   \                     ??CrossCallReturnLabel_178:
   \   0000BC   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   0000BF   12....       LCALL     ?Subroutine74 & 0xFFFF
   2805            pBuf[8] = pPayload->eventIDAlarmCode;
   \                     ??CrossCallReturnLabel_173:
   \   0000C2   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0000C5   A3           INC       DPTR
   \   0000C6   F0           MOVX      @DPTR,A
   2806            pBuf[9] = LO_UINT16(pPayload->userID);
   \   0000C7   EE           MOV       A,R6
   \   0000C8   2409         ADD       A,#0x9
   \   0000CA   F8           MOV       R0,A
   \   0000CB   E4           CLR       A
   \   0000CC   3F           ADDC      A,R7
   \   0000CD   F9           MOV       R1,A
   \   0000CE   8882         MOV       DPL,R0
   \   0000D0   8983         MOV       DPH,R1
   \   0000D2   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000D5   12....       LCALL     ?Subroutine123 & 0xFFFF
   2807            pBuf[10] = HI_UINT16(pPayload->userID);
   \                     ??CrossCallReturnLabel_343:
   \   0000D8   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0000DB   A3           INC       DPTR
   \   0000DC   F0           MOVX      @DPTR,A
   2808            offset = 11;
   \   0000DD   790B         MOV       R1,#0xb
   2809            for ( i = 0; i < calculatedArrayLen; i++ )
   \   0000DF   7800         MOV       R0,#0x0
   \   0000E1   8015         SJMP      ??zclClosures_SendDoorLockGetLogRecordResponse_2
   2810            {
   2811              pBuf[offset++] = pPayload->pPIN[i];
   \                     ??zclClosures_SendDoorLockGetLogRecordResponse_3:
   \   0000E3   E8           MOV       A,R0
   \   0000E4   FA           MOV       R2,A
   \   0000E5   85..82       MOV       DPL,?V8
   \   0000E8   85..83       MOV       DPH,?V9
   \   0000EB   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   2812            }
   \                     ??CrossCallReturnLabel_427:
   \   0000EE   C0E0         PUSH      A
   \   0000F0   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   0000F3   D0E0         POP       A
   \   0000F5   F0           MOVX      @DPTR,A
   \   0000F6   09           INC       R1
   \   0000F7   08           INC       R0
   \                     ??zclClosures_SendDoorLockGetLogRecordResponse_2:
   \   0000F8   E8           MOV       A,R0
   \   0000F9   C3           CLR       C
   \   0000FA   95..         SUBB      A,?V10
   \   0000FC   40E5         JC        ??zclClosures_SendDoorLockGetLogRecordResponse_3
   2813          
   2814            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2815                                      COMMAND_CLOSURES_GET_LOG_RECORD_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   2816                                      disableDefaultRsp, 0, seqNum, calculatedBufSize, pBuf );
   \   0000FE                ; Setup parameters for call to function zcl_SendCommand
   \   0000FE   78..         MOV       R0,#?V0
   \   000100   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000103   78..         MOV       R0,#?V2
   \   000105   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000108   741C         MOV       A,#0x1c
   \   00010A   12....       LCALL     ?XSTACK_DISP0_8
   \   00010D   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000110   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000113   E4           CLR       A
   \   000114   F5..         MOV       ?V2,A
   \   000116   78..         MOV       R0,#?V2
   \   000118   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011B   741E         MOV       A,#0x1e
   \   00011D   12....       LCALL     ?XSTACK_DISP0_8
   \   000120   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000123   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000126   75..01       MOV       ?V2,#0x1
   \   000129   78..         MOV       R0,#?V2
   \   00012B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00012E   78..         MOV       R0,#?V2
   \   000130   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000133   75..04       MOV       ?V2,#0x4
   \   000136   78..         MOV       R0,#?V2
   \   000138   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00013B   7C01         MOV       R4,#0x1
   \   00013D   7D01         MOV       R5,#0x1
   \   00013F   AA..         MOV       R2,?V12
   \   000141   AB..         MOV       R3,?V13
   \   000143   A9..         MOV       R1,?V11
   \   000145   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000148   740B         MOV       A,#0xb
   \   00014A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014D   E9           MOV       A,R1
   \   00014E   FE           MOV       R6,A
   2817            zcl_mem_free( pBuf );
   \   00014F                ; Setup parameters for call to function osal_mem_free
   \   00014F   AA..         MOV       R2,?V0
   \   000151   AB..         MOV       R3,?V1
   \   000153   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2818            return status;
   \   000156   EE           MOV       A,R6
   \   000157   F9           MOV       R1,A
   \                     ??zclClosures_SendDoorLockGetLogRecordResponse_1:
   \   000158   7401         MOV       A,#0x1
   \   00015A   80..         SJMP      ??Subroutine169_0
   2819          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E5..         MOV       A,?V4
   \   000004                REQUIRE ??Subroutine166_0
   \   000004                ; // Fall through to label ??Subroutine166_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine166_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   78..         MOV       R0,#?V4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   E9           MOV       A,R1
   \   000001   FA           MOV       R2,A
   \   000002   E5..         MOV       A,?V0
   \   000004   2A           ADD       A,R2
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   35..         ADDC      A,?V1
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   78..         MOV       R0,#?V2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
   2820          
   2821          /*********************************************************************
   2822           * @fn      zclClosures_SendDoorLockGetPINCodeResponse
   2823           *
   2824           * @brief   Call to send out a Get PIN Code Response
   2825           *
   2826           * @param   srcEP - Sending application's endpoint
   2827           * @param   dstAddr - where you want the message to go
   2828           * @param   pPayload:
   2829           *           userID - User ID is between 0 - [# PINs User supported attribute]
   2830           *           userStatus - Used to indicate what the status is for a specific User ID
   2831           *           userType - Used to indicate what the type is for a specific User ID
   2832           *           aCode - Returned PIN number
   2833           * @param   disableDefaultRsp - decides default response is necessary or not
   2834           * @param   seqNum - sequence number of the command packet
   2835           *
   2836           * @return  ZStatus_t
   2837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2838          ZStatus_t zclClosures_SendDoorLockGetPINCodeResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockGetPINCodeResponse:
   2839                                                                zclDoorLockGetPINCodeRsp_t *pPayload,
   2840                                                                uint8 disableDefaultRsp, uint8 seqNum )
   2841          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine12 & 0xFFFF
   2842            uint8 i;
   2843            uint8 *pBuf;  // variable length payload
   2844            uint8 offset;
   2845            uint8 calculatedArrayLen;
   2846            uint8 calculatedBufSize;
   2847            ZStatus_t status;
   2848          
   2849            // first octet of PIN/RFID Code variable string identifies its length
   2850            calculatedArrayLen = pPayload->pCode[0] + 1;   // add first byte of string
   2851          
   2852            // determine the total buffer size
   2853            calculatedBufSize = calculatedArrayLen + PAYLOAD_LEN_GET_PIN_CODE_RSP;
   2854          
   2855            pBuf = zcl_mem_alloc( calculatedBufSize );
   \                     ??CrossCallReturnLabel_10:
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000010   8A..         MOV       ?V6,R2
   \   000012   8B..         MOV       ?V7,R3
   2856            if ( !pBuf )
   \   000014   EA           MOV       A,R2
   \   000015   45..         ORL       A,?V7
   \   000017   7004         JNZ       ??zclClosures_SendDoorLockGetPINCodeResponse_0
   2857            {
   2858              return ( ZMemError );  // no memory
   \   000019   7910         MOV       R1,#0x10
   \   00001B   8074         SJMP      ??zclClosures_SendDoorLockGetPINCodeResponse_1
   2859            }
   2860          
   2861            // over-the-air is always little endian. Break into a byte stream.
   2862            pBuf[0] = LO_UINT16(pPayload->userID);
   \                     ??zclClosures_SendDoorLockGetPINCodeResponse_0:
   \   00001D   12....       LCALL     ?Subroutine9 & 0xFFFF
   2863            pBuf[1] = HI_UINT16(pPayload->userID);
   2864            pBuf[2] = pPayload->userStatus;
   2865            pBuf[3] = pPayload->userType;
   2866            offset = 4;
   2867            for ( i = 0; i < calculatedArrayLen; i++ )
   \                     ??CrossCallReturnLabel_2:
   \   000020   800D         SJMP      ??zclClosures_SendDoorLockGetPINCodeResponse_2
   2868            {
   2869              pBuf[offset++] = pPayload->pCode[i];
   \                     ??zclClosures_SendDoorLockGetPINCodeResponse_3:
   \   000022   12....       LCALL     ?Subroutine10 & 0xFFFF
   2870            }
   \                     ??CrossCallReturnLabel_431:
   \   000025   C0E0         PUSH      A
   \   000027   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   00002A   D0E0         POP       A
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   09           INC       R1
   \   00002E   08           INC       R0
   \                     ??zclClosures_SendDoorLockGetPINCodeResponse_2:
   \   00002F   E8           MOV       A,R0
   \   000030   C3           CLR       C
   \   000031   95..         SUBB      A,?V3
   \   000033   40ED         JC        ??zclClosures_SendDoorLockGetPINCodeResponse_3
   2871          
   2872            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2873                                      COMMAND_CLOSURES_GET_PIN_CODE_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   2874                                      disableDefaultRsp, 0, seqNum, calculatedBufSize, pBuf );
   \   000035                ; Setup parameters for call to function zcl_SendCommand
   \   000035   78..         MOV       R0,#?V6
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   78..         MOV       R0,#?V8
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   741A         MOV       A,#0x1a
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004A   E4           CLR       A
   \   00004B   F5..         MOV       ?V0,A
   \   00004D   F5..         MOV       ?V1,A
   \   00004F   78..         MOV       R0,#?V0
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000054   741C         MOV       A,#0x1c
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005F   75..01       MOV       ?V0,#0x1
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000067   78..         MOV       R0,#?V0
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006C   75..06       MOV       ?V0,#0x6
   \   00006F   78..         MOV       R0,#?V0
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000074   7C01         MOV       R4,#0x1
   \   000076   7D01         MOV       R5,#0x1
   \   000078   EE           MOV       A,R6
   \   000079   FA           MOV       R2,A
   \   00007A   EF           MOV       A,R7
   \   00007B   FB           MOV       R3,A
   \   00007C   A9..         MOV       R1,?V2
   \   00007E   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000081   740B         MOV       A,#0xb
   \   000083   12....       LCALL     ?DEALLOC_XSTACK8
   \   000086   E9           MOV       A,R1
   \   000087   FE           MOV       R6,A
   2875            zcl_mem_free( pBuf );
   \   000088                ; Setup parameters for call to function osal_mem_free
   \   000088   AA..         MOV       R2,?V6
   \   00008A   AB..         MOV       R3,?V7
   \   00008C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2876            return status;
   \   00008F   EE           MOV       A,R6
   \   000090   F9           MOV       R1,A
   \                     ??zclClosures_SendDoorLockGetPINCodeResponse_1:
   \   000091   02....       LJMP      ?Subroutine4 & 0xFFFF
   2877          }
   2878          
   2879          /*********************************************************************
   2880           * @fn      zclClosures_SendDoorLockGetUserStatusResponse
   2881           *
   2882           * @brief   Call to send out a Get User Status Response
   2883           *
   2884           * @param   srcEP - Sending application's endpoint
   2885           * @param   dstAddr - where you want the message to go
   2886           * @param   userID - User ID is between 0 - [# PINs User supported attribute]
   2887           * @param   userStatus - Used to indicate what the status is for a specific User ID
   2888           * @param   disableDefaultRsp - decides default response is necessary or not
   2889           * @param   seqNum - sequence number of the command packet
   2890           *
   2891           * @return  ZStatus_t
   2892           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2893          ZStatus_t zclClosures_SendDoorLockGetUserStatusResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockGetUserStatusResponse:
   2894                                                                   uint16 userID, uint8 userStatus,
   2895                                                                   uint8 disableDefaultRsp, uint8 seqNum )
   2896          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2897            uint8 payload[PAYLOAD_LEN_GET_USER_STATUS_RSP];
   2898          
   2899            payload[0] = LO_UINT16(userID);
   \   00000C   EC           MOV       A,R4
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
   2900            payload[1] = HI_UINT16(userID);
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   ED           MOV       A,R5
   \   00001A   F0           MOVX      @DPTR,A
   2901            payload[2] = userStatus;
   \   00001B   740D         MOV       A,#0xd
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   E0           MOVX      A,@DPTR
   \   000021   C0E0         PUSH      A
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   D0E0         POP       A
   \   00002A   12....       LCALL     ??Subroutine173_0 & 0xFFFF
   2902          
   2903            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2904                                    COMMAND_CLOSURES_GET_USER_STATUS_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   2905                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_GET_USER_STATUS_RSP, payload );
   \                     ??CrossCallReturnLabel_454:
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   75..03       MOV       ?V0,#0x3
   \   000033   75..00       MOV       ?V1,#0x0
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7413         MOV       A,#0x13
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000046   E4           CLR       A
   \   000047   F5..         MOV       ?V0,A
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7415         MOV       A,#0x15
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059   75..01       MOV       ?V0,#0x1
   \   00005C   78..         MOV       R0,#?V0
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000061   78..         MOV       R0,#?V0
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000066   75..0A       MOV       ?V0,#0xa
   \   000069   02....       LJMP      ?Subroutine1 & 0xFFFF
   2906          }
   2907          
   2908          /*********************************************************************
   2909           * @fn      zclClosures_SendDoorLockGetWeekDayScheduleResponse
   2910           *
   2911           * @brief   Call to send out a Get Week Day Schedule Response
   2912           *
   2913           * @param   srcEP - Sending application's endpoint
   2914           * @param   dstAddr - where you want the message to go
   2915           * @param   pCmd:
   2916           *               scheduleID - The Schedule ID # is between 0 - [# Schedule IDs per user attribute]
   2917           *               userID - User ID is between 0 - [# PINs User supported attribute]
   2918           *               status - Returns the state due to the requesting command
   2919           *               daysMask - Bitmask of the effective days in the order XSFTWTMS
   2920           *               startHour - The start hour of the Week Day Schedule: 0-23
   2921           *               startMinute - The start minute of the Week Day Schedule: 0-59
   2922           *               endHour - The end hour of the Week Day Schedule: 0-23
   2923           *               endMinute - The end minute of the Week Day Schedule: 0-59
   2924           * @param   disableDefaultRsp - decides default response is necessary or not
   2925           * @param   seqNum - sequence number of the command packet
   2926           *
   2927           * @return  ZStatus_t
   2928           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2929          ZStatus_t zclClosures_SendDoorLockGetWeekDayScheduleResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockGetWeekDayScheduleResponse:
   2930                                                                        zclDoorLockGetWeekDayScheduleRsp_t *pCmd,
   2931                                                                        uint8 disableDefaultRsp, uint8 seqNum )
   2932          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2933            uint8 payload[PAYLOAD_LEN_GET_WEEK_DAY_SCHEDULE_RSP];
   2934            uint8 payloadLen = sizeof( payload );
   \   00000C   7F09         MOV       R7,#0x9
   2935          
   2936            payload[0] = pCmd->scheduleID;
   \   00000E   12....       LCALL     ?Subroutine91 & 0xFFFF
   2937            payload[1] = LO_UINT16( pCmd->userID );
   \                     ??CrossCallReturnLabel_215:
   \   000011   A882         MOV       R0,DPL
   \   000013   A983         MOV       R1,DPH
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F5..         MOV       ?V0,A
   \   000018   7401         MOV       A,#0x1
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   E5..         MOV       A,?V0
   \   00001F   12....       LCALL     ?Subroutine123 & 0xFFFF
   2938            payload[2] = HI_UINT16( pCmd->userID );
   \                     ??CrossCallReturnLabel_344:
   \   000022   E0           MOVX      A,@DPTR
   \   000023   C0E0         PUSH      A
   \   000025   7402         MOV       A,#0x2
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   D0E0         POP       A
   \   00002C   F0           MOVX      @DPTR,A
   2939            payload[3] = pCmd->status;
   \   00002D   EC           MOV       A,R4
   \   00002E   2403         ADD       A,#0x3
   \   000030   F8           MOV       R0,A
   \   000031   E4           CLR       A
   \   000032   3D           ADDC      A,R5
   \   000033   F9           MOV       R1,A
   \   000034   8882         MOV       DPL,R0
   \   000036   8983         MOV       DPH,R1
   \   000038   E0           MOVX      A,@DPTR
   \   000039   C0E0         PUSH      A
   \   00003B   7403         MOV       A,#0x3
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   D0E0         POP       A
   \   000042   F0           MOVX      @DPTR,A
   2940          
   2941            if ( pCmd->status == ZCL_STATUS_SUCCESS )
   \   000043   8882         MOV       DPL,R0
   \   000045   8983         MOV       DPH,R1
   \   000047   E0           MOVX      A,@DPTR
   \   000048   704C         JNZ       ??zclClosures_SendDoorLockGetWeekDayScheduleRes_1
   2942            {
   2943              payload[4] = pCmd->daysMask;
   \   00004A   8C82         MOV       DPL,R4
   \   00004C   8D83         MOV       DPH,R5
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   C0E0         PUSH      A
   \   000055   7404         MOV       A,#0x4
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   D0E0         POP       A
   \   00005C   12....       LCALL     ?Subroutine80 & 0xFFFF
   2944              payload[5] = pCmd->startHour;
   2945              payload[6] = pCmd->startMinute;
   2946              payload[7] = pCmd->endHour;
   2947              payload[8] = pCmd->endMinute;
   2948            }
   \                     ??CrossCallReturnLabel_189:
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   C0E0         PUSH      A
   \   000064   7405         MOV       A,#0x5
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   D0E0         POP       A
   \   00006B   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   C0E0         PUSH      A
   \   000071   7406         MOV       A,#0x6
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   D0E0         POP       A
   \   000078   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   C0E0         PUSH      A
   \   00007F   7407         MOV       A,#0x7
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   D0E0         POP       A
   \   000086   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   C0E0         PUSH      A
   \   00008C   7408         MOV       A,#0x8
   \   00008E   12....       LCALL     ?XSTACK_DISP0_8
   \   000091   D0E0         POP       A
   \   000093   F0           MOVX      @DPTR,A
   \   000094   8002         SJMP      ??zclClosures_SendDoorLockGetWeekDayScheduleRes_2
   2949            else
   2950            {
   2951              payloadLen = 4;
   \                     ??zclClosures_SendDoorLockGetWeekDayScheduleRes_1:
   \   000096   7F04         MOV       R7,#0x4
   2952            }
   2953          
   2954            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2955                                    COMMAND_CLOSURES_GET_WEEK_DAY_SCHEDULE_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   2956                                    disableDefaultRsp, 0, seqNum, payloadLen, payload );
   \                     ??zclClosures_SendDoorLockGetWeekDayScheduleRes_2:
   \   000098                ; Setup parameters for call to function zcl_SendCommand
   \   000098   A8..         MOV       R0,?XSP + 0
   \   00009A   A9..         MOV       R1,?XSP + 1
   \   00009C   88..         MOV       ?V0,R0
   \   00009E   89..         MOV       ?V1,R1
   \   0000A0   78..         MOV       R0,#?V0
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A5   EF           MOV       A,R7
   \   0000A6   F5..         MOV       ?V0,A
   \   0000A8   75..00       MOV       ?V1,#0x0
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B0   7418         MOV       A,#0x18
   \   0000B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B5   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BB   E4           CLR       A
   \   0000BC   F5..         MOV       ?V0,A
   \   0000BE   78..         MOV       R0,#?V0
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C3   741A         MOV       A,#0x1a
   \   0000C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C8   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000CB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CE   75..01       MOV       ?V0,#0x1
   \   0000D1   78..         MOV       R0,#?V0
   \   0000D3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D6   78..         MOV       R0,#?V0
   \   0000D8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DB   75..0C       MOV       ?V0,#0xc
   \   0000DE   78..         MOV       R0,#?V0
   \   0000E0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E3   7C01         MOV       R4,#0x1
   \   0000E5   7D01         MOV       R5,#0x1
   \   0000E7   EE           MOV       A,R6
   \   0000E8   F9           MOV       R1,A
   \   0000E9   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000EC   740B         MOV       A,#0xb
   \   0000EE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F1   7409         MOV       A,#0x9
   \   0000F3   02....       LJMP      ??Subroutine174_0 & 0xFFFF
   2957          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   8C82         MOV       DPL,R4
   \   000002   8D83         MOV       DPH,R5
   \   000004   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000007   8C82         MOV       DPL,R4
   \   000009   8D83         MOV       DPH,R5
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET
   2958          
   2959          /*********************************************************************
   2960           * @fn      zclClosures_SendDoorLockGetYearDayScheduleResponse
   2961           *
   2962           * @brief   Call to send out a Get Year Day Schedule Response
   2963           *
   2964           * @param   srcEP - Sending application's endpoint
   2965           * @param   dstAddr - where you want the message to go
   2966           * @param   pCmd:
   2967           *             scheduleID - The Schedule ID # is between 0 - [# Schedule IDs per user attribute]
   2968           *             userID - User ID is between 0 - [# PINs User supported attribute]
   2969           *             status - Returns the state due to the requesting command
   2970           *             zigBeeLocalStartTime - Start time of the Year Day Schedule representing by ZigBeeLocalTime
   2971           *             zigBeeLocalEndTime - End time of the Year Day Schedule representing by ZigBeeLocalTime
   2972           * @param   disableDefaultRsp - decides default response is necessary or not
   2973           * @param   seqNum - sequence number of the command packet
   2974           *
   2975           * @return  ZStatus_t
   2976           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2977          ZStatus_t zclClosures_SendDoorLockGetYearDayScheduleResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockGetYearDayScheduleResponse:
   2978                                                                        zclDoorLockGetYearDayScheduleRsp_t *pCmd,
   2979                                                                        uint8 disableDefaultRsp, uint8 seqNum )
   2980          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2981            uint8 payload[PAYLOAD_LEN_GET_YEAR_DAY_SCHEDULE_RSP];
   2982            uint8 payloadLen = sizeof( payload );
   \   00000C   790C         MOV       R1,#0xc
   2983          
   2984            payload[0] = pCmd->scheduleID;
   \   00000E   12....       LCALL     ?Subroutine33 & 0xFFFF
   2985            payload[1] = LO_UINT16( pCmd->userID );
   \                     ??CrossCallReturnLabel_79:
   \   000011   F5..         MOV       ?V2,A
   \   000013   7401         MOV       A,#0x1
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   E5..         MOV       A,?V2
   \   00001A   12....       LCALL     ?Subroutine79 & 0xFFFF
   2986            payload[2] = HI_UINT16( pCmd->userID );
   \                     ??CrossCallReturnLabel_186:
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V0,A
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E5..         MOV       A,?V0
   \   000028   F0           MOVX      @DPTR,A
   2987            payload[3] = pCmd->status;
   \   000029   EC           MOV       A,R4
   \   00002A   2403         ADD       A,#0x3
   \   00002C   F5..         MOV       ?V0,A
   \   00002E   E4           CLR       A
   \   00002F   3D           ADDC      A,R5
   \   000030   F5..         MOV       ?V1,A
   \   000032   85..82       MOV       DPL,?V0
   \   000035   F583         MOV       DPH,A
   \   000037   E0           MOVX      A,@DPTR
   \   000038   C0E0         PUSH      A
   \   00003A   7403         MOV       A,#0x3
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   D0E0         POP       A
   \   000041   12....       LCALL     ?Subroutine78 & 0xFFFF
   2988          
   2989            if ( pCmd->status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_183:
   \   000044   6003         JZ        $+5
   \   000046   02....       LJMP      ??zclClosures_SendDoorLockGetYearDayScheduleRes_1 & 0xFFFF
   2990            {
   2991              payload[4] = BREAK_UINT32( pCmd->zigBeeLocalStartTime, 0 );
   \   000049   EC           MOV       A,R4
   \   00004A   2404         ADD       A,#0x4
   \   00004C   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   00004F   12....       LCALL     ?L_MOV_X
   \   000052   7404         MOV       A,#0x4
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   12....       LCALL     ?Subroutine58 & 0xFFFF
   2992              payload[5] = BREAK_UINT32( pCmd->zigBeeLocalStartTime, 1 );
   \                     ??CrossCallReturnLabel_127:
   \   00005A   12....       LCALL     ?L_MOV_X
   \   00005D   E5..         MOV       A,?V1
   \   00005F   F5..         MOV       ?V0,A
   \   000061   7405         MOV       A,#0x5
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   12....       LCALL     ?Subroutine58 & 0xFFFF
   2993              payload[6] = BREAK_UINT32( pCmd->zigBeeLocalStartTime, 2 );
   \                     ??CrossCallReturnLabel_128:
   \   000069   12....       LCALL     ?L_MOV_X
   \   00006C   7410         MOV       A,#0x10
   \   00006E   78..         MOV       R0,#?V0
   \   000070   12....       LCALL     ?UL_SHR
   \   000073   7406         MOV       A,#0x6
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   12....       LCALL     ?Subroutine58 & 0xFFFF
   2994              payload[7] = BREAK_UINT32( pCmd->zigBeeLocalStartTime, 3 );
   \                     ??CrossCallReturnLabel_129:
   \   00007B   12....       LCALL     ?L_MOV_X
   \   00007E   7418         MOV       A,#0x18
   \   000080   78..         MOV       R0,#?V0
   \   000082   12....       LCALL     ?UL_SHR
   \   000085   7407         MOV       A,#0x7
   \   000087   12....       LCALL     ?XSTACK_DISP0_8
   \   00008A   E5..         MOV       A,?V0
   \   00008C   F0           MOVX      @DPTR,A
   2995              payload[8] = BREAK_UINT32( pCmd->zigBeeLocalEndTime, 0 );
   \   00008D   EC           MOV       A,R4
   \   00008E   2408         ADD       A,#0x8
   \   000090   FC           MOV       R4,A
   \   000091   5001         JNC       ??zclClosures_SendDoorLockGetYearDayScheduleRes_2
   \   000093   0D           INC       R5
   \                     ??zclClosures_SendDoorLockGetYearDayScheduleRes_2:
   \   000094   8C82         MOV       DPL,R4
   \   000096   8D83         MOV       DPH,R5
   \   000098   78..         MOV       R0,#?V0
   \   00009A   12....       LCALL     ?L_MOV_X
   \   00009D   7408         MOV       A,#0x8
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   12....       LCALL     ?Subroutine69 & 0xFFFF
   2996              payload[9] = BREAK_UINT32( pCmd->zigBeeLocalEndTime, 1 );
   2997              payload[10] = BREAK_UINT32( pCmd->zigBeeLocalEndTime, 2 );
   2998              payload[11] = BREAK_UINT32( pCmd->zigBeeLocalEndTime, 3 );
   2999            }
   \                     ??CrossCallReturnLabel_161:
   \   0000A5   12....       LCALL     ?L_MOV_X
   \   0000A8   E5..         MOV       A,?V1
   \   0000AA   F5..         MOV       ?V0,A
   \   0000AC   7409         MOV       A,#0x9
   \   0000AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B1   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   0000B4   12....       LCALL     ?L_MOV_X
   \   0000B7   7410         MOV       A,#0x10
   \   0000B9   78..         MOV       R0,#?V0
   \   0000BB   12....       LCALL     ?UL_SHR
   \   0000BE   740A         MOV       A,#0xa
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   0000C6   12....       LCALL     ?L_MOV_X
   \   0000C9   7418         MOV       A,#0x18
   \   0000CB   78..         MOV       R0,#?V0
   \   0000CD   12....       LCALL     ?UL_SHR
   \   0000D0   740B         MOV       A,#0xb
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   E5..         MOV       A,?V0
   \   0000D7   F0           MOVX      @DPTR,A
   \   0000D8   8002         SJMP      ??zclClosures_SendDoorLockGetYearDayScheduleRes_3
   3000            else
   3001            {
   3002              payloadLen = 4;
   \                     ??zclClosures_SendDoorLockGetYearDayScheduleRes_1:
   \   0000DA   7904         MOV       R1,#0x4
   3003            }
   3004          
   3005            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   3006                                    COMMAND_CLOSURES_GET_YEAR_DAY_SCHEDULE_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   3007                                    disableDefaultRsp, 0, seqNum, payloadLen, payload );
   \                     ??zclClosures_SendDoorLockGetYearDayScheduleRes_3:
   \   0000DC                ; Setup parameters for call to function zcl_SendCommand
   \   0000DC   AC..         MOV       R4,?XSP + 0
   \   0000DE   AD..         MOV       R5,?XSP + 1
   \   0000E0   8C..         MOV       ?V0,R4
   \   0000E2   8D..         MOV       ?V1,R5
   \   0000E4   78..         MOV       R0,#?V0
   \   0000E6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E9   E9           MOV       A,R1
   \   0000EA   F5..         MOV       ?V0,A
   \   0000EC   75..00       MOV       ?V1,#0x0
   \   0000EF   78..         MOV       R0,#?V0
   \   0000F1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F4   741F         MOV       A,#0x1f
   \   0000F6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F9   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0000FC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FF   E4           CLR       A
   \   000100   F5..         MOV       ?V0,A
   \   000102   78..         MOV       R0,#?V0
   \   000104   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000107   7421         MOV       A,#0x21
   \   000109   12....       LCALL     ?XSTACK_DISP0_8
   \   00010C   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00010F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000112   75..01       MOV       ?V0,#0x1
   \   000115   78..         MOV       R0,#?V0
   \   000117   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00011A   78..         MOV       R0,#?V0
   \   00011C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00011F   75..0F       MOV       ?V0,#0xf
   \   000122   78..         MOV       R0,#?V0
   \   000124   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000127   7C01         MOV       R4,#0x1
   \   000129   7D01         MOV       R5,#0x1
   \   00012B   EE           MOV       A,R6
   \   00012C   F9           MOV       R1,A
   \   00012D   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000130   740B         MOV       A,#0xb
   \   000132   12....       LCALL     ?DEALLOC_XSTACK8
   \   000135   740C         MOV       A,#0xc
   \   000137                REQUIRE ?Subroutine6
   \   000137                ; // Fall through to label ?Subroutine6
   3008          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F06         MOV       R7,#0x6
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   E5..         MOV       A,?V0
   \   000002   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000005   78..         MOV       R0,#?V0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   F5..         MOV       ?V0,A
   \   000002   E4           CLR       A
   \   000003   3D           ADDC      A,R5
   \   000004   85....       MOV       ?V4,?V0
   \   000007   F5..         MOV       ?V5,A
   \   000009   85..82       MOV       DPL,?V4
   \   00000C   F583         MOV       DPH,A
   \   00000E   78..         MOV       R0,#?V0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   E5..         MOV       A,?V0
   \   000002   F0           MOVX      @DPTR,A
   \   000003   85..82       MOV       DPL,?V4
   \   000006   85..83       MOV       DPH,?V5
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000003   8582..       MOV       ?V0,DPL
   \   000006   8583..       MOV       ?V1,DPH
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET
   3009          
   3010          /*********************************************************************
   3011           * @fn      zclClosures_SendDoorLockGetHolidayScheduleResponse
   3012           *
   3013           * @brief   Call to send out a Get Holiday Schedule Response
   3014           *
   3015           * @param   srcEP - Sending application's endpoint
   3016           * @param   dstAddr - where you want the message to go
   3017           * @param   pCmd:
   3018           *             holidayScheduleID - A unique ID for given Holiday Schedule (0 to 254)
   3019           *             status - Returns the state due to the requesting command
   3020           *             zigBeeLocalStartTime - Start time of the Year Day Schedule representing by ZigBeeLocalTime
   3021           *             zigBeeLocalEndTime - End time of the Year Day Schedule representing by ZigBeeLocalTime
   3022           *             operatingModeDuringHoliday - A valid enumeration value as listed in operating mode attribute
   3023           * @param   disableDefaultRsp - decides default response is necessary or not
   3024           * @param   seqNum - sequence number of the command packet
   3025           *
   3026           * @return  ZStatus_t
   3027           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3028          ZStatus_t zclClosures_SendDoorLockGetHolidayScheduleResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockGetHolidayScheduleResponse:
   3029                                                                        zclDoorLockGetHolidayScheduleRsp_t *pCmd,
   3030                                                                        uint8 disableDefaultRsp, uint8 seqNum )
   3031          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   3032            uint8 payload[PAYLOAD_LEN_GET_HOLIDAY_SCHEDULE_RSP];
   3033            uint8 payloadLen = sizeof( payload );
   \   00000C   790B         MOV       R1,#0xb
   3034          
   3035            payload[0] = pCmd->holidayScheduleID;
   \   00000E   12....       LCALL     ?Subroutine33 & 0xFFFF
   3036            payload[1] = pCmd->status;
   \                     ??CrossCallReturnLabel_80:
   \   000011   C0E0         PUSH      A
   \   000013   7401         MOV       A,#0x1
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   D0E0         POP       A
   \   00001A   12....       LCALL     ?Subroutine78 & 0xFFFF
   3037          
   3038            if ( pCmd->status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_184:
   \   00001D   6003         JZ        $+5
   \   00001F   02....       LJMP      ??zclClosures_SendDoorLockGetHolidayScheduleRes_1 & 0xFFFF
   3039            {
   3040              payload[2] = BREAK_UINT32( pCmd->zigBeeLocalStartTime, 0 );
   \   000022   EC           MOV       A,R4
   \   000023   2402         ADD       A,#0x2
   \   000025   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000028   12....       LCALL     ?L_MOV_X
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   12....       LCALL     ?Subroutine58 & 0xFFFF
   3041              payload[3] = BREAK_UINT32( pCmd->zigBeeLocalStartTime, 1 );
   \                     ??CrossCallReturnLabel_130:
   \   000033   12....       LCALL     ?L_MOV_X
   \   000036   E5..         MOV       A,?V1
   \   000038   F5..         MOV       ?V0,A
   \   00003A   7403         MOV       A,#0x3
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ?Subroutine58 & 0xFFFF
   3042              payload[4] = BREAK_UINT32( pCmd->zigBeeLocalStartTime, 2 );
   \                     ??CrossCallReturnLabel_131:
   \   000042   12....       LCALL     ?L_MOV_X
   \   000045   7410         MOV       A,#0x10
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?UL_SHR
   \   00004C   7404         MOV       A,#0x4
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   12....       LCALL     ?Subroutine58 & 0xFFFF
   3043              payload[5] = BREAK_UINT32( pCmd->zigBeeLocalStartTime, 3 );
   \                     ??CrossCallReturnLabel_132:
   \   000054   12....       LCALL     ?L_MOV_X
   \   000057   7418         MOV       A,#0x18
   \   000059   78..         MOV       R0,#?V0
   \   00005B   12....       LCALL     ?UL_SHR
   \   00005E   7405         MOV       A,#0x5
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   E5..         MOV       A,?V0
   \   000065   F0           MOVX      @DPTR,A
   3044              payload[6] = BREAK_UINT32( pCmd->zigBeeLocalEndTime, 0 );
   \   000066   EC           MOV       A,R4
   \   000067   2406         ADD       A,#0x6
   \   000069   12....       LCALL     ?Subroutine83 & 0xFFFF
   3045              payload[7] = BREAK_UINT32( pCmd->zigBeeLocalEndTime, 1 );
   3046              payload[8] = BREAK_UINT32( pCmd->zigBeeLocalEndTime, 2 );
   3047              payload[9] = BREAK_UINT32( pCmd->zigBeeLocalEndTime, 3 );
   3048              payload[10] = pCmd->operatingModeDuringHoliday;
   3049            }
   \                     ??CrossCallReturnLabel_196:
   \   00006C   12....       LCALL     ?L_MOV_X
   \   00006F   7406         MOV       A,#0x6
   \   000071   12....       LCALL     ?XSTACK_DISP0_8
   \   000074   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000077   12....       LCALL     ?L_MOV_X
   \   00007A   E5..         MOV       A,?V1
   \   00007C   F5..         MOV       ?V0,A
   \   00007E   7407         MOV       A,#0x7
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000086   12....       LCALL     ?L_MOV_X
   \   000089   7410         MOV       A,#0x10
   \   00008B   78..         MOV       R0,#?V0
   \   00008D   12....       LCALL     ?UL_SHR
   \   000090   7408         MOV       A,#0x8
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000098   12....       LCALL     ?L_MOV_X
   \   00009B   7418         MOV       A,#0x18
   \   00009D   78..         MOV       R0,#?V0
   \   00009F   12....       LCALL     ?UL_SHR
   \   0000A2   7409         MOV       A,#0x9
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   E5..         MOV       A,?V0
   \   0000A9   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   C0E0         PUSH      A
   \   0000B1   740A         MOV       A,#0xa
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   D0E0         POP       A
   \   0000B8   F0           MOVX      @DPTR,A
   \   0000B9   8002         SJMP      ??zclClosures_SendDoorLockGetHolidayScheduleRes_2
   3050            else
   3051            {
   3052              payloadLen = 2;
   \                     ??zclClosures_SendDoorLockGetHolidayScheduleRes_1:
   \   0000BB   7902         MOV       R1,#0x2
   3053            }
   3054          
   3055            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   3056                                    COMMAND_CLOSURES_GET_HOLIDAY_SCHEDULE_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   3057                                    disableDefaultRsp, 0, seqNum, payloadLen, payload );
   \                     ??zclClosures_SendDoorLockGetHolidayScheduleRes_2:
   \   0000BD                ; Setup parameters for call to function zcl_SendCommand
   \   0000BD   AC..         MOV       R4,?XSP + 0
   \   0000BF   AD..         MOV       R5,?XSP + 1
   \   0000C1   8C..         MOV       ?V0,R4
   \   0000C3   8D..         MOV       ?V1,R5
   \   0000C5   78..         MOV       R0,#?V0
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CA   E9           MOV       A,R1
   \   0000CB   F5..         MOV       ?V0,A
   \   0000CD   75..00       MOV       ?V1,#0x0
   \   0000D0   78..         MOV       R0,#?V0
   \   0000D2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D5   741E         MOV       A,#0x1e
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000DD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E0   E4           CLR       A
   \   0000E1   F5..         MOV       ?V0,A
   \   0000E3   78..         MOV       R0,#?V0
   \   0000E5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E8   7420         MOV       A,#0x20
   \   0000EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000ED   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000F0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F3   75..01       MOV       ?V0,#0x1
   \   0000F6   78..         MOV       R0,#?V0
   \   0000F8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FB   78..         MOV       R0,#?V0
   \   0000FD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000100   75..12       MOV       ?V0,#0x12
   \   000103   78..         MOV       R0,#?V0
   \   000105   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000108   7C01         MOV       R4,#0x1
   \   00010A   7D01         MOV       R5,#0x1
   \   00010C   EE           MOV       A,R6
   \   00010D   F9           MOV       R1,A
   \   00010E   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000111   740B         MOV       A,#0xb
   \   000113   12....       LCALL     ?DEALLOC_XSTACK8
   \   000116   740B         MOV       A,#0xb
   \   000118   02....       LJMP      ?Subroutine6 & 0xFFFF
   3058          }
   3059          
   3060          /*********************************************************************
   3061           * @fn      zclClosures_SendDoorLockGetUserTypeResponse
   3062           *
   3063           * @brief   Call to send out a Get User Type Response
   3064           *
   3065           * @param   srcEP - Sending application's endpoint
   3066           * @param   dstAddr - where you want the message to go
   3067           * @param   userID - User ID is between 0 - [# PINs User supported attribute]
   3068           * @param   userType - Used to indicate what the type is for a specific User ID
   3069           * @param   disableDefaultRsp - decides default response is necessary or not
   3070           * @param   seqNum - sequence number of the command packet
   3071           *
   3072           * @return  ZStatus_t
   3073           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3074          ZStatus_t zclClosures_SendDoorLockGetUserTypeResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockGetUserTypeResponse:
   3075                                                                 uint16 userID, uint8 userType,
   3076                                                                 uint8 disableDefaultRsp, uint8 seqNum )
   3077          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   3078            uint8 payload[PAYLOAD_LEN_GET_USER_TYPE_RSP];
   3079          
   3080            payload[0] = LO_UINT16(userID);
   \   00000C   EC           MOV       A,R4
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
   3081            payload[1] = HI_UINT16(userID);
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   ED           MOV       A,R5
   \   00001A   F0           MOVX      @DPTR,A
   3082            payload[2] = userType;
   \   00001B   740D         MOV       A,#0xd
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   E0           MOVX      A,@DPTR
   \   000021   C0E0         PUSH      A
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   D0E0         POP       A
   \   00002A   12....       LCALL     ??Subroutine173_0 & 0xFFFF
   3083          
   3084            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   3085                                    COMMAND_CLOSURES_GET_USER_TYPE_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   3086                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_GET_USER_TYPE_RSP, payload );
   \                     ??CrossCallReturnLabel_455:
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   75..03       MOV       ?V0,#0x3
   \   000033   75..00       MOV       ?V1,#0x0
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7413         MOV       A,#0x13
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000046   E4           CLR       A
   \   000047   F5..         MOV       ?V0,A
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7415         MOV       A,#0x15
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059   75..01       MOV       ?V0,#0x1
   \   00005C   78..         MOV       R0,#?V0
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000061   78..         MOV       R0,#?V0
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000066   75..15       MOV       ?V0,#0x15
   \   000069                REQUIRE ?Subroutine1
   \   000069                ; // Fall through to label ?Subroutine1
   3087          }
   3088          
   3089          /*********************************************************************
   3090           * @fn      zclClosures_SendDoorLockGetRFIDCodeResponse
   3091           *
   3092           * @brief   Call to send out a Get RFID Code Response
   3093           *
   3094           * @param   srcEP - Sending application's endpoint
   3095           * @param   dstAddr - where you want the message to go
   3096           * @param   pPayload:
   3097           *           userID - User ID is between 0 - [# PINs User supported attribute]
   3098           *           userStatus - Used to indicate what the status is for a specific User ID
   3099           *           userType - Used to indicate what the type is for a specific User ID
   3100           *           aRfidCode - A ZigBee string indicating the RFID code used to create the event
   3101           * @param   disableDefaultRsp - decides default response is necessary or not
   3102           * @param   seqNum - sequence number of the command packet
   3103           *
   3104           * @return  ZStatus_t
   3105           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3106          ZStatus_t zclClosures_SendDoorLockGetRFIDCodeResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockGetRFIDCodeResponse:
   3107                                                                 zclDoorLockGetRFIDCodeRsp_t *pPayload,
   3108                                                                 uint8 disableDefaultRsp, uint8 seqNum )
   3109          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine12 & 0xFFFF
   3110            uint8 i;
   3111            uint8 *pBuf;  // variable length payload
   3112            uint8 offset;
   3113            uint8 calculatedArrayLen;
   3114            uint8 calculatedBufSize;
   3115            ZStatus_t status;
   3116          
   3117            // first octet of PIN/RFID Code variable string identifies its length
   3118            calculatedArrayLen = pPayload->pRfidCode[0] + 1;   // add first byte of string
   3119          
   3120            // determine total size of buffer
   3121            calculatedBufSize = calculatedArrayLen + PAYLOAD_LEN_GET_RFID_CODE_RSP;
   3122          
   3123            pBuf = zcl_mem_alloc( calculatedBufSize );
   \                     ??CrossCallReturnLabel_11:
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000010   8A..         MOV       ?V6,R2
   \   000012   8B..         MOV       ?V7,R3
   3124            if ( !pBuf )
   \   000014   EA           MOV       A,R2
   \   000015   45..         ORL       A,?V7
   \   000017   7004         JNZ       ??zclClosures_SendDoorLockGetRFIDCodeResponse_0
   3125            {
   3126              return ( ZMemError );  // no memory
   \   000019   7910         MOV       R1,#0x10
   \   00001B   8074         SJMP      ??zclClosures_SendDoorLockGetRFIDCodeResponse_1
   3127            }
   3128          
   3129            // over-the-air is always little endian. Break into a byte stream.
   3130            pBuf[0] = LO_UINT16(pPayload->userID);
   \                     ??zclClosures_SendDoorLockGetRFIDCodeResponse_0:
   \   00001D   12....       LCALL     ?Subroutine9 & 0xFFFF
   3131            pBuf[1] = HI_UINT16(pPayload->userID);
   3132            pBuf[2] = pPayload->userStatus;
   3133            pBuf[3] = pPayload->userType;
   3134            offset = 4;
   3135            for ( i = 0; i < calculatedArrayLen; i++ )
   \                     ??CrossCallReturnLabel_3:
   \   000020   800D         SJMP      ??zclClosures_SendDoorLockGetRFIDCodeResponse_2
   3136            {
   3137              pBuf[offset++] = pPayload->pRfidCode[i];
   \                     ??zclClosures_SendDoorLockGetRFIDCodeResponse_3:
   \   000022   12....       LCALL     ?Subroutine10 & 0xFFFF
   3138            }
   \                     ??CrossCallReturnLabel_432:
   \   000025   C0E0         PUSH      A
   \   000027   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   00002A   D0E0         POP       A
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   09           INC       R1
   \   00002E   08           INC       R0
   \                     ??zclClosures_SendDoorLockGetRFIDCodeResponse_2:
   \   00002F   E8           MOV       A,R0
   \   000030   C3           CLR       C
   \   000031   95..         SUBB      A,?V3
   \   000033   40ED         JC        ??zclClosures_SendDoorLockGetRFIDCodeResponse_3
   3139          
   3140            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   3141                                      COMMAND_CLOSURES_GET_RFID_CODE_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   3142                                      disableDefaultRsp, 0, seqNum, calculatedBufSize, pBuf );
   \   000035                ; Setup parameters for call to function zcl_SendCommand
   \   000035   78..         MOV       R0,#?V6
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   78..         MOV       R0,#?V8
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   741A         MOV       A,#0x1a
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004A   E4           CLR       A
   \   00004B   F5..         MOV       ?V0,A
   \   00004D   F5..         MOV       ?V1,A
   \   00004F   78..         MOV       R0,#?V0
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000054   741C         MOV       A,#0x1c
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005F   75..01       MOV       ?V0,#0x1
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000067   78..         MOV       R0,#?V0
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006C   75..17       MOV       ?V0,#0x17
   \   00006F   78..         MOV       R0,#?V0
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000074   7C01         MOV       R4,#0x1
   \   000076   7D01         MOV       R5,#0x1
   \   000078   EE           MOV       A,R6
   \   000079   FA           MOV       R2,A
   \   00007A   EF           MOV       A,R7
   \   00007B   FB           MOV       R3,A
   \   00007C   A9..         MOV       R1,?V2
   \   00007E   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000081   740B         MOV       A,#0xb
   \   000083   12....       LCALL     ?DEALLOC_XSTACK8
   \   000086   E9           MOV       A,R1
   \   000087   FE           MOV       R6,A
   3143            zcl_mem_free( pBuf );
   \   000088                ; Setup parameters for call to function osal_mem_free
   \   000088   AA..         MOV       R2,?V6
   \   00008A   AB..         MOV       R3,?V7
   \   00008C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3144            return status;
   \   00008F   EE           MOV       A,R6
   \   000090   F9           MOV       R1,A
   \                     ??zclClosures_SendDoorLockGetRFIDCodeResponse_1:
   \   000091                REQUIRE ?Subroutine4
   \   000091                ; // Fall through to label ?Subroutine4
   3145          }
   3146          
   3147          /*********************************************************************
   3148           * @fn      zclClosures_SendDoorLockOperationEventNotification
   3149           *
   3150           * @brief   Call to send out a Operation Event Notification
   3151           *
   3152           * @param   srcEP - Sending application's endpoint
   3153           * @param   dstAddr - where you want the message to go
   3154           * @param   pPayload:
   3155           *           operationEventSource - Indicates where the event was triggered from
   3156           *           operationEventCode - (Optional) a notification whenever there is a significant operation event on the lock
   3157           *           userID - User ID is between 0 - [# PINs User supported attribute]
   3158           *           pin - The PIN that is associated with the User ID who performed the event
   3159           *           zigBeeLocalTime - Indicates when the event is triggered
   3160           *           aData - Used to pass data associated with a particular event
   3161           * @param   disableDefaultRsp - decides default response is necessary or not
   3162           * @param   seqNum - sequence number of the command packet
   3163           *
   3164           * @return  ZStatus_t
   3165           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3166          ZStatus_t zclClosures_SendDoorLockOperationEventNotification( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockOperationEventNotification:
   3167                                                                        zclDoorLockOperationEventNotification_t *pPayload,
   3168                                                                        uint8 disableDefaultRsp, uint8 seqNum )
   3169          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V7,R1
   \   000007   8A..         MOV       ?V12,R2
   \   000009   8B..         MOV       ?V13,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   3170            uint8 i;
   3171            uint8 *pBuf;  // variable length payload
   3172            uint8 offset;
   3173            uint8 calculatedArrayLen;
   3174            uint16 calculatedBufSize;
   3175            ZStatus_t status;
   3176          
   3177            // set variable length if data is available
   3178            calculatedArrayLen = pPayload->pData[0] + 1; // add first byte of string
   \   00000F   EE           MOV       A,R6
   \   000010   2409         ADD       A,#0x9
   \   000012   12....       LCALL     ?Subroutine46 & 0xFFFF
   3179          
   3180            // determine total size of buffer
   3181            calculatedBufSize = calculatedArrayLen + PAYLOAD_LEN_OPERATION_EVENT_NOTIFICATION;
   \                     ??CrossCallReturnLabel_112:
   \   000015   2409         ADD       A,#0x9
   \   000017   F5..         MOV       ?V2,A
   \   000019   E4           CLR       A
   \   00001A   3400         ADDC      A,#0x0
   \   00001C   F5..         MOV       ?V3,A
   3182          
   3183            pBuf = zcl_mem_alloc( calculatedBufSize );
   \   00001E                ; Setup parameters for call to function osal_mem_alloc
   \   00001E   AA..         MOV       R2,?V2
   \   000020   FB           MOV       R3,A
   \   000021   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000024   8A..         MOV       ?V0,R2
   \   000026   8B..         MOV       ?V1,R3
   3184            if ( !pBuf )
   \   000028   EA           MOV       A,R2
   \   000029   45..         ORL       A,?V1
   \   00002B   7005         JNZ       ??zclClosures_SendDoorLockOperationEventNotific_1
   3185            {
   3186              return ( ZMemError );  // no memory
   \   00002D   7910         MOV       R1,#0x10
   \   00002F   02....       LJMP      ??zclClosures_SendDoorLockOperationEventNotific_2 & 0xFFFF
   3187            }
   3188          
   3189            // over-the-air is always little endian. Break into a byte stream.
   3190            pBuf[0] = pPayload->operationEventSource;
   \                     ??zclClosures_SendDoorLockOperationEventNotific_1:
   \   000032   12....       LCALL     ?Subroutine16 & 0xFFFF
   3191            pBuf[1] = pPayload->operationEventCode;
   3192            pBuf[2] = LO_UINT16( pPayload->userID );
   3193            pBuf[3] = HI_UINT16( pPayload->userID );
   3194            pBuf[4] = pPayload->pin;
   3195            pBuf[5] = BREAK_UINT32(pPayload->zigBeeLocalTime, 0);
   \                     ??CrossCallReturnLabel_12:
   \   000035   EE           MOV       A,R6
   \   000036   2405         ADD       A,#0x5
   \   000038   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   00003B   12....       LCALL     ?L_MOV_X
   \   00003E   85..82       MOV       DPL,?V0
   \   000041   85..83       MOV       DPH,?V1
   \   000044   12....       LCALL     ??Subroutine177_0 & 0xFFFF
   3196            pBuf[6] = BREAK_UINT32(pPayload->zigBeeLocalTime, 1);
   \                     ??CrossCallReturnLabel_459:
   \   000047   12....       LCALL     ?L_MOV_X
   \   00004A   E5..         MOV       A,?V9
   \   00004C   85..82       MOV       DPL,?V0
   \   00004F   85..83       MOV       DPH,?V1
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   12....       LCALL     ??Subroutine178_0 & 0xFFFF
   3197            pBuf[7] = BREAK_UINT32(pPayload->zigBeeLocalTime, 2);
   \                     ??CrossCallReturnLabel_460:
   \   00005B   12....       LCALL     ?L_MOV_X
   \   00005E   7410         MOV       A,#0x10
   \   000060   78..         MOV       R0,#?V8
   \   000062   12....       LCALL     ?UL_SHR
   \   000065   12....       LCALL     ?Subroutine62 & 0xFFFF
   3198            pBuf[8] = BREAK_UINT32(pPayload->zigBeeLocalTime, 3);
   \                     ??CrossCallReturnLabel_456:
   \   000068   12....       LCALL     ?L_MOV_X
   \   00006B   7418         MOV       A,#0x18
   \   00006D   78..         MOV       R0,#?V8
   \   00006F   12....       LCALL     ?UL_SHR
   \   000072   85..82       MOV       DPL,?V0
   \   000075   85..83       MOV       DPH,?V1
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   E5..         MOV       A,?V8
   \   000082   F0           MOVX      @DPTR,A
   3199            offset = 9;
   \   000083   7909         MOV       R1,#0x9
   3200            for ( i = 0; i < calculatedArrayLen; i++ )
   \   000085   7800         MOV       R0,#0x0
   \   000087   800D         SJMP      ??zclClosures_SendDoorLockOperationEventNotific_3
   3201            {
   3202              pBuf[offset++] = pPayload->pData[i];
   \                     ??zclClosures_SendDoorLockOperationEventNotific_4:
   \   000089   12....       LCALL     ?Subroutine10 & 0xFFFF
   3203            }
   \                     ??CrossCallReturnLabel_433:
   \   00008C   C0E0         PUSH      A
   \   00008E   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000091   D0E0         POP       A
   \   000093   F0           MOVX      @DPTR,A
   \   000094   09           INC       R1
   \   000095   08           INC       R0
   \                     ??zclClosures_SendDoorLockOperationEventNotific_3:
   \   000096   E8           MOV       A,R0
   \   000097   C3           CLR       C
   \   000098   95..         SUBB      A,?V6
   \   00009A   40ED         JC        ??zclClosures_SendDoorLockOperationEventNotific_4
   3204          
   3205            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   3206                                      COMMAND_CLOSURES_OPERATION_EVENT_NOTIFICATION, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   3207                                      disableDefaultRsp, 0, seqNum, calculatedBufSize, pBuf );
   \   00009C                ; Setup parameters for call to function zcl_SendCommand
   \   00009C   78..         MOV       R0,#?V0
   \   00009E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A1   78..         MOV       R0,#?V2
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A6   741B         MOV       A,#0x1b
   \   0000A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AB   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B1   E4           CLR       A
   \   0000B2   F5..         MOV       ?V2,A
   \   0000B4   F5..         MOV       ?V3,A
   \   0000B6   78..         MOV       R0,#?V2
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BB   741D         MOV       A,#0x1d
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C6   75..01       MOV       ?V2,#0x1
   \   0000C9   78..         MOV       R0,#?V2
   \   0000CB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CE   78..         MOV       R0,#?V2
   \   0000D0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D3   75..20       MOV       ?V2,#0x20
   \   0000D6   78..         MOV       R0,#?V2
   \   0000D8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DB   7C01         MOV       R4,#0x1
   \   0000DD   7D01         MOV       R5,#0x1
   \   0000DF   AA..         MOV       R2,?V12
   \   0000E1   AB..         MOV       R3,?V13
   \   0000E3   A9..         MOV       R1,?V7
   \   0000E5   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000E8   740B         MOV       A,#0xb
   \   0000EA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000ED   E9           MOV       A,R1
   \   0000EE   FE           MOV       R6,A
   3208            zcl_mem_free( pBuf );
   \   0000EF                ; Setup parameters for call to function osal_mem_free
   \   0000EF   AA..         MOV       R2,?V0
   \   0000F1   AB..         MOV       R3,?V1
   \   0000F3   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3209            return status;
   \   0000F6   EE           MOV       A,R6
   \   0000F7   F9           MOV       R1,A
   \                     ??zclClosures_SendDoorLockOperationEventNotific_2:
   \   0000F8   02....       LJMP      ??Subroutine170_0 & 0xFFFF
   3210          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   3F           ADDC      A,R7
   \   000003   FB           MOV       R3,A
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   78..         MOV       R0,#?V8
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine176_0
   \   000006                ; // Fall through to label ??Subroutine176_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine176_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine177_0
   \   000002                ; // Fall through to label ??Subroutine177_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine177_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E5..         MOV       A,?V8
   \   000007                REQUIRE ??Subroutine178_0
   \   000007                ; // Fall through to label ??Subroutine178_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine178_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   78..         MOV       R0,#?V8
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   F5..         MOV       ?V4,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F5..         MOV       ?V5,A
   \   000006   85..82       MOV       DPL,?V4
   \   000009   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   00000C   F5..         MOV       ?V6,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   000007   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   00000A   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   00000D   A3           INC       DPTR
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   EE           MOV       A,R6
   \   000010   2402         ADD       A,#0x2
   \   000012   F8           MOV       R0,A
   \   000013   E4           CLR       A
   \   000014   3F           ADDC      A,R7
   \   000015   F9           MOV       R1,A
   \   000016   8882         MOV       DPL,R0
   \   000018   8983         MOV       DPH,R1
   \   00001A   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   00001D   8882         MOV       DPL,R0
   \   00001F   8983         MOV       DPH,R1
   \   000021   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   00002B   F0           MOVX      @DPTR,A
   \   00002C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000006   A3           INC       DPTR
   \   000007   22           RET
   3211          
   3212          /*********************************************************************
   3213           * @fn      zclClosures_SendDoorLockProgrammingEventNotification
   3214           *
   3215           * @brief   Call to send out a Programming Event Notification
   3216           *
   3217           * @param   srcEP - Sending application's endpoint
   3218           * @param   dstAddr - where you want the message to go
   3219           * @param   pPayload:
   3220           *           programEventSource - Indicates where the event was triggered from
   3221           *           programEventCode - (Optional) a notification whenever there is a significant programming event on the lock
   3222           *           userID - User ID is between 0 - [# PINs User supported attribute]
   3223           *           pin - The PIN that is associated with the User ID who performed the event
   3224           *           userType - Used to indicate what the type is for a specific User ID
   3225           *           userStatus - Used to indicate what the status is for a specific User ID
   3226           *           zigBeeLocalTime - Indicates when the event is triggered
   3227           *           dataLen - Manufacture specific, describes length of aData
   3228           *           aData - Used to pass data associated with a particular event
   3229           * @param   disableDefaultRsp - decides default response is necessary or not
   3230           * @param   seqNum - sequence number of the command packet
   3231           *
   3232           * @return  ZStatus_t
   3233           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3234          ZStatus_t zclClosures_SendDoorLockProgrammingEventNotification( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockProgrammingEventNotification:
   3235                                                                          zclDoorLockProgrammingEventNotification_t *pPayload,
   3236                                                                          uint8 disableDefaultRsp, uint8 seqNum )
   3237          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V7,R1
   \   000007   8A..         MOV       ?V12,R2
   \   000009   8B..         MOV       ?V13,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   3238            uint8 i;
   3239            uint8 *pBuf;  // variable length payload
   3240            uint8 offset;
   3241            uint8 calculatedArrayLen;
   3242            uint16 calculatedBufSize;
   3243            ZStatus_t status;
   3244          
   3245            // set variable length if data is available
   3246            calculatedArrayLen = pPayload->pData[0] + 1;  // add first byte of string
   \   00000F   EE           MOV       A,R6
   \   000010   240B         ADD       A,#0xb
   \   000012   12....       LCALL     ?Subroutine46 & 0xFFFF
   3247          
   3248            // determine total size of buffer
   3249            calculatedBufSize = calculatedArrayLen + PAYLOAD_LEN_PROGRAMMING_EVENT_NOTIFICATION;
   \                     ??CrossCallReturnLabel_113:
   \   000015   240B         ADD       A,#0xb
   \   000017   F5..         MOV       ?V2,A
   \   000019   E4           CLR       A
   \   00001A   3400         ADDC      A,#0x0
   \   00001C   F5..         MOV       ?V3,A
   3250          
   3251            pBuf = zcl_mem_alloc( calculatedBufSize );
   \   00001E                ; Setup parameters for call to function osal_mem_alloc
   \   00001E   AA..         MOV       R2,?V2
   \   000020   FB           MOV       R3,A
   \   000021   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000024   8A..         MOV       ?V0,R2
   \   000026   8B..         MOV       ?V1,R3
   3252            if ( !pBuf )
   \   000028   EA           MOV       A,R2
   \   000029   45..         ORL       A,?V1
   \   00002B   7005         JNZ       ??zclClosures_SendDoorLockProgrammingEventNotif_1
   3253            {
   3254              return ( ZMemError );  // no memory
   \   00002D   7910         MOV       R1,#0x10
   \   00002F   02....       LJMP      ??zclClosures_SendDoorLockProgrammingEventNotif_2 & 0xFFFF
   3255            }
   3256          
   3257            // over-the-air is always little endian. Break into a byte stream.
   3258            pBuf[0] = pPayload->programEventSource;
   \                     ??zclClosures_SendDoorLockProgrammingEventNotif_1:
   \   000032   12....       LCALL     ?Subroutine16 & 0xFFFF
   3259            pBuf[1] = pPayload->programEventCode;
   3260            pBuf[2] = LO_UINT16( pPayload->userID );
   3261            pBuf[3] = HI_UINT16( pPayload->userID );
   3262            pBuf[4] = pPayload->pin;
   3263            pBuf[5] = pPayload->userType;
   \                     ??CrossCallReturnLabel_13:
   \   000035   8E82         MOV       DPL,R6
   \   000037   8F83         MOV       DPH,R7
   \   000039   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00003C   12....       LCALL     ?Subroutine74 & 0xFFFF
   3264            pBuf[6] = pPayload->userStatus;
   \                     ??CrossCallReturnLabel_174:
   \   00003F   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000042   A3           INC       DPTR
   \   000043   F0           MOVX      @DPTR,A
   3265            pBuf[7] = BREAK_UINT32(pPayload->zigBeeLocalTime, 0);
   \   000044   EE           MOV       A,R6
   \   000045   2407         ADD       A,#0x7
   \   000047   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   00004A   12....       LCALL     ?L_MOV_X
   \   00004D   12....       LCALL     ?Subroutine62 & 0xFFFF
   3266            pBuf[8] = BREAK_UINT32(pPayload->zigBeeLocalTime, 1);
   \                     ??CrossCallReturnLabel_457:
   \   000050   12....       LCALL     ?L_MOV_X
   \   000053   E5..         MOV       A,?V9
   \   000055   85..82       MOV       DPL,?V0
   \   000058   85..83       MOV       DPH,?V1
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   12....       LCALL     ??Subroutine178_0 & 0xFFFF
   3267            pBuf[9] = BREAK_UINT32(pPayload->zigBeeLocalTime, 2);
   \                     ??CrossCallReturnLabel_461:
   \   000066   12....       LCALL     ?L_MOV_X
   \   000069   7410         MOV       A,#0x10
   \   00006B   78..         MOV       R0,#?V8
   \   00006D   12....       LCALL     ?UL_SHR
   \   000070   85..82       MOV       DPL,?V0
   \   000073   85..83       MOV       DPH,?V1
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   12....       LCALL     ??Subroutine176_0 & 0xFFFF
   3268            pBuf[10] = BREAK_UINT32(pPayload->zigBeeLocalTime, 3);
   \                     ??CrossCallReturnLabel_458:
   \   00007B   12....       LCALL     ?L_MOV_X
   \   00007E   7418         MOV       A,#0x18
   \   000080   78..         MOV       R0,#?V8
   \   000082   12....       LCALL     ?UL_SHR
   \   000085   85..82       MOV       DPL,?V0
   \   000088   85..83       MOV       DPH,?V1
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   E5..         MOV       A,?V8
   \   000097   F0           MOVX      @DPTR,A
   3269            offset = 11;
   \   000098   790B         MOV       R1,#0xb
   3270            for ( i = 0; i < calculatedArrayLen; i++ )
   \   00009A   7800         MOV       R0,#0x0
   \   00009C   800D         SJMP      ??zclClosures_SendDoorLockProgrammingEventNotif_3
   3271            {
   3272              pBuf[offset++] = pPayload->pData[i];
   \                     ??zclClosures_SendDoorLockProgrammingEventNotif_4:
   \   00009E   12....       LCALL     ?Subroutine10 & 0xFFFF
   3273            }
   \                     ??CrossCallReturnLabel_434:
   \   0000A1   C0E0         PUSH      A
   \   0000A3   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   0000A6   D0E0         POP       A
   \   0000A8   F0           MOVX      @DPTR,A
   \   0000A9   09           INC       R1
   \   0000AA   08           INC       R0
   \                     ??zclClosures_SendDoorLockProgrammingEventNotif_3:
   \   0000AB   E8           MOV       A,R0
   \   0000AC   C3           CLR       C
   \   0000AD   95..         SUBB      A,?V6
   \   0000AF   40ED         JC        ??zclClosures_SendDoorLockProgrammingEventNotif_4
   3274          
   3275            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   3276                                      COMMAND_CLOSURES_PROGRAMMING_EVENT_NOTIFICATION, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   3277                                      disableDefaultRsp, 0, seqNum, calculatedBufSize, pBuf );
   \   0000B1                ; Setup parameters for call to function zcl_SendCommand
   \   0000B1   78..         MOV       R0,#?V0
   \   0000B3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B6   78..         MOV       R0,#?V2
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BB   741B         MOV       A,#0x1b
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C6   E4           CLR       A
   \   0000C7   F5..         MOV       ?V2,A
   \   0000C9   F5..         MOV       ?V3,A
   \   0000CB   78..         MOV       R0,#?V2
   \   0000CD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D0   741D         MOV       A,#0x1d
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   0000D8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DB   75..01       MOV       ?V2,#0x1
   \   0000DE   78..         MOV       R0,#?V2
   \   0000E0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E3   78..         MOV       R0,#?V2
   \   0000E5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E8   75..21       MOV       ?V2,#0x21
   \   0000EB   78..         MOV       R0,#?V2
   \   0000ED   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F0   7C01         MOV       R4,#0x1
   \   0000F2   7D01         MOV       R5,#0x1
   \   0000F4   AA..         MOV       R2,?V12
   \   0000F6   AB..         MOV       R3,?V13
   \   0000F8   A9..         MOV       R1,?V7
   \   0000FA   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000FD   740B         MOV       A,#0xb
   \   0000FF   12....       LCALL     ?DEALLOC_XSTACK8
   \   000102   E9           MOV       A,R1
   \   000103   FE           MOV       R6,A
   3278            zcl_mem_free( pBuf );
   \   000104                ; Setup parameters for call to function osal_mem_free
   \   000104   AA..         MOV       R2,?V0
   \   000106   AB..         MOV       R3,?V1
   \   000108   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3279            return status;
   \   00010B   EE           MOV       A,R6
   \   00010C   F9           MOV       R1,A
   \                     ??zclClosures_SendDoorLockProgrammingEventNotif_2:
   \   00010D   02....       LJMP      ??Subroutine170_0 & 0xFFFF
   3280          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_RegisterDoorLockCmdCallbacks::?re`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_RegisterDoorLockCmdCallbacks

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_HdlIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_HdlIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_ProcessInDoorLockCmds::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_ProcessInDoorLockCmds

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_ProcessInDoorLock::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_ProcessInDoorLock

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_ProcessInDoorLockUnlockWithTimeou:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_ProcessInDoorLockUnlockWithTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_ProcessInDoorLockSetPINCode::?rel`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_ProcessInDoorLockSetPINCode

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_ProcessInDoorLockSetWeekDaySchedu:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_ProcessInDoorLockSetWeekDaySchedule

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_ProcessInDoorLockSetYearDaySchedu:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_ProcessInDoorLockSetYearDaySchedule

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_ProcessInDoorLockSetHolidaySchedu:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_ProcessInDoorLockSetHolidaySchedule

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_ProcessInDoorLockSetRFIDCode::?re`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_ProcessInDoorLockSetRFIDCode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_ProcessInDoorLockGetLogRecordRsp:`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_ProcessInDoorLockGetLogRecordRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_ProcessInDoorLockGetPINCodeRsp::?`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_ProcessInDoorLockGetPINCodeRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_ProcessInDoorLockGetWeekDaySchedu:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_ProcessInDoorLockGetYearDaySchedu:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_ProcessInDoorLockGetYearDayScheduleRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_ProcessInDoorLockGetHolidaySchedu:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_ProcessInDoorLockGetHolidayScheduleRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_ProcessInDoorLockGetRFIDCodeRsp::`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_ProcessInDoorLockGetRFIDCodeRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_ProcessInDoorLockOperationEventNo:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_ProcessInDoorLockOperationEventNotification

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_ProcessInDoorLockProgrammingEvent:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_ProcessInDoorLockProgrammingEventNotification

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_SendDoorLockRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_SendDoorLockUnlockTimeoutRequest:`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockUnlockTimeoutRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_SendDoorLockGetLogRecordRequest::`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockGetLogRecordRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_SendDoorLockSetPINCodeRequest::?r`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockSetPINCodeRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_SendDoorLockUserIDRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockUserIDRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_SendDoorLockClearAllCodesRequest:`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockClearAllCodesRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_SendDoorLockSetUserStatusRequest:`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockSetUserStatusRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_SendDoorLockSetWeekDayScheduleReq:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockSetWeekDayScheduleRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_SendDoorLockScheduleRequest::?rel`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockScheduleRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_SendDoorLockSetYearDayScheduleReq:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockSetYearDayScheduleRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_SendDoorLockSetHolidayScheduleReq:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockSetHolidayScheduleRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_SendDoorLockHolidayScheduleReques:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockHolidayScheduleRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_SendDoorLockSetUserTypeRequest::?`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockSetUserTypeRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_SendDoorLockSetRFIDCodeRequest::?`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockSetRFIDCodeRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_SendDoorLockStatusResponse::?rela`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockStatusResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_SendDoorLockGetLogRecordResponse:`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockGetLogRecordResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_SendDoorLockGetPINCodeResponse::?`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockGetPINCodeResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_SendDoorLockGetUserStatusResponse:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockGetUserStatusResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_SendDoorLockGetWeekDayScheduleRes:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockGetWeekDayScheduleResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_SendDoorLockGetYearDayScheduleRes:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockGetYearDayScheduleResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_SendDoorLockGetHolidayScheduleRes:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockGetHolidayScheduleResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_SendDoorLockGetUserTypeResponse::`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockGetUserTypeResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclClosures_SendDoorLockGetRFIDCodeResponse::`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockGetRFIDCodeResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_SendDoorLockOperationEventNotific:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockOperationEventNotification

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclClosures_SendDoorLockProgrammingEventNotif:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclClosures_SendDoorLockProgrammingEventNotification
   3281          
   3282          #endif //ZCL_DOORLOCK
   3283          
   3284          #ifdef ZCL_WINDOWCOVERING
   3285          /*********************************************************************
   3286           * @fn      zclClosures_ProcessInWindowCovering
   3287           *
   3288           * @brief   Process in the received Window Covering cluster Command.
   3289           *
   3290           * @param   pInMsg - pointer to the incoming message
   3291           *
   3292           * @return  ZStatus_t
   3293           */
   3294          static ZStatus_t zclClosures_ProcessInWindowCovering( zclIncoming_t *pInMsg,
   3295                                                                zclClosures_WindowCoveringAppCallbacks_t *pCBs )
   3296          {
   3297            ZStatus_t status = ZCL_STATUS_SUCCESS;
   3298            uint8 *pData = pInMsg->pData;
   3299          
   3300            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   3301            {
   3302              switch ( pInMsg->hdr.commandID )
   3303              {
   3304              case COMMAND_CLOSURES_UP_OPEN:
   3305                if ( pCBs->pfnWindowCoveringUpOpen )
   3306                {
   3307                  pCBs->pfnWindowCoveringUpOpen();
   3308                }
   3309                break;
   3310          
   3311              case COMMAND_CLOSURES_DOWN_CLOSE:
   3312                if ( pCBs->pfnWindowCoveringDownClose )
   3313                {
   3314                  pCBs->pfnWindowCoveringDownClose();
   3315                }
   3316                break;
   3317          
   3318              case COMMAND_CLOSURES_STOP:
   3319                if ( pCBs->pfnWindowCoveringStop )
   3320                {
   3321                  pCBs->pfnWindowCoveringStop();
   3322                }
   3323                break;
   3324          
   3325              case COMMAND_CLOSURES_GO_TO_LIFT_VALUE:
   3326                if ( pCBs->pfnWindowCoveringGotoLiftValue )
   3327                {
   3328                  if ( pCBs->pfnWindowCoveringGotoLiftValue( BUILD_UINT16( pData[0], pData[1] ) ) == FALSE )
   3329                  {
   3330                    status = ZCL_STATUS_INVALID_VALUE;
   3331                  }
   3332                }
   3333                break;
   3334          
   3335              case COMMAND_CLOSURES_GO_TO_LIFT_PERCENTAGE:
   3336                if ( pCBs->pfnWindowCoveringGotoLiftPercentage )
   3337                {
   3338                  if ( pCBs->pfnWindowCoveringGotoLiftPercentage( pData[0] ) == FALSE )
   3339                  {
   3340                    status = ZCL_STATUS_INVALID_VALUE;
   3341                  }
   3342                }
   3343                break;
   3344          
   3345              case COMMAND_CLOSURES_GO_TO_TILT_VALUE:
   3346                if ( pCBs->pfnWindowCoveringGotoTiltValue )
   3347                {
   3348                  if ( pCBs->pfnWindowCoveringGotoTiltValue( BUILD_UINT16( pData[0], pData[1] ) ) == FALSE )
   3349                  {
   3350                    status = ZCL_STATUS_INVALID_VALUE;
   3351                  }
   3352                }
   3353                break;
   3354          
   3355              case COMMAND_CLOSURES_GO_TO_TILT_PERCENTAGE:
   3356                if ( pCBs->pfnWindowCoveringGotoTiltPercentage )
   3357                {
   3358                  if ( pCBs->pfnWindowCoveringGotoTiltPercentage( pData[0] ) == FALSE )
   3359                  {
   3360                    status = ZCL_STATUS_INVALID_VALUE;
   3361                  }
   3362                }
   3363                break;
   3364          
   3365              default:
   3366                return( ZFailure );
   3367              }
   3368            }
   3369            // no Client command
   3370          
   3371            return ( status );
   3372          }
   3373          
   3374          /*********************************************************************
   3375           * @fn      zclClosures_WindowCoveringSimpleReq
   3376           *
   3377           * @brief   Call to send out a Window Covering command with no payload
   3378           *          as Up/Open, Down/Close or Stop
   3379           *
   3380           * @param   srcEP - Sending application's endpoint
   3381           * @param   dstAddr - where you want the message to go
   3382           * @param   cmd - Command ID
   3383           * @param   disableDefaultRsp - decides default response is necessary or not
   3384           * @param   seqNum - sequence number of the command packet
   3385           *
   3386           * @return  ZStatus_t
   3387           */
   3388          ZStatus_t zclClosures_WindowCoveringSimpleReq( uint8 srcEP, afAddrType_t *dstAddr,
   3389                                                         uint8 cmd, uint8 disableDefaultRsp, uint8 seqNum )
   3390          {
   3391            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING,
   3392                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   3393                                    disableDefaultRsp, 0, seqNum, 0, NULL );
   3394          }
   3395          
   3396          /*********************************************************************
   3397           * @fn      zclClosures_WindowCoveringSendGoToValueReq
   3398           *
   3399           * @brief   Call to send out a Go to Value Request Command
   3400           *
   3401           * @param   srcEP - Sending application's endpoint
   3402           * @param   dstAddr - where you want the message to go
   3403           * @param   cmd - Command ID for COMMAND_CLOSURES_GO_TO_LIFT_VALUE
   3404           * @param   liftValue - payload
   3405           * @param   disableDefaultRsp - decides default response is necessary or not
   3406           * @param   seqNum - sequence number of the command packet
   3407           *
   3408           * @return  ZStatus_t
   3409           */
   3410          ZStatus_t zclClosures_WindowCoveringSendGoToValueReq( uint8 srcEP, afAddrType_t *dstAddr,
   3411                                                                uint8 cmd, uint16 Value,
   3412                                                                uint8 disableDefaultRsp, uint8 seqNum )
   3413          {
   3414            uint8 buf[ZCL_WC_GOTOVALUEREQ_PAYLOADLEN];
   3415          
   3416            buf[0] = LO_UINT16( Value );
   3417            buf[1] = HI_UINT16( Value );
   3418          
   3419            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING,
   3420                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   3421                                    disableDefaultRsp, 0, seqNum,
   3422                                    ZCL_WC_GOTOVALUEREQ_PAYLOADLEN, buf );
   3423          }
   3424          
   3425          /*********************************************************************
   3426           * @fn      zclClosures_WindowCoveringSendGoToPercentageReq
   3427           *
   3428           * @brief   Call to send out a Go to Percentage Request Command
   3429           *
   3430           * @param   srcEP - Sending application's endpoint
   3431           * @param   dstAddr - where you want the message to go
   3432           * @param   cmd - Command ID e.g. COMMAND_CLOSURES_GO_TO_LIFT_PERCENTAGE
   3433           * @param   percentageLiftValue - payload
   3434           * @param   disableDefaultRsp - decides default response is necessary or not
   3435           * @param   seqNum - sequence number of the command packet
   3436           *
   3437           * @return  ZStatus_t
   3438           */
   3439          ZStatus_t zclClosures_WindowCoveringSendGoToPercentageReq( uint8 srcEP, afAddrType_t *dstAddr,
   3440                                                                     uint8 cmd, uint8 percentageValue,
   3441                                                                     uint8 disableDefaultRsp, uint8 seqNum )
   3442          {
   3443            uint8 buf[ZCL_WC_GOTOPERCENTAGEREQ_PAYLOADLEN];
   3444          
   3445            buf[0] = percentageValue;
   3446          
   3447            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING,
   3448                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   3449                                    disableDefaultRsp, 0, seqNum,
   3450                                    ZCL_WC_GOTOPERCENTAGEREQ_PAYLOADLEN, buf );
   3451          }
   3452          #endif //ZCL_WINDOWCOVERING
   3453          
   3454          /********************************************************************************************
   3455          *********************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     12   zclClosures_HdlIncoming
        0     12   -> zclClosures_ProcessInDoorLockCmds
      1     31   zclClosures_ProcessInDoorLock
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free
      1     28   zclClosures_ProcessInDoorLockCmds
        0     16   -> zclClosures_ProcessInDoorLock
        0     16   -> zclClosures_ProcessInDoorLockGetHolidayScheduleRsp
        0     16   -> zclClosures_ProcessInDoorLockGetLogRecordRsp
        0     16   -> zclClosures_ProcessInDoorLockGetPINCodeRsp
        0     16   -> zclClosures_ProcessInDoorLockGetRFIDCodeRsp
        0     16   -> zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp
        0     16   -> zclClosures_ProcessInDoorLockGetYearDayScheduleRsp
        0     16   -> zclClosures_ProcessInDoorLockOperationEventNotification
        0     16   -> zclClosures_ProcessInDoorLockProgrammingEventNotification
        0     16   -> zclClosures_ProcessInDoorLockSetHolidaySchedule
        0     16   -> zclClosures_ProcessInDoorLockSetPINCode
        0     16   -> zclClosures_ProcessInDoorLockSetRFIDCode
        0     16   -> zclClosures_ProcessInDoorLockSetWeekDaySchedule
        0     16   -> zclClosures_ProcessInDoorLockSetYearDaySchedule
        0     16   -> zclClosures_ProcessInDoorLockUnlockWithTimeout
      1     43   zclClosures_ProcessInDoorLockGetHolidayScheduleRsp
      1     51   zclClosures_ProcessInDoorLockGetLogRecordRsp
        0     35   -> osal_mem_alloc
        0     35   -> osal_mem_free
      1     38   zclClosures_ProcessInDoorLockGetPINCodeRsp
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
      1     38   zclClosures_ProcessInDoorLockGetRFIDCodeRsp
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
      1     37   zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp
      1     44   zclClosures_ProcessInDoorLockGetYearDayScheduleRsp
      1     49   zclClosures_ProcessInDoorLockOperationEventNotification
        0     33   -> osal_mem_alloc
        0     33   -> osal_mem_free
      1     51   zclClosures_ProcessInDoorLockProgrammingEventNotification
        0     35   -> osal_mem_alloc
        0     35   -> osal_mem_free
      1     42   zclClosures_ProcessInDoorLockSetHolidaySchedule
      1     38   zclClosures_ProcessInDoorLockSetPINCode
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
      1     38   zclClosures_ProcessInDoorLockSetRFIDCode
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
      1     36   zclClosures_ProcessInDoorLockSetWeekDaySchedule
      1     43   zclClosures_ProcessInDoorLockSetYearDaySchedule
      1     36   zclClosures_ProcessInDoorLockUnlockWithTimeout
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
      1     14   zclClosures_RegisterDoorLockCmdCallbacks
        0     12   -> osal_mem_alloc
        0     14   -> zcl_registerPlugin
      0     24   zclClosures_SendDoorLockClearAllCodesRequest
        0     23   -> zcl_SendCommand
      1     38   zclClosures_SendDoorLockGetHolidayScheduleResponse
        0     36   -> zcl_SendCommand
      1     25   zclClosures_SendDoorLockGetLogRecordRequest
        0     23   -> zcl_SendCommand
      1     36   zclClosures_SendDoorLockGetLogRecordResponse
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     34   -> zcl_SendCommand
      1     34   zclClosures_SendDoorLockGetPINCodeResponse
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     32   -> zcl_SendCommand
      1     34   zclClosures_SendDoorLockGetRFIDCodeResponse
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     32   -> zcl_SendCommand
      1     27   zclClosures_SendDoorLockGetUserStatusResponse
        0     24   -> zcl_SendCommand
      1     27   zclClosures_SendDoorLockGetUserTypeResponse
        0     24   -> zcl_SendCommand
      1     32   zclClosures_SendDoorLockGetWeekDayScheduleResponse
        0     30   -> zcl_SendCommand
      1     39   zclClosures_SendDoorLockGetYearDayScheduleResponse
        0     37   -> zcl_SendCommand
      1     26   zclClosures_SendDoorLockHolidayScheduleRequest
        0     24   -> zcl_SendCommand
      1     35   zclClosures_SendDoorLockOperationEventNotification
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     33   -> zcl_SendCommand
      1     35   zclClosures_SendDoorLockProgrammingEventNotification
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     33   -> zcl_SendCommand
      1     34   zclClosures_SendDoorLockRequest
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     30   zclClosures_SendDoorLockScheduleRequest
        0     26   -> zcl_SendCommand
      1     48   zclClosures_SendDoorLockSetHolidayScheduleRequest
        0     38   -> zcl_SendCommand
      1     34   zclClosures_SendDoorLockSetPINCodeRequest
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     32   -> zcl_SendCommand
      1     34   zclClosures_SendDoorLockSetRFIDCodeRequest
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     32   -> zcl_SendCommand
      1     27   zclClosures_SendDoorLockSetUserStatusRequest
        0     24   -> zcl_SendCommand
      1     27   zclClosures_SendDoorLockSetUserTypeRequest
        0     24   -> zcl_SendCommand
      1     39   zclClosures_SendDoorLockSetWeekDayScheduleRequest
        0     31   -> zcl_SendCommand
      1     50   zclClosures_SendDoorLockSetYearDayScheduleRequest
        0     39   -> zcl_SendCommand
      1     26   zclClosures_SendDoorLockStatusResponse
        0     24   -> zcl_SendCommand
      1     33   zclClosures_SendDoorLockUnlockTimeoutRequest
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     28   zclClosures_SendDoorLockUserIDRequest
        0     25   -> zcl_SendCommand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ??Subroutine125_0
       9  ??Subroutine126_0
       8  ??Subroutine127_0
       7  ??Subroutine128_0
       5  ??Subroutine129_0
       1  ??Subroutine130_0
      17  ??Subroutine131_0
       1  ??Subroutine132_0
       1  ??Subroutine133_0
       1  ??Subroutine134_0
      17  ??Subroutine135_0
       1  ??Subroutine136_0
       1  ??Subroutine137_0
       1  ??Subroutine138_0
       1  ??Subroutine139_0
       1  ??Subroutine140_0
      14  ??Subroutine141_0
      10  ??Subroutine142_0
       2  ??Subroutine143_0
       5  ??Subroutine144_0
       5  ??Subroutine145_0
       9  ??Subroutine146_0
       1  ??Subroutine147_0
       1  ??Subroutine148_0
       1  ??Subroutine149_0
       1  ??Subroutine150_0
       8  ??Subroutine151_0
       4  ??Subroutine152_0
       1  ??Subroutine153_0
       1  ??Subroutine154_0
       1  ??Subroutine155_0
       1  ??Subroutine156_0
       1  ??Subroutine157_0
       4  ??Subroutine158_0
      11  ??Subroutine159_0
      14  ??Subroutine160_0
       8  ??Subroutine161_0
       4  ??Subroutine162_0
       3  ??Subroutine163_0
       5  ??Subroutine164_0
      12  ??Subroutine165_0
       8  ??Subroutine166_0
       4  ??Subroutine167_0
       5  ??Subroutine168_0
       3  ??Subroutine169_0
       5  ??Subroutine170_0
       5  ??Subroutine171_0
       6  ??Subroutine172_0
      12  ??Subroutine173_0
       8  ??Subroutine174_0
       5  ??Subroutine175_0
       2  ??Subroutine176_0
       7  ??Subroutine177_0
       8  ??Subroutine178_0
      29  ?Subroutine0
      21  ?Subroutine1
       8  ?Subroutine10
       5  ?Subroutine100
       4  ?Subroutine101
      12  ?Subroutine102
       5  ?Subroutine103
       8  ?Subroutine104
       4  ?Subroutine105
       9  ?Subroutine106
       1  ?Subroutine107
       8  ?Subroutine108
       6  ?Subroutine109
      25  ?Subroutine11
       3  ?Subroutine110
      12  ?Subroutine111
      11  ?Subroutine112
       6  ?Subroutine113
      12  ?Subroutine114
      12  ?Subroutine115
      14  ?Subroutine116
       6  ?Subroutine117
       5  ?Subroutine118
       4  ?Subroutine119
      41  ?Subroutine12
      13  ?Subroutine120
       9  ?Subroutine121
      10  ?Subroutine122
       7  ?Subroutine123
       9  ?Subroutine124
       1  ?Subroutine13
       1  ?Subroutine14
       1  ?Subroutine15
      45  ?Subroutine16
      10  ?Subroutine17
       6  ?Subroutine18
       4  ?Subroutine19
       2  ?Subroutine2
      19  ?Subroutine20
      41  ?Subroutine21
      13  ?Subroutine22
      22  ?Subroutine23
      12  ?Subroutine24
       8  ?Subroutine25
       6  ?Subroutine26
      24  ?Subroutine27
       3  ?Subroutine28
       4  ?Subroutine29
       2  ?Subroutine3
       1  ?Subroutine30
       1  ?Subroutine31
       6  ?Subroutine32
      11  ?Subroutine33
       6  ?Subroutine34
       6  ?Subroutine35
       1  ?Subroutine36
       6  ?Subroutine37
       4  ?Subroutine38
      28  ?Subroutine39
       5  ?Subroutine4
       9  ?Subroutine40
       7  ?Subroutine41
      13  ?Subroutine42
      11  ?Subroutine43
       6  ?Subroutine44
       5  ?Subroutine45
      15  ?Subroutine46
       2  ?Subroutine47
      14  ?Subroutine48
       5  ?Subroutine49
       8  ?Subroutine5
       5  ?Subroutine50
       6  ?Subroutine51
       6  ?Subroutine52
      15  ?Subroutine53
       4  ?Subroutine54
       1  ?Subroutine55
       1  ?Subroutine56
       1  ?Subroutine57
      12  ?Subroutine58
      19  ?Subroutine59
       8  ?Subroutine6
      11  ?Subroutine60
       8  ?Subroutine61
       6  ?Subroutine62
       8  ?Subroutine63
      14  ?Subroutine64
      16  ?Subroutine65
       6  ?Subroutine66
       4  ?Subroutine67
       4  ?Subroutine68
       8  ?Subroutine69
       5  ?Subroutine7
       4  ?Subroutine70
       8  ?Subroutine71
      10  ?Subroutine72
       6  ?Subroutine73
       5  ?Subroutine74
       4  ?Subroutine75
       8  ?Subroutine76
       6  ?Subroutine77
       5  ?Subroutine78
       4  ?Subroutine79
       5  ?Subroutine8
       7  ?Subroutine80
       4  ?Subroutine81
      11  ?Subroutine82
      17  ?Subroutine83
       9  ?Subroutine84
      13  ?Subroutine85
      12  ?Subroutine86
      13  ?Subroutine87
      31  ?Subroutine88
       2  ?Subroutine89
      40  ?Subroutine9
       5  ?Subroutine90
      13  ?Subroutine91
       8  ?Subroutine92
       8  ?Subroutine93
       7  ?Subroutine94
      12  ?Subroutine95
      12  ?Subroutine96
       9  ?Subroutine97
      13  ?Subroutine98
       5  ?Subroutine99
       2  zclClosuresDoorLockCBs
     120  zclClosures_HdlIncoming
       6  zclClosures_HdlIncoming::?relay
     216  zclClosures_ProcessInDoorLock
       6  zclClosures_ProcessInDoorLock::?relay
     713  zclClosures_ProcessInDoorLockCmds
       6  zclClosures_ProcessInDoorLockCmds::?relay
     219  zclClosures_ProcessInDoorLockGetHolidayScheduleRsp
       6  zclClosures_ProcessInDoorLockGetHolidayScheduleRsp::?relay
     329  zclClosures_ProcessInDoorLockGetLogRecordRsp
       6  zclClosures_ProcessInDoorLockGetLogRecordRsp::?relay
     141  zclClosures_ProcessInDoorLockGetPINCodeRsp
       6  zclClosures_ProcessInDoorLockGetPINCodeRsp::?relay
     141  zclClosures_ProcessInDoorLockGetRFIDCodeRsp
       6  zclClosures_ProcessInDoorLockGetRFIDCodeRsp::?relay
     139  zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp
       6  zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp::?relay
     227  zclClosures_ProcessInDoorLockGetYearDayScheduleRsp
       6  zclClosures_ProcessInDoorLockGetYearDayScheduleRsp::?relay
     259  zclClosures_ProcessInDoorLockOperationEventNotification
       6  zclClosures_ProcessInDoorLockOperationEventNotification::?relay
     285  zclClosures_ProcessInDoorLockProgrammingEventNotification
       6  zclClosures_ProcessInDoorLockProgrammingEventNotification::?relay
     200  zclClosures_ProcessInDoorLockSetHolidaySchedule
       6  zclClosures_ProcessInDoorLockSetHolidaySchedule::?relay
     141  zclClosures_ProcessInDoorLockSetPINCode
       6  zclClosures_ProcessInDoorLockSetPINCode::?relay
     141  zclClosures_ProcessInDoorLockSetRFIDCode
       6  zclClosures_ProcessInDoorLockSetRFIDCode::?relay
     113  zclClosures_ProcessInDoorLockSetWeekDaySchedule
       6  zclClosures_ProcessInDoorLockSetWeekDaySchedule::?relay
     191  zclClosures_ProcessInDoorLockSetYearDaySchedule
       6  zclClosures_ProcessInDoorLockSetYearDaySchedule::?relay
     152  zclClosures_ProcessInDoorLockUnlockWithTimeout
       6  zclClosures_ProcessInDoorLockUnlockWithTimeout::?relay
     140  zclClosures_RegisterDoorLockCmdCallbacks
       6  zclClosures_RegisterDoorLockCmdCallbacks::?relay
      81  zclClosures_SendDoorLockClearAllCodesRequest
       6  zclClosures_SendDoorLockClearAllCodesRequest::?relay
     283  zclClosures_SendDoorLockGetHolidayScheduleResponse
       6  zclClosures_SendDoorLockGetHolidayScheduleResponse::?relay
     115  zclClosures_SendDoorLockGetLogRecordRequest
       6  zclClosures_SendDoorLockGetLogRecordRequest::?relay
     348  zclClosures_SendDoorLockGetLogRecordResponse
       6  zclClosures_SendDoorLockGetLogRecordResponse::?relay
     148  zclClosures_SendDoorLockGetPINCodeResponse
       6  zclClosures_SendDoorLockGetPINCodeResponse::?relay
     145  zclClosures_SendDoorLockGetRFIDCodeResponse
       6  zclClosures_SendDoorLockGetRFIDCodeResponse::?relay
     108  zclClosures_SendDoorLockGetUserStatusResponse
       6  zclClosures_SendDoorLockGetUserStatusResponse::?relay
     105  zclClosures_SendDoorLockGetUserTypeResponse
       6  zclClosures_SendDoorLockGetUserTypeResponse::?relay
     246  zclClosures_SendDoorLockGetWeekDayScheduleResponse
       6  zclClosures_SendDoorLockGetWeekDayScheduleResponse::?relay
     311  zclClosures_SendDoorLockGetYearDayScheduleResponse
       6  zclClosures_SendDoorLockGetYearDayScheduleResponse::?relay
      71  zclClosures_SendDoorLockHolidayScheduleRequest
       6  zclClosures_SendDoorLockHolidayScheduleRequest::?relay
     251  zclClosures_SendDoorLockOperationEventNotification
       6  zclClosures_SendDoorLockOperationEventNotification::?relay
     272  zclClosures_SendDoorLockProgrammingEventNotification
       6  zclClosures_SendDoorLockProgrammingEventNotification::?relay
     195  zclClosures_SendDoorLockRequest
       6  zclClosures_SendDoorLockRequest::?relay
     131  zclClosures_SendDoorLockScheduleRequest
       6  zclClosures_SendDoorLockScheduleRequest::?relay
     211  zclClosures_SendDoorLockSetHolidayScheduleRequest
       6  zclClosures_SendDoorLockSetHolidayScheduleRequest::?relay
     151  zclClosures_SendDoorLockSetPINCodeRequest
       6  zclClosures_SendDoorLockSetPINCodeRequest::?relay
     151  zclClosures_SendDoorLockSetRFIDCodeRequest
       6  zclClosures_SendDoorLockSetRFIDCodeRequest::?relay
     111  zclClosures_SendDoorLockSetUserStatusRequest
       6  zclClosures_SendDoorLockSetUserStatusRequest::?relay
     111  zclClosures_SendDoorLockSetUserTypeRequest
       6  zclClosures_SendDoorLockSetUserTypeRequest::?relay
     198  zclClosures_SendDoorLockSetWeekDayScheduleRequest
       6  zclClosures_SendDoorLockSetWeekDayScheduleRequest::?relay
     219  zclClosures_SendDoorLockSetYearDayScheduleRequest
       6  zclClosures_SendDoorLockSetYearDayScheduleRequest::?relay
      68  zclClosures_SendDoorLockStatusResponse
       6  zclClosures_SendDoorLockStatusResponse::?relay
     195  zclClosures_SendDoorLockUnlockTimeoutRequest
       6  zclClosures_SendDoorLockUnlockTimeoutRequest::?relay
     123  zclClosures_SendDoorLockUserIDRequest
       6  zclClosures_SendDoorLockUserIDRequest::?relay
       1  zclDoorLockPluginRegisted

 
 9 694 bytes in segment BANKED_CODE
   258 bytes in segment BANK_RELAYS
     3 bytes in segment XDATA_Z
 
   258 bytes of CODE     memory
 9 694 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
