###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               20/Nov/2021  20:16:47
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\Z-Stack Home 1.2.2a.44539\Components\stack\zcl\zcl_lighting.c
#    Command line       =  
#        -f C:\Users\tatbo\AppData\Local\Temp\EWD22D.tmp ("D:\Z-Stack Home
#        1.2.2a.44539\Components\stack\zcl\zcl_lighting.c" -D SECURE=1 -D
#        HAL_KEY=FALSE -D HAL_LED=FALSE -D HAL_LCD=FALSE -D HAL_UART=FALSE -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xHOLD_AUTO_START -D
#        ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=FALSE -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D
#        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D ZCL_DOORLOCK -lC "D:\Z-Stack
#        Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List"
#        -lA "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\" -I
#        "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\Source\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\Source\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List\zcl_lighting.lst
#    Object file        =  
#        D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\Obj\zcl_lighting.r51
#
###############################################################################

D:\Z-Stack Home 1.2.2a.44539\Components\stack\zcl\zcl_lighting.c
      1          /**************************************************************************************************
      2            Filename:       zcl_lighting.c
      3            Revised:        $Date: 2013-07-03 15:56:37 -0700 (Wed, 03 Jul 2013) $
      4            Revision:       $Revision: 34689 $
      5          
      6            Description:    Zigbee Cluster Library -  Lighting
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "zcl.h"
     44          #include "zcl_general.h"
     45          #include "zcl_lighting.h"
     46          
     47          #if defined ( INTER_PAN )
     48            #include "stub_aps.h"
     49          #endif
     50          
     51          /*********************************************************************
     52           * MACROS
     53           */
     54          
     55          /*********************************************************************
     56           * CONSTANTS
     57           */
     58          
     59          /*********************************************************************
     60           * TYPEDEFS
     61           */
     62          typedef struct zclLightingCBRec
     63          {
     64            struct zclLightingCBRec     *next;
     65            uint8                       endpoint; // Used to link it into the endpoint descriptor
     66            zclLighting_AppCallbacks_t  *CBs;     // Pointer to Callback function
     67          } zclLightingCBRec_t;
     68          
     69          /*********************************************************************
     70           * GLOBAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * GLOBAL FUNCTIONS
     75           */
     76          
     77          /*********************************************************************
     78           * LOCAL VARIABLES
     79           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     80          static zclLightingCBRec_t *zclLightingCBs = (zclLightingCBRec_t *)NULL;
   \                     zclLightingCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     81          static uint8 zclLightingPluginRegisted = FALSE;
   \                     zclLightingPluginRegisted:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     82          
     83          /*********************************************************************
     84           * LOCAL FUNCTIONS
     85           */
     86          static ZStatus_t zclLighting_HdlIncoming( zclIncoming_t *pInHdlrMsg );
     87          static ZStatus_t zclLighting_HdlInSpecificCommands( zclIncoming_t *pInMsg );
     88          static zclLighting_AppCallbacks_t *zclLighting_FindCallbacks( uint8 endpoint );
     89          
     90          static ZStatus_t zclLighting_ProcessInColorControlCmds( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
     91          
     92          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToHue( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
     93          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveHue( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
     94          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_StepHue( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
     95          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToSaturation( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
     96          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveSaturation( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
     97          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_StepSaturation( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
     98          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToHueAndSaturation( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
     99          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToColor( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    100          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveColor( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    101          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_StepColor( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    102          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToColorTemperature( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    103          #ifdef ZCL_LIGHT_LINK_ENHANCE
    104          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHue( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    105          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedMoveHue( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    106          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedStepHue( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    107          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHueAndSaturation( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    108          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_ColorLoopSet( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    109          #endif // ZCL_LIGHT_LINK_ENHANCE
    110          
    111          /*********************************************************************
    112           * @fn      zclLighting_RegisterCmdCallbacks
    113           *
    114           * @brief   Register an applications command callbacks
    115           *
    116           * @param   endpoint - application's endpoint
    117           * @param   callbacks - pointer to the callback record.
    118           *
    119           * @return  ZMemError if not able to allocate
    120           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    121          ZStatus_t zclLighting_RegisterCmdCallbacks( uint8 endpoint, zclLighting_AppCallbacks_t *callbacks )
   \                     zclLighting_RegisterCmdCallbacks:
    122          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    123            zclLightingCBRec_t *pNewItem;
    124            zclLightingCBRec_t *pLoop;
    125          
    126            // Register as a ZCL Plugin
    127            if ( zclLightingPluginRegisted == FALSE )
   \   00000B   90....       MOV       DPTR,#zclLightingPluginRegisted
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   7021         JNZ       ??zclLighting_RegisterCmdCallbacks_0
    128            {
    129              zcl_registerPlugin( ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    130                                  ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG,
    131                                  zclLighting_HdlIncoming );
   \   000011                ; Setup parameters for call to function zcl_registerPlugin
   \   000011   75....       MOV       ?V2,#`??zclLighting_HdlIncoming::?relay` & 0xff
   \   000014   75....       MOV       ?V3,#(`??zclLighting_HdlIncoming::?relay` >> 8) & 0xff
   \   000017   78..         MOV       R0,#?V2
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   7C01         MOV       R4,#0x1
   \   00001E   7D03         MOV       R5,#0x3
   \   000020   7A00         MOV       R2,#0x0
   \   000022   7B03         MOV       R3,#0x3
   \   000024   12....       LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
    132              zclLightingPluginRegisted = TRUE;
   \   00002C   90....       MOV       DPTR,#zclLightingPluginRegisted
   \   00002F   7401         MOV       A,#0x1
   \   000031   F0           MOVX      @DPTR,A
    133            }
    134          
    135            // Fill in the new profile list
    136            pNewItem = zcl_mem_alloc( sizeof( zclLightingCBRec_t ) );
   \                     ??zclLighting_RegisterCmdCallbacks_0:
   \   000032                ; Setup parameters for call to function osal_mem_alloc
   \   000032   7A05         MOV       R2,#0x5
   \   000034   7B00         MOV       R3,#0x0
   \   000036   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000039   8A..         MOV       ?V2,R2
   \   00003B   8B..         MOV       ?V3,R3
   \   00003D   A8..         MOV       R0,?V2
   \   00003F   A9..         MOV       R1,?V3
    137            if ( pNewItem == NULL )
   \   000041   E8           MOV       A,R0
   \   000042   49           ORL       A,R1
   \   000043   7004         JNZ       ??zclLighting_RegisterCmdCallbacks_1
    138              return (ZMemError);
   \   000045   7910         MOV       R1,#0x10
   \   000047   803E         SJMP      ??zclLighting_RegisterCmdCallbacks_2
    139          
    140            pNewItem->next = (zclLightingCBRec_t *)NULL;
   \                     ??zclLighting_RegisterCmdCallbacks_1:
   \   000049   8882         MOV       DPL,R0
   \   00004B   8983         MOV       DPH,R1
   \   00004D   E4           CLR       A
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   12....       LCALL     ??Subroutine46_0 & 0xFFFF
    141            pNewItem->endpoint = endpoint;
   \                     ??CrossCallReturnLabel_94:
   \   000053   E5..         MOV       A,?V0
   \   000055   12....       LCALL     ??Subroutine46_0 & 0xFFFF
    142            pNewItem->CBs = callbacks;
   \                     ??CrossCallReturnLabel_95:
   \   000058   A3           INC       DPTR
   \   000059   EE           MOV       A,R6
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   A3           INC       DPTR
   \   00005C   EF           MOV       A,R7
   \   00005D   F0           MOVX      @DPTR,A
    143          
    144            // Find spot in list
    145            if ( zclLightingCBs == NULL )
   \   00005E   90....       MOV       DPTR,#zclLightingCBs
   \   000061   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000064   90....       MOV       DPTR,#zclLightingCBs
   \   000067   6017         JZ        ??zclLighting_RegisterCmdCallbacks_3
    146            {
    147              zclLightingCBs = pNewItem;
    148            }
    149            else
    150            {
    151              // Look for end of list
    152              pLoop = zclLightingCBs;
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   FC           MOV       R4,A
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   8003         SJMP      ??zclLighting_RegisterCmdCallbacks_4
    153              while ( pLoop->next != NULL )
    154                pLoop = pLoop->next;
   \                     ??zclLighting_RegisterCmdCallbacks_5:
   \   00006F   EA           MOV       A,R2
   \   000070   FC           MOV       R4,A
   \   000071   EB           MOV       A,R3
   \                     ??zclLighting_RegisterCmdCallbacks_4:
   \   000072   FD           MOV       R5,A
   \   000073   8C82         MOV       DPL,R4
   \   000075   8D83         MOV       DPH,R5
   \   000077   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00007A   70F3         JNZ       ??zclLighting_RegisterCmdCallbacks_5
    155          
    156              // Put new item at end of list
    157              pLoop->next = pNewItem;
   \   00007C   8C82         MOV       DPL,R4
   \   00007E   8D83         MOV       DPH,R5
   \                     ??zclLighting_RegisterCmdCallbacks_3:
   \   000080   E8           MOV       A,R0
   \   000081   F0           MOVX      @DPTR,A
   \   000082   A3           INC       DPTR
   \   000083   E9           MOV       A,R1
   \   000084   F0           MOVX      @DPTR,A
    158            }
    159          
    160            return ( ZSuccess );
   \   000085   7900         MOV       R1,#0x0
   \                     ??zclLighting_RegisterCmdCallbacks_2:
   \   000087   02....       LJMP      ??Subroutine41_0 & 0xFFFF
    161          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   22           RET
    162          
    163          /*********************************************************************
    164           * @fn      zclLighting_ColorControl_Send_MoveToHueCmd
    165           *
    166           * @brief   Call to send out a Move To Hue Command
    167           *
    168           * @param   srcEP - Sending application's endpoint
    169           * @param   dstAddr - where you want the message to go
    170           * @param   hue - target hue value
    171           * @param   direction - direction of hue change
    172           * @param   transitionTime - tame taken to move to the target hue in 1/10 sec increments
    173           * @param   disableDefaultRsp - whether to disable the Default Response command
    174           * @param   seqNum - sequence number
    175           *
    176           * @return  ZStatus_t
    177           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    178          ZStatus_t zclLighting_ColorControl_Send_MoveToHueCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_MoveToHueCmd:
    179                                                                uint8 hue, uint8 direction, uint16 transitionTime,
    180                                                                uint8 disableDefaultRsp, uint8 seqNum )
    181          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
    182            uint8 buf[4];
    183          
    184            buf[0] = hue;
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
    185            buf[1] = direction;
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   ED           MOV       A,R5
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   7410         MOV       A,#0x10
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ?Subroutine11 & 0xFFFF
    186            buf[2] = LO_UINT16( transitionTime );
   \                     ??CrossCallReturnLabel_26:
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E8           MOV       A,R0
   \   000027   F0           MOVX      @DPTR,A
    187            buf[3] = HI_UINT16( transitionTime );
   \   000028   7403         MOV       A,#0x3
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   12....       LCALL     ?Subroutine25 & 0xFFFF
    188          
    189            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    190                                    COMMAND_LIGHTING_MOVE_TO_HUE, TRUE,
    191                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 4, buf );
   \                     ??CrossCallReturnLabel_83:
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   75..04       MOV       ?V2,#0x4
   \   000036   75..00       MOV       ?V3,#0x0
   \   000039   78..         MOV       R0,#?V2
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   7417         MOV       A,#0x17
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000049   E4           CLR       A
   \   00004A   F5..         MOV       ?V2,A
   \   00004C   78..         MOV       R0,#?V2
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   7419         MOV       A,#0x19
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005C   75..00       MOV       ?V1,#0x0
   \   00005F   78..         MOV       R0,#?V1
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000064   75..01       MOV       ?V1,#0x1
   \   000067   78..         MOV       R0,#?V1
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006C   75..00       MOV       ?V1,#0x0
   \   00006F   02....       LJMP      ?Subroutine0 & 0xFFFF
    192          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V1,A
   \   000003   78..         MOV       R0,#?V1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   78..         MOV       R0,#?V1
   \   000002   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000005   7C00         MOV       R4,#0x0
   \   000007   7D03         MOV       R5,#0x3
   \   000009   EE           MOV       A,R6
   \   00000A   F9           MOV       R1,A
   \   00000B   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00000E   740B         MOV       A,#0xb
   \   000010   12....       LCALL     ?DEALLOC_XSTACK8
   \   000013   7404         MOV       A,#0x4
   \   000015                REQUIRE ??Subroutine40_0
   \   000015                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine41_0
   \   000003                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E9           MOV       A,R1
   \   000001                REQUIRE ??Subroutine42_0
   \   000001                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V2,R0
   \   000007   89..         MOV       ?V3,R1
   \   000009   78..         MOV       R0,#?V2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
    193          
    194          /*********************************************************************
    195           * @fn      zclLighting_ColorControl_Send_MoveHueCmd
    196           *
    197           * @brief   Call to send out a Move To Hue Command
    198           *
    199           * @param   srcEP - Sending application's endpoint
    200           * @param   dstAddr - where you want the message to go
    201           * @param   moveMode - LIGHTING_MOVE_HUE_STOP, LIGHTING_MOVE_HUE_UP,
    202           *                     LIGHTING_MOVE_HUE_DOWN
    203           * @param   rate - the movement in steps per second, where step is
    204           *                 a change in the device's hue of one unit
    205           * @param   disableDefaultRsp - whether to disable the Default Response command
    206           * @param   seqNum - sequence number
    207           *
    208           * @return  ZStatus_t
    209           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    210          ZStatus_t zclLighting_ColorControl_Send_MoveHueCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_MoveHueCmd:
    211                                                              uint8 moveMode, uint8 rate,
    212                                                              uint8 disableDefaultRsp, uint8 seqNum )
    213          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
    214            uint8 buf[2];
    215          
    216            buf[0] = moveMode;
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
    217            buf[1] = rate;
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   ED           MOV       A,R5
   \   00001A   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    218          
    219            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    220                                    COMMAND_LIGHTING_MOVE_HUE, TRUE,
    221                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_86:
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000020   75..02       MOV       ?V2,#0x2
   \   000023   75..00       MOV       ?V3,#0x0
   \   000026   78..         MOV       R0,#?V2
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   7413         MOV       A,#0x13
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000036   E4           CLR       A
   \   000037   F5..         MOV       ?V2,A
   \   000039   78..         MOV       R0,#?V2
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   7415         MOV       A,#0x15
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000049   75..00       MOV       ?V1,#0x0
   \   00004C   78..         MOV       R0,#?V1
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000051   75..01       MOV       ?V1,#0x1
   \   000054   78..         MOV       R0,#?V1
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059                REQUIRE ?Subroutine3
   \   000059                ; // Fall through to label ?Subroutine3
    222          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   78..         MOV       R0,#?V1
   \   000002   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000005   7C00         MOV       R4,#0x0
   \   000007   7D03         MOV       R5,#0x3
   \   000009   EE           MOV       A,R6
   \   00000A   F9           MOV       R1,A
   \   00000B   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00000E   740B         MOV       A,#0xb
   \   000010   12....       LCALL     ?DEALLOC_XSTACK8
   \   000013   7402         MOV       A,#0x2
   \   000015   02....       LJMP      ??Subroutine40_0 & 0xFFFF
    223          
    224          /*********************************************************************
    225           * @fn      zclLighting_ColorControl_Send_StepHueCmd
    226           *
    227           * @brief   Call to send out a Step Hue Command
    228           *
    229           * @param   srcEP - Sending application's endpoint
    230           * @param   dstAddr - where you want the message to go
    231           * @param   stepMode -	LIGHTING_STEP_HUE_UP, LIGHTING_STEP_HUE_DOWN
    232           * @param   stepSize -  change to the current value of the device's hue
    233           * @param   transitionTime - the movement in steps per 1/10 second
    234           * @param   disableDefaultRsp - whether to disable the Default Response command
    235           * @param   seqNum - sequence number
    236           *
    237           * @return  ZStatus_t
    238           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    239          ZStatus_t zclLighting_ColorControl_Send_StepHueCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_StepHueCmd:
    240                                            uint8 stepMode, uint8 stepSize, uint8 transitionTime,
    241                                            uint8 disableDefaultRsp, uint8 seqNum )
    242          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
    243            uint8 buf[3];
    244          
    245            buf[0] = stepMode;
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
    246            buf[1] = stepSize;
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   ED           MOV       A,R5
   \   00001A   F0           MOVX      @DPTR,A
    247            buf[2] = transitionTime;
   \   00001B   740F         MOV       A,#0xf
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   E0           MOVX      A,@DPTR
   \   000021   C0E0         PUSH      A
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   D0E0         POP       A
   \   00002A   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    248          
    249            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    250                                    COMMAND_LIGHTING_STEP_HUE, TRUE,
    251                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 3, buf );
   \                     ??CrossCallReturnLabel_87:
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   75..03       MOV       ?V2,#0x3
   \   000033   75..00       MOV       ?V3,#0x0
   \   000036   78..         MOV       R0,#?V2
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7415         MOV       A,#0x15
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000046   E4           CLR       A
   \   000047   F5..         MOV       ?V2,A
   \   000049   78..         MOV       R0,#?V2
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7417         MOV       A,#0x17
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059   75..00       MOV       ?V1,#0x0
   \   00005C   78..         MOV       R0,#?V1
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000061   75..01       MOV       ?V1,#0x1
   \   000064   78..         MOV       R0,#?V1
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000069   75..02       MOV       ?V1,#0x2
   \   00006C                REQUIRE ?Subroutine4
   \   00006C                ; // Fall through to label ?Subroutine4
    252          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   78..         MOV       R0,#?V1
   \   000002   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000005   7C00         MOV       R4,#0x0
   \   000007   7D03         MOV       R5,#0x3
   \   000009   EE           MOV       A,R6
   \   00000A   F9           MOV       R1,A
   \   00000B   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00000E   740B         MOV       A,#0xb
   \   000010   12....       LCALL     ?DEALLOC_XSTACK8
   \   000013   7403         MOV       A,#0x3
   \   000015   02....       LJMP      ??Subroutine40_0 & 0xFFFF
    253          
    254          /*********************************************************************
    255           * @fn      zclLighting_ColorControl_Send_MoveToSaturationCmd
    256           *
    257           * @brief   Call to send out a Move To Saturation Command
    258           *
    259           * @param   srcEP - Sending application's endpoint
    260           * @param   dstAddr - where you want the message to go
    261           * @param   saturation - target saturation value
    262           * @param   transitionTime - time taken move to the target saturation,
    263           *                           in 1/10 second units
    264           * @param   disableDefaultRsp - whether to disable the Default Response command
    265           * @param   seqNum - sequence number
    266           *
    267           * @return  ZStatus_t
    268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          ZStatus_t zclLighting_ColorControl_Send_MoveToSaturationCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_MoveToSaturationCmd:
    270                                                   uint8 saturation, uint16 transitionTime,
    271                                                   uint8 disableDefaultRsp, uint8 seqNum )
    272          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
    273            uint8 buf[3];
    274          
    275            buf[0] = saturation;
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
   \   000014   740F         MOV       A,#0xf
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine21 & 0xFFFF
    276            buf[1] = LO_UINT16( transitionTime );
   \                     ??CrossCallReturnLabel_51:
   \   00001C   7401         MOV       A,#0x1
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   E8           MOV       A,R0
   \   000022   F0           MOVX      @DPTR,A
    277            buf[2] = HI_UINT16( transitionTime );
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   12....       LCALL     ?Subroutine25 & 0xFFFF
    278          
    279            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    280                                    COMMAND_LIGHTING_MOVE_TO_SATURATION, TRUE,
    281                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 3, buf );
   \                     ??CrossCallReturnLabel_84:
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   75..03       MOV       ?V2,#0x3
   \   000031   75..00       MOV       ?V3,#0x0
   \   000034   78..         MOV       R0,#?V2
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   7415         MOV       A,#0x15
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000044   E4           CLR       A
   \   000045   F5..         MOV       ?V2,A
   \   000047   78..         MOV       R0,#?V2
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   ED           MOV       A,R5
   \   00004D   F5..         MOV       ?V1,A
   \   00004F   78..         MOV       R0,#?V1
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000054   75..00       MOV       ?V1,#0x0
   \   000057   78..         MOV       R0,#?V1
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005C   75..01       MOV       ?V1,#0x1
   \   00005F   78..         MOV       R0,#?V1
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000064   75..03       MOV       ?V1,#0x3
   \   000067   02....       LJMP      ?Subroutine4 & 0xFFFF
    282          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   22           RET
    283          
    284          /*********************************************************************
    285           * @fn      zclLighting_ColorControl_Send_MoveSaturationCmd
    286           *
    287           * @brief   Call to send out a Move Saturation Command
    288           *
    289           * @param   srcEP - Sending application's endpoint
    290           * @param   dstAddr - where you want the message to go
    291           * @param   moveMode - LIGHTING_MOVE_SATURATION_STOP, LIGHTING_MOVE_SATURATION_UP,
    292           *                     LIGHTING_MOVE_SATURATION_DOWN
    293           * @param   rate - rate of movement in step/sec; step is the device's saturation of one unit
    294           * @param   disableDefaultRsp - whether to disable the Default Response command
    295           * @param   seqNum - sequence number
    296           *
    297           * @return  ZStatus_t
    298           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    299          ZStatus_t zclLighting_ColorControl_Send_MoveSaturationCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_MoveSaturationCmd:
    300                                                                     uint8 moveMode, uint8 rate,
    301                                                                     uint8 disableDefaultRsp, uint8 seqNum )
    302          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
    303            uint8 buf[2];
    304          
    305            buf[0] = moveMode;
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
    306            buf[1] = rate;
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   ED           MOV       A,R5
   \   00001A   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    307          
    308            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    309                                    COMMAND_LIGHTING_MOVE_SATURATION, TRUE,
    310                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_88:
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000020   75..02       MOV       ?V2,#0x2
   \   000023   75..00       MOV       ?V3,#0x0
   \   000026   78..         MOV       R0,#?V2
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   7413         MOV       A,#0x13
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000036   E4           CLR       A
   \   000037   F5..         MOV       ?V2,A
   \   000039   78..         MOV       R0,#?V2
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   7415         MOV       A,#0x15
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000049   75..00       MOV       ?V1,#0x0
   \   00004C   78..         MOV       R0,#?V1
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000051   75..01       MOV       ?V1,#0x1
   \   000054   78..         MOV       R0,#?V1
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059   75..04       MOV       ?V1,#0x4
   \   00005C   02....       LJMP      ?Subroutine3 & 0xFFFF
    311          }
    312          
    313          /*********************************************************************
    314           * @fn      zclLighting_ColorControl_Send_StepSaturationCmd
    315           *
    316           * @brief   Call to send out a Step Saturation Command
    317           *
    318           * @param   srcEP - Sending application's endpoint
    319           * @param   dstAddr - where you want the message to go
    320           * @param   stepMode -  LIGHTING_STEP_SATURATION_UP, LIGHTING_STEP_SATURATION_DOWN
    321           * @param   stepSize -  change to the current value of the device's hue
    322           * @param   transitionTime - time to perform a single step in 1/10 of second
    323           * @param   disableDefaultRsp - whether to disable the Default Response command
    324           * @param   seqNum - sequence number
    325           *
    326           * @return  ZStatus_t
    327           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    328          ZStatus_t zclLighting_ColorControl_Send_StepSaturationCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_StepSaturationCmd:
    329                                                   uint8 stepMode, uint8 stepSize, uint8 transitionTime,
    330                                                   uint8 disableDefaultRsp, uint8 seqNum )
    331          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
    332            uint8 buf[3];
    333          
    334            buf[0] = stepMode;
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
    335            buf[1] = stepSize;
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   ED           MOV       A,R5
   \   00001A   F0           MOVX      @DPTR,A
    336            buf[2] = transitionTime;
   \   00001B   740F         MOV       A,#0xf
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   E0           MOVX      A,@DPTR
   \   000021   C0E0         PUSH      A
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   D0E0         POP       A
   \   00002A   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    337          
    338            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    339                                    COMMAND_LIGHTING_STEP_SATURATION, TRUE,
    340                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 3, buf );
   \                     ??CrossCallReturnLabel_89:
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   75..03       MOV       ?V2,#0x3
   \   000033   75..00       MOV       ?V3,#0x0
   \   000036   78..         MOV       R0,#?V2
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7415         MOV       A,#0x15
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000046   E4           CLR       A
   \   000047   F5..         MOV       ?V2,A
   \   000049   78..         MOV       R0,#?V2
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7417         MOV       A,#0x17
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059   75..00       MOV       ?V1,#0x0
   \   00005C   78..         MOV       R0,#?V1
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000061   75..01       MOV       ?V1,#0x1
   \   000064   78..         MOV       R0,#?V1
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000069   75..05       MOV       ?V1,#0x5
   \   00006C   02....       LJMP      ?Subroutine4 & 0xFFFF
    341          }
    342          
    343          /*********************************************************************
    344           * @fn      zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd
    345           *
    346           * @brief   Call to send out a Move To Hue And Saturation Command
    347           *
    348           * @param   srcEP - Sending application's endpoint
    349           * @param   dstAddr - where you want the message to go
    350           * @param   hue - a target hue
    351           * @param   saturation - a target saturation
    352           * @param   transitionTime -  time to move, equal of the value of the field in 1/10 seconds
    353           * @param   disableDefaultRsp - whether to disable the Default Response command
    354           * @param   seqNum - sequence number
    355           *
    356           * @return  ZStatus_t
    357           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    358          ZStatus_t zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd:
    359                                                             uint8 hue, uint8 saturation, uint16 transitionTime,
    360                                                             uint8 disableDefaultRsp, uint8 seqNum )
    361          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
    362            uint8 buf[4];
    363          
    364            buf[0] = hue;
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
    365            buf[1] = saturation;
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   ED           MOV       A,R5
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   7410         MOV       A,#0x10
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ?Subroutine11 & 0xFFFF
    366            buf[2] = LO_UINT16( transitionTime );
   \                     ??CrossCallReturnLabel_27:
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E8           MOV       A,R0
   \   000027   F0           MOVX      @DPTR,A
    367            buf[3] = HI_UINT16( transitionTime );
   \   000028   7403         MOV       A,#0x3
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   12....       LCALL     ?Subroutine25 & 0xFFFF
    368          
    369            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    370                                    COMMAND_LIGHTING_MOVE_TO_HUE_AND_SATURATION, TRUE,
    371                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 4, buf );
   \                     ??CrossCallReturnLabel_85:
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   75..04       MOV       ?V2,#0x4
   \   000036   75..00       MOV       ?V3,#0x0
   \   000039   78..         MOV       R0,#?V2
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   7417         MOV       A,#0x17
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000049   E4           CLR       A
   \   00004A   F5..         MOV       ?V2,A
   \   00004C   78..         MOV       R0,#?V2
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   7419         MOV       A,#0x19
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005C   75..00       MOV       ?V1,#0x0
   \   00005F   78..         MOV       R0,#?V1
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000064   75..01       MOV       ?V1,#0x1
   \   000067   78..         MOV       R0,#?V1
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006C   75..06       MOV       ?V1,#0x6
   \   00006F   02....       LJMP      ?Subroutine0 & 0xFFFF
    372          }
    373          
    374          /*********************************************************************
    375           * @fn      zclLighting_ColorControl_Send_MoveToColorCmd
    376           *
    377           * @brief   Call to send out a Move To Color Command
    378           *
    379           * @param   srcEP - Sending application's endpoint
    380           * @param   dstAddr - where you want the message to go
    381           * @param   colorX - a target color X
    382           * @param   colorY - a target color Y
    383           * @param   transitionTime -  time to move, equal of the value of the field in 1/10 seconds
    384           * @param   disableDefaultRsp - whether to disable the Default Response command
    385           * @param   seqNum - sequence number
    386           *
    387           * @return  ZStatus_t
    388           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    389          ZStatus_t zclLighting_ColorControl_Send_MoveToColorCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_MoveToColorCmd:
    390                                                 uint16 colorX, uint16 colorY, uint16 transitionTime,
    391                                                 uint8 disableDefaultRsp, uint8 seqNum )
    392          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    393            uint8 buf[6];
    394          
    395            buf[0] = LO_UINT16( colorX );
   \   00000C   EC           MOV       A,R4
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
    396            buf[1] = HI_UINT16( colorX );
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   ED           MOV       A,R5
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   7410         MOV       A,#0x10
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ?Subroutine11 & 0xFFFF
    397            buf[2] = LO_UINT16( colorY );
   \                     ??CrossCallReturnLabel_28:
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E8           MOV       A,R0
   \   000027   F0           MOVX      @DPTR,A
    398            buf[3] = HI_UINT16( colorY );
   \   000028   7403         MOV       A,#0x3
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   E9           MOV       A,R1
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   7412         MOV       A,#0x12
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   12....       LCALL     ?Subroutine21 & 0xFFFF
    399            buf[4] = LO_UINT16( transitionTime );
   \                     ??CrossCallReturnLabel_52:
   \   000037   7404         MOV       A,#0x4
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   E8           MOV       A,R0
   \   00003D   F0           MOVX      @DPTR,A
    400            buf[5] = HI_UINT16( transitionTime );
   \   00003E   7405         MOV       A,#0x5
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?Subroutine26 & 0xFFFF
    401          
    402            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    403                                    COMMAND_LIGHTING_MOVE_TO_COLOR, TRUE,
    404                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 6, buf );
   \                     ??CrossCallReturnLabel_90:
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000049   75..06       MOV       ?V0,#0x6
   \   00004C   75..00       MOV       ?V1,#0x0
   \   00004F   78..         MOV       R0,#?V0
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000054   7419         MOV       A,#0x19
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005F   E4           CLR       A
   \   000060   F5..         MOV       ?V0,A
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000067   741B         MOV       A,#0x1b
   \   000069   12....       LCALL     ?XSTACK_DISP0_8
   \   00006C   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00006F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000072   75..00       MOV       ?V0,#0x0
   \   000075   78..         MOV       R0,#?V0
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007A   75..01       MOV       ?V0,#0x1
   \   00007D   78..         MOV       R0,#?V0
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000082   75..07       MOV       ?V0,#0x7
   \   000085   02....       LJMP      ?Subroutine1 & 0xFFFF
    405          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   78..         MOV       R0,#?V0
   \   000002   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000005   7C00         MOV       R4,#0x0
   \   000007   7D03         MOV       R5,#0x3
   \   000009   EE           MOV       A,R6
   \   00000A   F9           MOV       R1,A
   \   00000B   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00000E   740B         MOV       A,#0xb
   \   000010   12....       LCALL     ?DEALLOC_XSTACK8
   \   000013   7406         MOV       A,#0x6
   \   000015                REQUIRE ??Subroutine43_0
   \   000015                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F02         MOV       R7,#0x2
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E9           MOV       A,R1
   \   000001                REQUIRE ??Subroutine44_0
   \   000001                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET
    406          
    407          /*********************************************************************
    408           * @fn      zclLighting_ColorControl_Send_MoveColorCmd
    409           *
    410           * @brief   Call to send out a Move Color Command
    411           *
    412           * @param   srcEP - Sending application's endpoint
    413           * @param   dstAddr - where you want the message to go
    414           * @param   rateX - rate of movement in steps per second. A step is a change
    415           *                  in the device's CurrentX attribute of one unit.
    416           * @param   rateY - rate of movement in steps per second. A step is a change
    417           *                  in the device's CurrentY attribute of one unit.
    418           * @param   disableDefaultRsp - whether to disable the Default Response command
    419           * @param   seqNum - sequence number
    420           *
    421           * @return  ZStatus_t
    422           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    423          ZStatus_t zclLighting_ColorControl_Send_MoveColorCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_MoveColorCmd:
    424                                                                int16 rateX, int16 rateY,
    425                                                                uint8 disableDefaultRsp, uint8 seqNum )
    426          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine30 & 0xFFFF
    427            uint8 buf[4];
    428          
    429            buf[0] = LO_UINT16( rateX );
    430            buf[1] = HI_UINT16( rateX );
   \                     ??CrossCallReturnLabel_65:
   \   00000D   12....       LCALL     ?SS_SHR
   \   000010   04           INC       A
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E5..         MOV       A,?V0
   \   000016   F0           MOVX      @DPTR,A
   \   000017   740E         MOV       A,#0xe
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ?Subroutine22 & 0xFFFF
    431            buf[2] = LO_UINT16( rateY );
   \                     ??CrossCallReturnLabel_55:
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   E5..         MOV       A,?V0
   \   000024   F0           MOVX      @DPTR,A
    432            buf[3] = HI_UINT16( rateY );
   \   000025   7408         MOV       A,#0x8
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?SS_SHR
   \   00002C   7403         MOV       A,#0x3
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   E5..         MOV       A,?V0
   \   000033   12....       LCALL     ??Subroutine44_0 & 0xFFFF
    433          
    434            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    435                                    COMMAND_LIGHTING_MOVE_COLOR, TRUE,
    436                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 4, buf );
   \                     ??CrossCallReturnLabel_93:
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   75..04       MOV       ?V0,#0x4
   \   00003C   75..00       MOV       ?V1,#0x0
   \   00003F   78..         MOV       R0,#?V0
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   7415         MOV       A,#0x15
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004F   E4           CLR       A
   \   000050   F5..         MOV       ?V0,A
   \   000052   78..         MOV       R0,#?V0
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000057   7417         MOV       A,#0x17
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000062   75..00       MOV       ?V0,#0x0
   \   000065   78..         MOV       R0,#?V0
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006A   75..01       MOV       ?V0,#0x1
   \   00006D   78..         MOV       R0,#?V0
   \   00006F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000072   75..08       MOV       ?V0,#0x8
   \   000075                REQUIRE ?Subroutine5
   \   000075                ; // Fall through to label ?Subroutine5
    437          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   78..         MOV       R0,#?V0
   \   000002   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000005   7C00         MOV       R4,#0x0
   \   000007   7D03         MOV       R5,#0x3
   \   000009   EE           MOV       A,R6
   \   00000A   F9           MOV       R1,A
   \   00000B   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00000E   740B         MOV       A,#0xb
   \   000010   12....       LCALL     ?DEALLOC_XSTACK8
   \   000013   7404         MOV       A,#0x4
   \   000015   80..         SJMP      ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E9           MOV       A,R1
   \   000001   FE           MOV       R6,A
   \   000002   EC           MOV       A,R4
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   8C..         MOV       ?V0,R4
   \   00000C   8D..         MOV       ?V1,R5
   \   00000E   7408         MOV       A,#0x8
   \   000010   78..         MOV       R0,#?V0
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   7402         MOV       A,#0x2
   \   000009   22           RET
    438          
    439          /*********************************************************************
    440           * @fn      zclLighting_ColorControl_Send_StepColorCmd
    441           *
    442           * @brief   Call to send out a Step Color Command
    443           *
    444           * @param   srcEP - Sending application's endpoint
    445           * @param   dstAddr - where you want the message to go
    446           * @param   stepX - change to be added to the device's CurrentX attribute
    447           * @param   stepY - change to be added to the device's CurrentY attribute
    448           * @param   transitionTime -  time to perform the color change, equal of
    449           *                            the value of the field in 1/10 seconds
    450           * @param   disableDefaultRsp - whether to disable the Default Response command
    451           * @param   seqNum - sequence number
    452           *
    453           * @return  ZStatus_t
    454           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    455          ZStatus_t zclLighting_ColorControl_Send_StepColorCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_StepColorCmd:
    456                                                   int16 stepX, int16 stepY, uint16 transitionTime,
    457                                                   uint8 disableDefaultRsp, uint8 seqNum )
    458          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine30 & 0xFFFF
    459            uint8 buf[6];
    460          
    461            buf[0] = LO_UINT16( stepX );
    462            buf[1] = HI_UINT16( stepX );
   \                     ??CrossCallReturnLabel_66:
   \   00000D   12....       LCALL     ?SS_SHR
   \   000010   04           INC       A
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E5..         MOV       A,?V0
   \   000016   F0           MOVX      @DPTR,A
   \   000017   7410         MOV       A,#0x10
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ?Subroutine22 & 0xFFFF
    463            buf[2] = LO_UINT16( stepY );
   \                     ??CrossCallReturnLabel_56:
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   E5..         MOV       A,?V0
   \   000024   F0           MOVX      @DPTR,A
    464            buf[3] = HI_UINT16( stepY );
   \   000025   7408         MOV       A,#0x8
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?SS_SHR
   \   00002C   7403         MOV       A,#0x3
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   E5..         MOV       A,?V0
   \   000033   F0           MOVX      @DPTR,A
   \   000034   7412         MOV       A,#0x12
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   12....       LCALL     ?Subroutine21 & 0xFFFF
    465            buf[4] = LO_UINT16( transitionTime );
   \                     ??CrossCallReturnLabel_53:
   \   00003C   7404         MOV       A,#0x4
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   E8           MOV       A,R0
   \   000042   F0           MOVX      @DPTR,A
    466            buf[5] = HI_UINT16( transitionTime );
   \   000043   7405         MOV       A,#0x5
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   12....       LCALL     ?Subroutine26 & 0xFFFF
    467          
    468            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    469                                    COMMAND_LIGHTING_STEP_COLOR, TRUE,
    470                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 6, buf );
   \                     ??CrossCallReturnLabel_91:
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   75..06       MOV       ?V0,#0x6
   \   000051   75..00       MOV       ?V1,#0x0
   \   000054   78..         MOV       R0,#?V0
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000059   7419         MOV       A,#0x19
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000064   E4           CLR       A
   \   000065   F5..         MOV       ?V0,A
   \   000067   78..         MOV       R0,#?V0
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006C   741B         MOV       A,#0x1b
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000077   75..00       MOV       ?V0,#0x0
   \   00007A   78..         MOV       R0,#?V0
   \   00007C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007F   75..01       MOV       ?V0,#0x1
   \   000082   78..         MOV       R0,#?V0
   \   000084   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000087   75..09       MOV       ?V0,#0x9
   \   00008A   02....       LJMP      ?Subroutine1 & 0xFFFF
    471          }
    472          
    473          /*********************************************************************
    474           * @fn      zclLighting_ColorControl_Send_MoveToColorTemperatureCmd
    475           *
    476           * @brief   Call to send out a Move To Color Temperature Command
    477           *
    478           * @param   srcEP - Sending application's endpoint
    479           * @param   dstAddr - where you want the message to go
    480           * @param   colorTemperature - a target color temperature
    481           * @param   transitionTime -  time to perform the color change, equal of
    482           *                            the value of the field in 1/10 seconds
    483           * @param   disableDefaultRsp - whether to disable the Default Response command
    484           * @param   seqNum - sequence number
    485           *
    486           * @return  ZStatus_t
    487           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    488          ZStatus_t zclLighting_ColorControl_Send_MoveToColorTemperatureCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_MoveToColorTemperatureCmd:
    489                                                                 uint16 colorTemperature, uint16 transitionTime,
    490                                                                 uint8 disableDefaultRsp, uint8 seqNum )
    491          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    492            uint8 buf[4];
    493          
    494            buf[0] = LO_UINT16( colorTemperature );
   \   00000C   EC           MOV       A,R4
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
    495            buf[1] = HI_UINT16( colorTemperature );
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   ED           MOV       A,R5
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   740E         MOV       A,#0xe
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ?Subroutine11 & 0xFFFF
    496            buf[2] = LO_UINT16( transitionTime );
   \                     ??CrossCallReturnLabel_29:
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E8           MOV       A,R0
   \   000027   F0           MOVX      @DPTR,A
    497            buf[3] = HI_UINT16( transitionTime );
   \   000028   7403         MOV       A,#0x3
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   12....       LCALL     ?Subroutine26 & 0xFFFF
    498          
    499            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    500                                    COMMAND_LIGHTING_MOVE_TO_COLOR_TEMPERATURE, TRUE,
    501                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 4, buf );
   \                     ??CrossCallReturnLabel_92:
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   75..04       MOV       ?V0,#0x4
   \   000036   75..00       MOV       ?V1,#0x0
   \   000039   78..         MOV       R0,#?V0
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   7415         MOV       A,#0x15
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000049   E4           CLR       A
   \   00004A   F5..         MOV       ?V0,A
   \   00004C   78..         MOV       R0,#?V0
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   7417         MOV       A,#0x17
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005C   75..00       MOV       ?V0,#0x0
   \   00005F   78..         MOV       R0,#?V0
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000064   75..01       MOV       ?V0,#0x1
   \   000067   78..         MOV       R0,#?V0
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006C   75..0A       MOV       ?V0,#0xa
   \   00006F   02....       LJMP      ?Subroutine5 & 0xFFFF
    502          }
    503          
    504          #ifdef ZCL_LIGHT_LINK_ENHANCE
    505          /*********************************************************************
    506           * @fn      zclLighting_ColorControl_Send_EnhancedMoveToHueCmd
    507           *
    508           * @brief   Call to send out an Enhanced Move To Hue Command
    509           *
    510           * @param   srcEP - Sending application's endpoint
    511           * @param   dstAddr - where you want the message to go
    512           * @param   enhancedHue - a target extended hue for lamp
    513           * @param   direction - direction of hue change
    514           * @param   transitionTime -  time to perform the color change, equal of
    515           *                            the value of the field in 1/10 seconds
    516           * @param   disableDefaultRsp - whether to disable the Default Response command
    517           * @param   seqNum - sequence number
    518           *
    519           * @return  ZStatus_t
    520           */
    521          ZStatus_t zclLighting_ColorControl_Send_EnhancedMoveToHueCmd( uint8 srcEP, afAddrType_t *dstAddr,
    522                                                                        uint16 enhancedHue, uint8 direction,
    523                                                                        uint16 transitionTime, uint8 disableDefaultRsp,
    524                                                                        uint8 seqNum )
    525          {
    526            uint8 buf[5];
    527          
    528            buf[0] = LO_UINT16( enhancedHue );
    529            buf[1] = HI_UINT16( enhancedHue );
    530            buf[2] = direction;
    531            buf[3] = LO_UINT16( transitionTime );
    532            buf[4] = HI_UINT16( transitionTime );
    533          
    534            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    535                                    COMMAND_LIGHTING_ENHANCED_MOVE_TO_HUE, TRUE,
    536                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 5, buf );
    537          }
    538          
    539          /*********************************************************************
    540           * @fn      zclLighting_ColorControl_Send_EnhancedMoveHueCmd
    541           *
    542           * @brief   Call to send out an Enhanced Move Hue Command
    543           *
    544           * @param   srcEP - Sending application's endpoint
    545           * @param   dstAddr - where you want the message to go
    546           * @param   moveMode - LIGHTING_MOVE_HUE_STOP, LIGHTING_MOVE_HUE_UP,
    547           *                     LIGHTING_MOVE_HUE_DOWN
    548           * @param   rate - the movement in steps per second, where step is
    549           *                 a change in the device's hue of one unit
    550           * @param   disableDefaultRsp - whether to disable the Default Response command
    551           * @param   seqNum - sequence number
    552           *
    553           * @return  ZStatus_t
    554           */
    555          ZStatus_t zclLighting_ColorControl_Send_EnhancedMoveHueCmd( uint8 srcEP, afAddrType_t *dstAddr,
    556                                                                      uint8 moveMode, uint16 rate,
    557                                                                      uint8 disableDefaultRsp, uint8 seqNum )
    558          {
    559            uint8 buf[3];
    560          
    561            buf[0] = moveMode;
    562            buf[1] = LO_UINT16( rate );
    563            buf[2] = HI_UINT16( rate );
    564          
    565            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    566                                    COMMAND_LIGHTING_ENHANCED_MOVE_HUE, TRUE,
    567                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 3, buf );
    568          }
    569          
    570          /*********************************************************************
    571           * @fn      zclLighting_ColorControl_Send_EnhancedStepHueCmd
    572           *
    573           * @brief   Call to send out an Enhanced Step Hue Command
    574           *
    575           * @param   srcEP - Sending application's endpoint
    576           * @param   dstAddr - where you want the message to go
    577           * @param   stepMode -	LIGHTING_STEP_HUE_UP, LIGHTING_STEP_HUE_DOWN
    578           * @param   stepSize -  change to the current value of the device's hue
    579           * @param   transitionTime - the movement in steps per 1/10 second
    580           * @param   disableDefaultRsp - whether to disable the Default Response command
    581           * @param   seqNum - sequence number
    582           *
    583           * @return  ZStatus_t
    584           */
    585          ZStatus_t zclLighting_ColorControl_Send_EnhancedStepHueCmd( uint8 srcEP, afAddrType_t *dstAddr,
    586                                            uint8 stepMode, uint16 stepSize, uint16 transitionTime,
    587                                            uint8 disableDefaultRsp, uint8 seqNum )
    588          {
    589            uint8 buf[5];
    590          
    591            buf[0] = stepMode;
    592            buf[1] = LO_UINT16( stepSize );
    593            buf[2] = HI_UINT16( stepSize );
    594            buf[3] = LO_UINT16( transitionTime );
    595            buf[4] = HI_UINT16( transitionTime );
    596          
    597            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    598                                    COMMAND_LIGHTING_ENHANCED_STEP_HUE, TRUE,
    599                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 5, buf );
    600          }
    601          
    602          /*********************************************************************
    603           * @fn      zclLighting_ColorControl_Send_EnhancedMoveToHueAndSaturationCmd
    604           *
    605           * @brief   Call to send out an Enhanced Move To Hue And Saturation Command
    606           *
    607           * @param   srcEP - Sending application's endpoint
    608           * @param   dstAddr - where you want the message to go
    609           * @param   Enhanced hue - a target Enhanced hue for lamp
    610           * @param   saturation - a target saturation
    611           * @param   transitionTime -  time to move, equal of the value of the field in 1/10 seconds
    612           * @param   disableDefaultRsp - whether to disable the Default Response command
    613           * @param   seqNum - sequence number
    614           *
    615           * @return  ZStatus_t
    616           */
    617          ZStatus_t zclLighting_ColorControl_Send_EnhancedMoveToHueAndSaturationCmd( uint8 srcEP, afAddrType_t *dstAddr,
    618                                                            uint16 enhancedHue, uint8 saturation, uint16 transitionTime,
    619                                                            uint8 disableDefaultRsp, uint8 seqNum )
    620          {
    621            uint8 buf[5];
    622          
    623            buf[0] = LO_UINT16( enhancedHue );
    624            buf[1] = HI_UINT16( enhancedHue );
    625            buf[2] = saturation;
    626            buf[3] = LO_UINT16( transitionTime );
    627            buf[4] = HI_UINT16( transitionTime );
    628          
    629            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    630                                    COMMAND_LIGHTING_ENHANCED_MOVE_TO_HUE_AND_SATURATION, TRUE,
    631                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 5, buf );
    632          }
    633          
    634          /*********************************************************************
    635           * @fn      zclLighting_ColorControl_Send_ColorLoopSetCmd
    636           *
    637           * @brief   Call to send out a Color Loop Set Command
    638           *
    639           * @param   srcEP - Sending application's endpoint
    640           * @param   dstAddr - where you want the message to go
    641           * @param   updateFlags - which color loop attributes to update before the color loop is started.
    642           * @param   action - action to take for the color loop
    643           * @param   direction - direction for the color loop (decrement or increment)
    644           * @param   time - number of seconds over which to perform a full color loop
    645           * @param   startHue - starting hue to use for the color loop
    646           * @param   disableDefaultRsp - whether to disable the Default Response command
    647           * @param   seqNum - sequence number
    648           *
    649           * @return  ZStatus_t
    650           */
    651          ZStatus_t zclLighting_ColorControl_Send_ColorLoopSetCmd(uint8 srcEP, afAddrType_t *dstAddr,
    652                                                            zclCCColorLoopSet_updateFlags_t updateFlags, uint8 action,
    653                                                            uint8 direction, uint16 time, uint16 startHue,
    654                                                            uint8 disableDefaultRsp, uint8 seqNum)
    655          {
    656            uint8 buf[7];
    657          
    658            buf[0] = updateFlags.byte;
    659            buf[1] = action;
    660            buf[2] = direction;
    661            buf[3] = LO_UINT16( time );
    662            buf[4] = HI_UINT16( time );
    663            buf[5] = LO_UINT16( startHue );
    664            buf[6] = HI_UINT16( startHue );
    665          
    666            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    667                                    COMMAND_LIGHTING_COLOR_LOOP_SET, TRUE,
    668                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 7, buf );
    669          }
    670          #endif //ZCL_LIGHT_LINK_ENHANCE
    671          
    672          /*********************************************************************
    673           * @fn      zclLighting_FindCallbacks
    674           *
    675           * @brief   Find the callbacks for an endpoint
    676           *
    677           * @param   endpoint - endpoint to find the application callbacks for
    678           *
    679           * @return  pointer to the callbacks
    680           */
    681          static zclLighting_AppCallbacks_t *zclLighting_FindCallbacks( uint8 endpoint )
    682          {
    683            zclLightingCBRec_t *pCBs;
    684          
    685            pCBs = zclLightingCBs;
    686            while ( pCBs != NULL )
    687            {
    688              if ( pCBs->endpoint == endpoint )
    689                return ( pCBs->CBs );
    690              pCBs = pCBs->next;
    691            }
    692            return ( (zclLighting_AppCallbacks_t *)NULL );
    693          }
    694          
    695          /*********************************************************************
    696           * @fn      zclLighting_HdlIncoming
    697           *
    698           * @brief   Callback from ZCL to process incoming Commands specific
    699           *          to this cluster library or Profile commands for attributes
    700           *          that aren't in the attribute list
    701           *
    702           * @param   pInMsg - pointer to the incoming message
    703           *
    704           * @return  ZStatus_t
    705           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    706          static ZStatus_t zclLighting_HdlIncoming( zclIncoming_t *pInMsg )
   \                     zclLighting_HdlIncoming:
    707          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    708            ZStatus_t stat = ZSuccess;
    709          
    710          #if defined ( INTER_PAN )
    711            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
    712              return ( stat ); // Cluster not supported thru Inter-PAN
    713          #endif
    714            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F8           MOV       R0,A
   \   00000D   5403         ANL       A,#0x3
   \   00000F   6401         XRL       A,#0x1
   \   000011   703D         JNZ       ??zclLighting_HdlIncoming_0
    715            {
    716              // Is this a manufacturer specific command?
    717              if ( pInMsg->hdr.fc.manuSpecific == 0 )
   \   000013   E8           MOV       A,R0
   \   000014   5404         ANL       A,#0x4
   \   000016   7038         JNZ       ??zclLighting_HdlIncoming_0
    718              {
    719                stat = zclLighting_HdlInSpecificCommands( pInMsg );
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   12....       LCALL     ?Subroutine21 & 0xFFFF
    720              }
    721              else
    722              {
    723                // We don't support any manufacturer specific command.
    724                stat = ZFailure;
    725              }
    726            }
   \                     ??CrossCallReturnLabel_54:
   \   00001F   E8           MOV       A,R0
   \   000020   FE           MOV       R6,A
   \   000021   E9           MOV       A,R1
   \   000022   FF           MOV       R7,A
   \   000023   EE           MOV       A,R6
   \   000024   2414         ADD       A,#0x14
   \   000026   F582         MOV       DPL,A
   \   000028   E4           CLR       A
   \   000029   3F           ADDC      A,R7
   \   00002A   F583         MOV       DPH,A
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FC           MOV       R4,A
   \   00002E   90....       MOV       DPTR,#zclLightingCBs
   \                     ??zclLighting_HdlIncoming_1:
   \   000031   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000034   601A         JZ        ??zclLighting_HdlIncoming_0
   \   000036   8882         MOV       DPL,R0
   \   000038   8983         MOV       DPH,R1
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   6C           XRL       A,R4
   \   00003E   8882         MOV       DPL,R0
   \   000040   8983         MOV       DPH,R1
   \   000042   70ED         JNZ       ??zclLighting_HdlIncoming_1
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   FC           MOV       R4,A
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   FD           MOV       R5,A
   \   00004C   EC           MOV       A,R4
   \   00004D   4D           ORL       A,R5
   \   00004E   7004         JNZ       ??zclLighting_HdlIncoming_2
   \                     ??zclLighting_HdlIncoming_0:
   \   000050   7901         MOV       R1,#0x1
   \   000052   801A         SJMP      ??zclLighting_HdlIncoming_3
   \                     ??zclLighting_HdlIncoming_2:
   \   000054   8E82         MOV       DPL,R6
   \   000056   8F83         MOV       DPH,R7
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   7004         JNZ       ??zclLighting_HdlIncoming_4
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   6403         XRL       A,#0x3
   \                     ??zclLighting_HdlIncoming_4:
   \   000063   7006         JNZ       ??zclLighting_HdlIncoming_5
   \   000065                ; Setup parameters for call to function zclLighting_ProcessInColorControlCmds
   \   000065   12....       LCALL     `??zclLighting_ProcessInColorControlCmds::?relay`; Banked call to: zclLighting_ProcessInColorControlCmds
   \   000068   E9           MOV       A,R1
   \   000069   8002         SJMP      ??zclLighting_HdlIncoming_6
   \                     ??zclLighting_HdlIncoming_5:
   \   00006B   7401         MOV       A,#0x1
   \                     ??zclLighting_HdlIncoming_6:
   \   00006D   F9           MOV       R1,A
    727            else
    728            {
    729              // Handle all the normal (Read, Write...) commands -- should never get here
    730              stat = ZFailure;
    731            }
    732            return ( stat );
   \                     ??zclLighting_HdlIncoming_3:
   \   00006E   02....       LJMP      ??Subroutine45_0 & 0xFFFF
    733          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET
    734          
    735          /*********************************************************************
    736           * @fn      zclLighting_HdlInSpecificCommands
    737           *
    738           * @brief   Callback from ZCL to process incoming Commands specific
    739           *          to this cluster library
    740          
    741           * @param   pInMsg - pointer to the incoming message
    742           *
    743           * @return  ZStatus_t
    744           */
    745          static ZStatus_t zclLighting_HdlInSpecificCommands( zclIncoming_t *pInMsg )
    746          {
    747            ZStatus_t stat = ZSuccess;
    748            zclLighting_AppCallbacks_t *pCBs;
    749          
    750            // make sure endpoint exists
    751            pCBs = zclLighting_FindCallbacks( pInMsg->msg->endPoint );
    752            if (pCBs == NULL )
    753              return ( ZFailure );
    754          
    755            switch ( pInMsg->msg->clusterId )
    756            {
    757              case ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL:
    758                stat = zclLighting_ProcessInColorControlCmds( pInMsg, pCBs );
    759                break;
    760          
    761              case ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG:
    762                // no commands
    763              default:
    764                stat = ZFailure;
    765                break;
    766            }
    767          
    768            return ( stat );
    769          }
    770          
    771          /*********************************************************************
    772           * @fn      zclLighting_ProcessInColorControlCmds
    773           *
    774           * @brief   Callback from ZCL to process incoming Commands specific
    775           *          to this cluster library on a command ID basis
    776          
    777           * @param   pInMsg - pointer to the incoming message
    778           * @param   pCBs - pointer to the application callbacks
    779           *
    780           * @return  ZStatus_t
    781           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    782          static ZStatus_t zclLighting_ProcessInColorControlCmds( zclIncoming_t *pInMsg,
   \                     zclLighting_ProcessInColorControlCmds:
    783                                                       zclLighting_AppCallbacks_t *pCBs )
    784          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV       A,#-0xf
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    785            ZStatus_t stat;
    786          
    787            switch ( pInMsg->hdr.commandID )
   \   00000A   EA           MOV       A,R2
   \   00000B   2408         ADD       A,#0x8
   \   00000D   F8           MOV       R0,A
   \   00000E   E4           CLR       A
   \   00000F   3B           ADDC      A,R3
   \   000010   F9           MOV       R1,A
   \   000011   E8           MOV       A,R0
   \   000012   FE           MOV       R6,A
   \   000013   E9           MOV       A,R1
   \   000014   FF           MOV       R7,A
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   603F         JZ        ??zclLighting_ProcessInColorControlCmds_0
   \   000023   14           DEC       A
   \   000024   7003         JNZ       $+5
   \   000026   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_1 & 0xFFFF
   \   000029   14           DEC       A
   \   00002A   7003         JNZ       $+5
   \   00002C   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_2 & 0xFFFF
   \   00002F   14           DEC       A
   \   000030   7003         JNZ       $+5
   \   000032   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_3 & 0xFFFF
   \   000035   14           DEC       A
   \   000036   7003         JNZ       $+5
   \   000038   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_4 & 0xFFFF
   \   00003B   14           DEC       A
   \   00003C   7003         JNZ       $+5
   \   00003E   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_5 & 0xFFFF
   \   000041   14           DEC       A
   \   000042   7003         JNZ       $+5
   \   000044   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_6 & 0xFFFF
   \   000047   14           DEC       A
   \   000048   7003         JNZ       $+5
   \   00004A   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_7 & 0xFFFF
   \   00004D   14           DEC       A
   \   00004E   7003         JNZ       $+5
   \   000050   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_8 & 0xFFFF
   \   000053   14           DEC       A
   \   000054   7003         JNZ       $+5
   \   000056   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_9 & 0xFFFF
   \   000059   14           DEC       A
   \   00005A   7003         JNZ       $+5
   \   00005C   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_10 & 0xFFFF
   \   00005F   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_11 & 0xFFFF
    788            {
    789              case COMMAND_LIGHTING_MOVE_TO_HUE:
    790                stat = zclLighting_ProcessInCmd_ColorControl_MoveToHue( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_0:
   \   000062   8C82         MOV       DPL,R4
   \   000064   8D83         MOV       DPH,R5
   \   000066   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000069   6043         JZ        ??zclLighting_ProcessInColorControlCmds_12
   \   00006B   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00006E   85..82       MOV       DPL,?XSP + 0
   \   000071   85..83       MOV       DPH,?XSP + 1
   \   000074   F0           MOVX      @DPTR,A
   \   000075   8E82         MOV       DPL,R6
   \   000077   8F83         MOV       DPH,R7
   \   000079   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   C0E0         PUSH      A
   \   000080   7401         MOV       A,#0x1
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   D0E0         POP       A
   \   000087   F0           MOVX      @DPTR,A
   \   000088   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00008B   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   F9           MOV       R1,A
   \   000090   EA           MOV       A,R2
   \   000091   F8           MOV       R0,A
   \   000092   7402         MOV       A,#0x2
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   E8           MOV       A,R0
   \   000098   F0           MOVX      @DPTR,A
   \   000099   A3           INC       DPTR
   \   00009A   E9           MOV       A,R1
   \   00009B   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00009E   7003         JNZ       $+5
   \   0000A0   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_13 & 0xFFFF
   \   0000A3                ; Setup parameters for indirect call
   \   0000A3   AA..         MOV       R2,?XSP + 0
   \   0000A5   AB..         MOV       R3,?XSP + 1
   \   0000A7   8C82         MOV       DPL,R4
   \   0000A9   8D83         MOV       DPH,R5
   \   0000AB   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_14 & 0xFFFF
   \                     ??zclLighting_ProcessInColorControlCmds_12:
   \   0000AE   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_11 & 0xFFFF
    791                break;
    792          
    793              case COMMAND_LIGHTING_MOVE_HUE:
    794                stat = zclLighting_ProcessInCmd_ColorControl_MoveHue( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_1:
   \   0000B1   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000B4   C0E0         PUSH      A
   \   0000B6   7407         MOV       A,#0x7
   \   0000B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BB   D0E0         POP       A
   \   0000BD   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   E8           MOV       A,R0
   \   0000C4   F0           MOVX      @DPTR,A
   \   0000C5   7008         JNZ       ??zclLighting_ProcessInColorControlCmds_15
   \   0000C7   7407         MOV       A,#0x7
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   7071         JNZ       ??zclLighting_ProcessInColorControlCmds_16
   \                     ??zclLighting_ProcessInColorControlCmds_15:
   \   0000CF   8C82         MOV       DPL,R4
   \   0000D1   8D83         MOV       DPH,R5
   \   0000D3   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000D6   707C         JNZ       ??zclLighting_ProcessInColorControlCmds_17
   \   0000D8                ; Setup parameters for indirect call
   \   0000D8   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_11 & 0xFFFF
    795                break;
    796          
    797              case COMMAND_LIGHTING_STEP_HUE:
    798                stat = zclLighting_ProcessInCmd_ColorControl_StepHue( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_2:
   \   0000DB   EC           MOV       A,R4
   \   0000DC   2404         ADD       A,#0x4
   \   0000DE   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0000E1   6003         JZ        $+5
   \   0000E3   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_18 & 0xFFFF
   \   0000E6   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_11 & 0xFFFF
    799                break;
    800          
    801              case COMMAND_LIGHTING_MOVE_TO_SATURATION:
    802                stat = zclLighting_ProcessInCmd_ColorControl_MoveToSaturation( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_3:
   \   0000E9   EC           MOV       A,R4
   \   0000EA   2406         ADD       A,#0x6
   \   0000EC   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0000EF   602E         JZ        ??zclLighting_ProcessInColorControlCmds_19
   \   0000F1   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000F4   C0E0         PUSH      A
   \   0000F6   7404         MOV       A,#0x4
   \   0000F8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FB   D0E0         POP       A
   \   0000FD   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000100   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000103   E0           MOVX      A,@DPTR
   \   000104   FB           MOV       R3,A
   \   000105   EC           MOV       A,R4
   \   000106   FA           MOV       R2,A
   \   000107   7405         MOV       A,#0x5
   \   000109   12....       LCALL     ?XSTACK_DISP0_8
   \   00010C   EA           MOV       A,R2
   \   00010D   F0           MOVX      @DPTR,A
   \   00010E   A3           INC       DPTR
   \   00010F   EB           MOV       A,R3
   \   000110   F0           MOVX      @DPTR,A
   \   000111   7404         MOV       A,#0x4
   \   000113   12....       LCALL     ?XSTACK_DISP0_8
   \   000116   E0           MOVX      A,@DPTR
   \   000117   F4           CPL       A
   \   000118   7003         JNZ       $+5
   \   00011A   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_13 & 0xFFFF
   \   00011D                ; Setup parameters for indirect call
   \   00011D   806F         SJMP      ??zclLighting_ProcessInColorControlCmds_20
   \                     ??zclLighting_ProcessInColorControlCmds_19:
   \   00011F   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_11 & 0xFFFF
    803                break;
    804          
    805              case COMMAND_LIGHTING_MOVE_SATURATION:
    806                stat = zclLighting_ProcessInCmd_ColorControl_MoveSaturation( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_4:
   \   000122   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000125   C0E0         PUSH      A
   \   000127   7407         MOV       A,#0x7
   \   000129   12....       LCALL     ?XSTACK_DISP0_8
   \   00012C   D0E0         POP       A
   \   00012E   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000131   12....       LCALL     ?XSTACK_DISP0_8
   \   000134   E8           MOV       A,R0
   \   000135   F0           MOVX      @DPTR,A
   \   000136   700D         JNZ       ??zclLighting_ProcessInColorControlCmds_21
   \   000138   7407         MOV       A,#0x7
   \   00013A   12....       LCALL     ?XSTACK_DISP0_8
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   6005         JZ        ??zclLighting_ProcessInColorControlCmds_21
   \                     ??zclLighting_ProcessInColorControlCmds_16:
   \   000140   7985         MOV       R1,#-0x7b
   \   000142   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_22 & 0xFFFF
   \                     ??zclLighting_ProcessInColorControlCmds_21:
   \   000145   8C82         MOV       DPL,R4
   \   000147   8D83         MOV       DPH,R5
   \   000149   A3           INC       DPTR
   \   00014A   A3           INC       DPTR
   \   00014B   A3           INC       DPTR
   \   00014C   A3           INC       DPTR
   \   00014D   A3           INC       DPTR
   \   00014E   A3           INC       DPTR
   \   00014F   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000152   6008         JZ        ??zclLighting_ProcessInColorControlCmds_23
   \   000154                ; Setup parameters for indirect call
   \                     ??zclLighting_ProcessInColorControlCmds_17:
   \   000154   7407         MOV       A,#0x7
   \   000156   12....       LCALL     ?XSTACK_DISP101_8
   \   000159   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_24 & 0xFFFF
   \                     ??zclLighting_ProcessInColorControlCmds_23:
   \   00015C   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_11 & 0xFFFF
    807                break;
    808          
    809              case COMMAND_LIGHTING_STEP_SATURATION:
    810                stat = zclLighting_ProcessInCmd_ColorControl_StepSaturation( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_5:
   \   00015F   EC           MOV       A,R4
   \   000160   240A         ADD       A,#0xa
   \   000162   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000165   602E         JZ        ??zclLighting_ProcessInColorControlCmds_25
   \                     ??zclLighting_ProcessInColorControlCmds_18:
   \   000167   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00016A   C0E0         PUSH      A
   \   00016C   7404         MOV       A,#0x4
   \   00016E   12....       LCALL     ?XSTACK_DISP0_8
   \   000171   D0E0         POP       A
   \   000173   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000176   C0E0         PUSH      A
   \   000178   7405         MOV       A,#0x5
   \   00017A   12....       LCALL     ?XSTACK_DISP0_8
   \   00017D   D0E0         POP       A
   \   00017F   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000182   A3           INC       DPTR
   \   000183   E0           MOVX      A,@DPTR
   \   000184   C0E0         PUSH      A
   \   000186   7406         MOV       A,#0x6
   \   000188   12....       LCALL     ?XSTACK_DISP0_8
   \   00018B   D0E0         POP       A
   \   00018D   F0           MOVX      @DPTR,A
   \   00018E                ; Setup parameters for indirect call
   \                     ??zclLighting_ProcessInColorControlCmds_20:
   \   00018E   7404         MOV       A,#0x4
   \   000190   12....       LCALL     ?XSTACK_DISP101_8
   \   000193   8045         SJMP      ??zclLighting_ProcessInColorControlCmds_26
   \                     ??zclLighting_ProcessInColorControlCmds_25:
   \   000195   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_11 & 0xFFFF
    811                break;
    812          
    813              case COMMAND_LIGHTING_MOVE_TO_HUE_AND_SATURATION:
    814                stat = zclLighting_ProcessInCmd_ColorControl_MoveToHueAndSaturation( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_6:
   \   000198   EC           MOV       A,R4
   \   000199   240C         ADD       A,#0xc
   \   00019B   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00019E   6047         JZ        ??zclLighting_ProcessInColorControlCmds_27
   \   0001A0   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0001A3   85..82       MOV       DPL,?XSP + 0
   \   0001A6   85..83       MOV       DPH,?XSP + 1
   \   0001A9   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0001AC   C0E0         PUSH      A
   \   0001AE   7401         MOV       A,#0x1
   \   0001B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B3   D0E0         POP       A
   \   0001B5   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0001B8   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0001BB   E0           MOVX      A,@DPTR
   \   0001BC   FB           MOV       R3,A
   \   0001BD   EC           MOV       A,R4
   \   0001BE   FA           MOV       R2,A
   \   0001BF   7402         MOV       A,#0x2
   \   0001C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C4   EA           MOV       A,R2
   \   0001C5   F0           MOVX      @DPTR,A
   \   0001C6   A3           INC       DPTR
   \   0001C7   EB           MOV       A,R3
   \   0001C8   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0001CB   6017         JZ        ??zclLighting_ProcessInColorControlCmds_28
   \   0001CD   7401         MOV       A,#0x1
   \   0001CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D2   E0           MOVX      A,@DPTR
   \   0001D3   F4           CPL       A
   \   0001D4   600E         JZ        ??zclLighting_ProcessInColorControlCmds_28
   \   0001D6                ; Setup parameters for indirect call
   \   0001D6   AA..         MOV       R2,?XSP + 0
   \   0001D8   AB..         MOV       R3,?XSP + 1
   \                     ??zclLighting_ProcessInColorControlCmds_26:
   \   0001DA   8882         MOV       DPL,R0
   \   0001DC   8983         MOV       DPH,R1
   \                     ??zclLighting_ProcessInColorControlCmds_14:
   \   0001DE   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0001E1   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_24 & 0xFFFF
   \                     ??zclLighting_ProcessInColorControlCmds_28:
   \   0001E4   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_13 & 0xFFFF
   \                     ??zclLighting_ProcessInColorControlCmds_27:
   \   0001E7   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_11 & 0xFFFF
    815                break;
    816          
    817              case COMMAND_LIGHTING_MOVE_TO_COLOR:
    818                stat = zclLighting_ProcessInCmd_ColorControl_MoveToColor( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_7:
   \   0001EA                ; Setup parameters for call to function zclLighting_ProcessInCmd_ColorControl_MoveToColor
   \   0001EA   12....       LCALL     ??zclLighting_ProcessInCmd_ColorControl_MoveToC; Banked call to: zclLighting_ProcessInCmd_ColorControl_MoveToColor
   \   0001ED   02....       LJMP      ??zclLighting_ProcessInColorControlCmds_29 & 0xFFFF
    819                break;
    820          
    821              case COMMAND_LIGHTING_MOVE_COLOR:
    822                stat = zclLighting_ProcessInCmd_ColorControl_MoveColor( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_8:
   \   0001F0   EC           MOV       A,R4
   \   0001F1   2410         ADD       A,#0x10
   \   0001F3   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0001F6   601A         JZ        ??zclLighting_ProcessInColorControlCmds_30
   \   0001F8   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0001FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FE   E8           MOV       A,R0
   \   0001FF   F0           MOVX      @DPTR,A
   \   000200   A3           INC       DPTR
   \   000201   E9           MOV       A,R1
   \   000202   F0           MOVX      @DPTR,A
   \   000203                ; Setup parameters for indirect call
   \   000203   AA..         MOV       R2,?XSP + 0
   \   000205   AB..         MOV       R3,?XSP + 1
   \   000207   8C82         MOV       DPL,R4
   \   000209   8D83         MOV       DPH,R5
   \   00020B   12....       LCALL     ?CALL_IND
   \   00020E   7900         MOV       R1,#0x0
   \   000210   8077         SJMP      ??zclLighting_ProcessInColorControlCmds_22
   \                     ??zclLighting_ProcessInColorControlCmds_30:
   \   000212   8073         SJMP      ??zclLighting_ProcessInColorControlCmds_11
    823                break;
    824          
    825              case COMMAND_LIGHTING_STEP_COLOR:
    826                stat = zclLighting_ProcessInCmd_ColorControl_StepColor( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_9:
   \   000214   EC           MOV       A,R4
   \   000215   2412         ADD       A,#0x12
   \   000217   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00021A   606B         JZ        ??zclLighting_ProcessInColorControlCmds_11
   \   00021C   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00021F   E0           MOVX      A,@DPTR
   \   000220   FE           MOV       R6,A
   \   000221   A3           INC       DPTR
   \   000222   E0           MOVX      A,@DPTR
   \   000223   FB           MOV       R3,A
   \   000224   EE           MOV       A,R6
   \   000225   FA           MOV       R2,A
   \   000226   7409         MOV       A,#0x9
   \   000228   12....       LCALL     ?XSTACK_DISP0_8
   \   00022B   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00022E   E0           MOVX      A,@DPTR
   \   00022F   FE           MOV       R6,A
   \   000230   8882         MOV       DPL,R0
   \   000232   8983         MOV       DPH,R1
   \   000234   A3           INC       DPTR
   \   000235   A3           INC       DPTR
   \   000236   A3           INC       DPTR
   \   000237   E0           MOVX      A,@DPTR
   \   000238   FB           MOV       R3,A
   \   000239   EE           MOV       A,R6
   \   00023A   FA           MOV       R2,A
   \   00023B   740B         MOV       A,#0xb
   \   00023D   12....       LCALL     ?XSTACK_DISP0_8
   \   000240   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000243   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000246   A3           INC       DPTR
   \   000247   A3           INC       DPTR
   \   000248   E0           MOVX      A,@DPTR
   \   000249   F9           MOV       R1,A
   \   00024A   EA           MOV       A,R2
   \   00024B   F8           MOV       R0,A
   \   00024C   740D         MOV       A,#0xd
   \   00024E   12....       LCALL     ?XSTACK_DISP0_8
   \   000251   E8           MOV       A,R0
   \   000252   F0           MOVX      @DPTR,A
   \   000253   A3           INC       DPTR
   \   000254   E9           MOV       A,R1
   \   000255   F0           MOVX      @DPTR,A
   \   000256                ; Setup parameters for indirect call
   \   000256   7409         MOV       A,#0x9
   \   000258   12....       LCALL     ?XSTACK_DISP101_8
   \   00025B   801F         SJMP      ??zclLighting_ProcessInColorControlCmds_31
    827                break;
    828          
    829              case COMMAND_LIGHTING_MOVE_TO_COLOR_TEMPERATURE:
    830                stat = zclLighting_ProcessInCmd_ColorControl_MoveToColorTemperature( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_10:
   \   00025D   EC           MOV       A,R4
   \   00025E   2414         ADD       A,#0x14
   \   000260   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000263   6022         JZ        ??zclLighting_ProcessInColorControlCmds_11
   \   000265   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000268   12....       LCALL     ?XSTACK_DISP0_8
   \   00026B   E8           MOV       A,R0
   \   00026C   F0           MOVX      @DPTR,A
   \   00026D   A3           INC       DPTR
   \   00026E   E9           MOV       A,R1
   \   00026F   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000272   4004         JC        ??zclLighting_ProcessInColorControlCmds_32
   \                     ??zclLighting_ProcessInColorControlCmds_13:
   \   000274   7987         MOV       R1,#-0x79
   \   000276   8011         SJMP      ??zclLighting_ProcessInColorControlCmds_22
   \                     ??zclLighting_ProcessInColorControlCmds_32:
   \   000278                ; Setup parameters for indirect call
   \   000278   AA..         MOV       R2,?XSP + 0
   \   00027A   AB..         MOV       R3,?XSP + 1
   \                     ??zclLighting_ProcessInColorControlCmds_31:
   \   00027C   8C82         MOV       DPL,R4
   \   00027E   8D83         MOV       DPH,R5
   \                     ??zclLighting_ProcessInColorControlCmds_24:
   \   000280   12....       LCALL     ?CALL_IND
   \                     ??zclLighting_ProcessInColorControlCmds_29:
   \   000283   E9           MOV       A,R1
   \   000284   F9           MOV       R1,A
   \   000285   8002         SJMP      ??zclLighting_ProcessInColorControlCmds_22
    831                break;
    832          
    833          #ifdef ZCL_LIGHT_LINK_ENHANCE
    834              case COMMAND_LIGHTING_ENHANCED_MOVE_TO_HUE:
    835                stat = zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHue( pInMsg, pCBs );
    836                break;
    837          
    838              case COMMAND_LIGHTING_ENHANCED_MOVE_HUE:
    839                stat = zclLighting_ProcessInCmd_ColorControl_EnhancedMoveHue( pInMsg, pCBs );
    840                break;
    841          
    842              case COMMAND_LIGHTING_ENHANCED_STEP_HUE:
    843                stat = zclLighting_ProcessInCmd_ColorControl_EnhancedStepHue( pInMsg, pCBs );
    844                break;
    845          
    846              case COMMAND_LIGHTING_ENHANCED_MOVE_TO_HUE_AND_SATURATION:
    847                stat = zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHueAndSaturation( pInMsg, pCBs );
    848                break;
    849          
    850              case COMMAND_LIGHTING_COLOR_LOOP_SET:
    851                stat = zclLighting_ProcessInCmd_ColorControl_ColorLoopSet( pInMsg, pCBs );
    852                break;
    853          
    854              case COMMAND_LIGHTING_STOP_MOVE_STEP:
    855                if ( pCBs->pfnColorControl_StopMoveStep ) // no payload to parse
    856                {
    857                  stat = pCBs->pfnColorControl_StopMoveStep();
    858                }
    859                break;
    860          #endif // ZCL_LIGHT_LINK_ENHANCE
    861          
    862              default:
    863                // Unknown command
    864                stat = ZFailure;
   \                     ??zclLighting_ProcessInColorControlCmds_11:
   \   000287   7901         MOV       R1,#0x1
    865                break;
    866            }
    867          
    868            return ( stat );
   \                     ??zclLighting_ProcessInColorControlCmds_22:
   \   000289   740F         MOV       A,#0xf
   \   00028B                REQUIRE ?Subroutine2
   \   00028B                ; // Fall through to label ?Subroutine2
    869          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine45_0
   \   000003                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F4           CPL       A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004                REQUIRE ??Subroutine46_0
   \   000004                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   FA           MOV       R2,A
   \   000004   8882         MOV       DPL,R0
   \   000006   8983         MOV       DPH,R1
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine47_0
   \   000004                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   8882         MOV       DPL,R0
   \   000007   8983         MOV       DPH,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F8           MOV       R0,A
   \   000007   7408         MOV       A,#0x8
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine48_0
   \   000004                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000005   E582         MOV       A,DPL
   \   000007   4583         ORL       A,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   FA           MOV       R2,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F583         MOV       DPH,A
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3D           ADDC      A,R5
   \   000004   F583         MOV       DPH,A
   \   000006   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000009   E8           MOV       A,R0
   \   00000A   FC           MOV       R4,A
   \   00000B   E9           MOV       A,R1
   \   00000C   FD           MOV       R5,A
   \   00000D   EC           MOV       A,R4
   \   00000E   4D           ORL       A,R5
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   3D           ADDC      A,R5
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   8983         MOV       DPH,R1
   \   000008                REQUIRE ??Subroutine49_0
   \   000008                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FE           MOV       R6,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FB           MOV       R3,A
   \   000008   EE           MOV       A,R6
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   A3           INC       DPTR
   \   000011   EB           MOV       A,R3
   \   000012   F0           MOVX      @DPTR,A
   \   000013   8882         MOV       DPL,R0
   \   000015   8983         MOV       DPH,R1
   \   000017   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   EA           MOV       A,R2
   \   00001D   F8           MOV       R0,A
   \   00001E   7402         MOV       A,#0x2
   \   000020   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   C3           CLR       C
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   94FF         SUBB      A,#-0x1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET
    870          
    871          /*********************************************************************
    872           * @fn      zclLighting_ProcessInCmd_ColorControl_MoveToHue
    873           *
    874           * @brief   Process in the received Move To Hue Command.
    875           *
    876           * @param   pInMsg - pointer to the incoming message
    877           * @param   pCBs - pointer to the application callbacks
    878           *
    879           * @return  ZStatus_t
    880           */
    881          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToHue( zclIncoming_t *pInMsg,
    882                                                                 zclLighting_AppCallbacks_t *pCBs )
    883          {
    884            if ( pCBs->pfnColorControl_MoveToHue )
    885            {
    886              zclCCMoveToHue_t cmd;
    887          
    888              cmd.hue = pInMsg->pData[0];
    889              cmd.direction = pInMsg->pData[1];
    890              cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
    891          
    892              if ( cmd.hue > LIGHTING_COLOR_HUE_MAX )
    893              {
    894                return ( ZCL_STATUS_INVALID_VALUE );
    895              }
    896          
    897              return ( pCBs->pfnColorControl_MoveToHue( &cmd ) );
    898            }
    899          
    900            return ( ZFailure );
    901          }
    902          
    903          /*********************************************************************
    904           * @fn      zclLighting_ProcessInCmd_ColorControl_MoveHue
    905           *
    906           * @brief   Process in the received Move Hue Command.
    907           *
    908           * @param   pInMsg - pointer to the incoming message
    909           * @param   pCBs - pointer to the application callbacks
    910           *
    911           * @return  ZStatus_t
    912           */
    913          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveHue( zclIncoming_t *pInMsg,
    914                                                               zclLighting_AppCallbacks_t *pCBs )
    915          {
    916            zclCCMoveHue_t cmd;
    917          
    918            cmd.moveMode = pInMsg->pData[0];
    919            cmd.rate = pInMsg->pData[1];
    920          
    921            // If the Rate field has a value of zero, the command has no effect and
    922            // a Default Response command is sent in response, with the status code
    923            // set to INVALID_FIELD.
    924            if ( ( cmd.rate == 0 ) && ( cmd.moveMode != LIGHTING_MOVE_HUE_STOP ) )
    925            {
    926              return ( ZCL_STATUS_INVALID_FIELD );
    927            }
    928          
    929            if ( pCBs->pfnColorControl_MoveHue )
    930              return ( pCBs->pfnColorControl_MoveHue( &cmd ) );
    931          
    932            return ( ZFailure );
    933          }
    934          
    935          /*********************************************************************
    936           * @fn      zclLighting_ProcessInCmd_ColorControl_StepHue
    937           *
    938           * @brief   Process in the received Step Hue Command.
    939           *
    940           * @param   pInMsg - pointer to the incoming message
    941           * @param   pCBs - pointer to the application callbacks
    942           *
    943           * @return  ZStatus_t
    944           */
    945          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_StepHue( zclIncoming_t *pInMsg,
    946                                                               zclLighting_AppCallbacks_t *pCBs )
    947          {
    948            if ( pCBs->pfnColorControl_StepHue )
    949            {
    950              zclCCStepHue_t cmd;
    951          
    952              cmd.stepMode = pInMsg->pData[0];
    953              cmd.stepSize = pInMsg->pData[1];
    954              cmd.transitionTime = pInMsg->pData[2];
    955          
    956              return ( pCBs->pfnColorControl_StepHue( &cmd ) );
    957            }
    958          
    959            return ( ZFailure );
    960          }
    961          
    962          /*********************************************************************
    963           * @fn      zclLighting_ProcessInCmd_ColorControl_MoveToSaturation
    964           *
    965           * @brief   Process in the received Move to Saturation Command.
    966           *
    967           * @param   pInMsg - pointer to the incoming message
    968           * @param   pCBs - pointer to the application callbacks
    969           *
    970           * @return  ZStatus_t
    971           */
    972          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToSaturation( zclIncoming_t *pInMsg,
    973                                                                        zclLighting_AppCallbacks_t *pCBs )
    974          {
    975            if ( pCBs->pfnColorControl_MoveToSaturation )
    976            {
    977              zclCCMoveToSaturation_t cmd;
    978          
    979              cmd.saturation = pInMsg->pData[0];
    980              cmd.transitionTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
    981          
    982              if ( cmd.saturation > LIGHTING_COLOR_SAT_MAX )
    983              {
    984                return ( ZCL_STATUS_INVALID_VALUE );
    985              }
    986              return ( pCBs->pfnColorControl_MoveToSaturation( &cmd ) );
    987            }
    988          
    989            return ( ZFailure );
    990          }
    991          
    992          /*********************************************************************
    993           * @fn      zclLighting_ProcessInCmd_ColorControl_MoveSaturation
    994           *
    995           * @brief   Process in the received Move Saturation Command.
    996           *
    997           * @param   pInMsg - pointer to the incoming message
    998           * @param   pCBs - pointer to the application callbacks
    999           *
   1000           * @return  ZStatus_t
   1001           */
   1002          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveSaturation( zclIncoming_t *pInMsg,
   1003                                                                      zclLighting_AppCallbacks_t *pCBs )
   1004          {
   1005            zclCCMoveSaturation_t cmd;
   1006          
   1007            cmd.moveMode = pInMsg->pData[0];
   1008            cmd.rate = pInMsg->pData[1];
   1009          
   1010            // If the Rate field has a value of zero, the command has no effect and
   1011            // a Default Response command is sent in response, with the status code
   1012            // set to INVALID_FIELD.
   1013            if ( ( cmd.rate == 0 ) && ( cmd.moveMode != LIGHTING_MOVE_SATURATION_STOP ) )
   1014            {
   1015              return ( ZCL_STATUS_INVALID_FIELD );
   1016            }
   1017          
   1018            if ( pCBs->pfnColorControl_MoveSaturation )
   1019              return ( pCBs->pfnColorControl_MoveSaturation( &cmd ) );
   1020          
   1021            return ( ZFailure );
   1022          }
   1023          
   1024          /*********************************************************************
   1025           * @fn      zclLighting_ProcessInCmd_ColorControl_StepSaturation
   1026           *
   1027           * @brief   Process in the received Step Saturation Command.
   1028           *
   1029           * @param   pInMsg - pointer to the incoming message
   1030           * @param   pCBs - pointer to the application callbacks
   1031           *
   1032           * @return  ZStatus_t
   1033           */
   1034          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_StepSaturation( zclIncoming_t *pInMsg,
   1035                                                                      zclLighting_AppCallbacks_t *pCBs )
   1036          {
   1037            if ( pCBs->pfnColorControl_StepSaturation )
   1038            {
   1039              zclCCStepSaturation_t cmd;
   1040          
   1041              cmd.stepMode = pInMsg->pData[0];
   1042              cmd.stepSize = pInMsg->pData[1];
   1043              cmd.transitionTime = pInMsg->pData[2];
   1044          
   1045              return ( pCBs->pfnColorControl_StepSaturation( &cmd ) );
   1046            }
   1047          
   1048            return ( ZFailure );
   1049          }
   1050          
   1051          /*********************************************************************
   1052           * @fn      zclLighting_ProcessInCmd_ColorControl_MoveToHueAndSaturation
   1053           *
   1054           * @brief   Process in the received Move To Hue And Saturation Command.
   1055           *
   1056           * @param   pInMsg - pointer to the incoming message
   1057           * @param   pCBs - pointer to the application callbacks
   1058           *
   1059           * @return  ZStatus_t
   1060           */
   1061          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToHueAndSaturation( zclIncoming_t *pInMsg,
   1062                                                                              zclLighting_AppCallbacks_t *pCBs )
   1063          {
   1064            if ( pCBs->pfnColorControl_MoveToHueAndSaturation )
   1065            {
   1066              zclCCMoveToHueAndSaturation_t cmd;
   1067          
   1068              cmd.hue = pInMsg->pData[0];
   1069              cmd.saturation = pInMsg->pData[1];
   1070              cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   1071          
   1072              if ( ( cmd.hue > LIGHTING_COLOR_HUE_MAX ) || ( cmd.saturation > LIGHTING_COLOR_SAT_MAX ) )
   1073              {
   1074                return ( ZCL_STATUS_INVALID_VALUE );
   1075              }
   1076          
   1077              return ( pCBs->pfnColorControl_MoveToHueAndSaturation( &cmd ) );
   1078            }
   1079          
   1080            return ( ZFailure );
   1081          }
   1082          
   1083          /*********************************************************************
   1084           * @fn      zclLighting_ProcessInCmd_ColorControl_MoveToColor
   1085           *
   1086           * @brief   Process in the received Move To Color Command.
   1087           *
   1088           * @param   pInMsg - pointer to the incoming message
   1089           * @param   pCBs - pointer to the application callbacks
   1090           *
   1091           * @return  ZStatus_t
   1092           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1093          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToColor( zclIncoming_t *pInMsg,
   \                     zclLighting_ProcessInCmd_ColorControl_MoveToColor:
   1094                                                                   zclLighting_AppCallbacks_t *pCBs )
   1095          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1096            if ( pCBs->pfnColorControl_MoveToColor )
   \   00000A   EC           MOV       A,R4
   \   00000B   240E         ADD       A,#0xe
   \   00000D   F582         MOV       DPL,A
   \   00000F   E4           CLR       A
   \   000010   3D           ADDC      A,R5
   \   000011   F583         MOV       DPH,A
   \   000013   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000016   6069         JZ        ??zclLighting_ProcessInCmd_ColorControl_MoveToC_1
   1097            {
   1098              zclCCMoveToColor_t cmd;
   1099          
   1100              cmd.colorX = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000027   E0           MOVX      A,@DPTR
   \   000028   FE           MOV       R6,A
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   FD           MOV       R5,A
   \   00002C   EE           MOV       A,R6
   \   00002D   85..82       MOV       DPL,?XSP + 0
   \   000030   85..83       MOV       DPH,?XSP + 1
   \   000033   12....       LCALL     ?Subroutine29 & 0xFFFF
   1101              cmd.colorY = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   \                     ??CrossCallReturnLabel_63:
   \   000036   E0           MOVX      A,@DPTR
   \   000037   FE           MOV       R6,A
   \   000038   8A82         MOV       DPL,R2
   \   00003A   8B83         MOV       DPH,R3
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   FD           MOV       R5,A
   \   000041   EE           MOV       A,R6
   \   000042   FC           MOV       R4,A
   \   000043   7402         MOV       A,#0x2
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   EC           MOV       A,R4
   \   000049   12....       LCALL     ?Subroutine29 & 0xFFFF
   1102              cmd.transitionTime = BUILD_UINT16( pInMsg->pData[4], pInMsg->pData[5] );
   \                     ??CrossCallReturnLabel_64:
   \   00004C   A3           INC       DPTR
   \   00004D   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   FB           MOV       R3,A
   \   000054   EC           MOV       A,R4
   \   000055   FA           MOV       R2,A
   \   000056   7404         MOV       A,#0x4
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   EA           MOV       A,R2
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   A3           INC       DPTR
   \   00005E   EB           MOV       A,R3
   \   00005F   12....       LCALL     ?Subroutine28 & 0xFFFF
   1103          
   1104              if ( ( cmd.colorX > LIGHTING_COLOR_CURRENT_X_MAX ) || ( cmd.colorY > LIGHTING_COLOR_CURRENT_Y_MAX ) )
   \                     ??CrossCallReturnLabel_61:
   \   000062   500C         JNC       ??zclLighting_ProcessInCmd_ColorControl_MoveToC_2
   \   000064   7402         MOV       A,#0x2
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   C3           CLR       C
   \   00006A   A3           INC       DPTR
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   94FF         SUBB      A,#-0x1
   \   00006E   4004         JC        ??zclLighting_ProcessInCmd_ColorControl_MoveToC_3
   1105              {
   1106                return ( ZCL_STATUS_INVALID_VALUE );
   \                     ??zclLighting_ProcessInCmd_ColorControl_MoveToC_2:
   \   000070   7987         MOV       R1,#-0x79
   \   000072   800F         SJMP      ??zclLighting_ProcessInCmd_ColorControl_MoveToC_4
   1107              }
   1108          
   1109              return ( pCBs->pfnColorControl_MoveToColor( &cmd ) );
   \                     ??zclLighting_ProcessInCmd_ColorControl_MoveToC_3:
   \   000074                ; Setup parameters for indirect call
   \   000074   AA..         MOV       R2,?XSP + 0
   \   000076   AB..         MOV       R3,?XSP + 1
   \   000078   8882         MOV       DPL,R0
   \   00007A   8983         MOV       DPH,R1
   \   00007C   12....       LCALL     ?CALL_IND
   \   00007F   8002         SJMP      ??zclLighting_ProcessInCmd_ColorControl_MoveToC_4
   1110            }
   1111          
   1112            return ( ZFailure );
   \                     ??zclLighting_ProcessInCmd_ColorControl_MoveToC_1:
   \   000081   7901         MOV       R1,#0x1
   \                     ??zclLighting_ProcessInCmd_ColorControl_MoveToC_4:
   \   000083   7406         MOV       A,#0x6
   \   000085   02....       LJMP      ?Subroutine2 & 0xFFFF
   1113          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   ED           MOV       A,R5
   \   000003   F0           MOVX      @DPTR,A
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclLighting_RegisterCmdCallbacks::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_RegisterCmdCallbacks

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclLighting_ColorControl_Send_MoveToHueCmd::?`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_MoveToHueCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclLighting_ColorControl_Send_MoveHueCmd::?re`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_MoveHueCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclLighting_ColorControl_Send_StepHueCmd::?re`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_StepHueCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_MoveToSaturatio:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_MoveToSaturationCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_MoveSaturationC:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_MoveSaturationCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_StepSaturationC:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_StepSaturationCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_MoveToHueAndSat:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclLighting_ColorControl_Send_MoveToColorCmd:`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_MoveToColorCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclLighting_ColorControl_Send_MoveColorCmd::?`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_MoveColorCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclLighting_ColorControl_Send_StepColorCmd::?`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_StepColorCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_MoveToColorTemp:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_MoveToColorTemperatureCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclLighting_HdlIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_HdlIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclLighting_ProcessInColorControlCmds::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ProcessInColorControlCmds

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ProcessInCmd_ColorControl_MoveToC:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ProcessInCmd_ColorControl_MoveToColor
   1114          
   1115          /*********************************************************************
   1116           * @fn      zclLighting_ProcessInCmd_ColorControl_MoveColor
   1117           *
   1118           * @brief   Process in the received Move Color Command.
   1119           *
   1120           * @param   pInMsg - pointer to the incoming message
   1121           * @param   pCBs - pointer to the application callbacks
   1122           *
   1123           * @return  ZStatus_t
   1124           */
   1125          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveColor( zclIncoming_t *pInMsg,
   1126                                                                 zclLighting_AppCallbacks_t *pCBs )
   1127          {
   1128            if ( pCBs->pfnColorControl_MoveColor )
   1129            {
   1130              zclCCMoveColor_t cmd;
   1131          
   1132              cmd.rateX = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1133              cmd.rateY = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   1134          
   1135              pCBs->pfnColorControl_MoveColor( &cmd );
   1136          
   1137              return ( ZSuccess );
   1138            }
   1139          
   1140            return ( ZFailure );
   1141          }
   1142          
   1143          /*********************************************************************
   1144           * @fn      zclLighting_ProcessInCmd_ColorControl_StepColor
   1145           *
   1146           * @brief   Process in the received Step Color Command.
   1147           *
   1148           * @param   pInMsg - pointer to the incoming message
   1149           * @param   pCBs - pointer to the application callbacks
   1150           *
   1151           * @return  ZStatus_t
   1152           */
   1153          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_StepColor( zclIncoming_t *pInMsg,
   1154                                                                 zclLighting_AppCallbacks_t *pCBs )
   1155          {
   1156            if ( pCBs->pfnColorControl_StepColor )
   1157            {
   1158              zclCCStepColor_t cmd;
   1159          
   1160              cmd.stepX = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1161              cmd.stepY = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   1162              cmd.transitionTime = BUILD_UINT16( pInMsg->pData[4], pInMsg->pData[5] );
   1163          
   1164              return ( pCBs->pfnColorControl_StepColor( &cmd ) );
   1165            }
   1166          
   1167            return ( ZFailure );
   1168          }
   1169          
   1170          /*********************************************************************
   1171           * @fn      zclLighting_ProcessInCmd_ColorControl_MoveToColorTemperature
   1172           *
   1173           * @brief   Process in the received Move to Color Temperature Command.
   1174           *
   1175           * @param   pInMsg - pointer to the incoming message
   1176           * @param   pCBs - pointer to the application callbacks
   1177           *
   1178           * @return  ZStatus_t
   1179           */
   1180          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToColorTemperature( zclIncoming_t *pInMsg,
   1181                                                                              zclLighting_AppCallbacks_t *pCBs )
   1182          {
   1183            if ( pCBs->pfnColorControl_MoveToColorTemperature )
   1184            {
   1185              zclCCMoveToColorTemperature_t cmd;
   1186          
   1187              cmd.colorTemperature = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1188              cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   1189          
   1190              if ( cmd.colorTemperature > LIGHTING_COLOR_TEMPERATURE_MAX )
   1191              {
   1192                return ( ZCL_STATUS_INVALID_VALUE );
   1193              }
   1194          
   1195              return ( pCBs->pfnColorControl_MoveToColorTemperature( &cmd ) );
   1196            }
   1197          
   1198            return ( ZFailure );
   1199          }
   1200          
   1201          #ifdef ZCL_LIGHT_LINK_ENHANCE
   1202          /*********************************************************************
   1203           * @fn      zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHue
   1204           *
   1205           * @brief   Process in the received Enhanced Move To Hue Command.
   1206           *
   1207           * @param   pInMsg - pointer to the incoming message
   1208           * @param   pCBs - pointer to the application callbacks
   1209           *
   1210           * @return  ZStatus_t
   1211           */
   1212          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHue( zclIncoming_t *pInMsg,
   1213                                                                         zclLighting_AppCallbacks_t *pCBs )
   1214          {
   1215            if ( pCBs->pfnColorControl_EnhancedMoveToHue )
   1216            {
   1217              zclCCEnhancedMoveToHue_t cmd;
   1218          
   1219              cmd.enhancedHue = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1220              cmd.direction = pInMsg->pData[2];
   1221              cmd.transitionTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
   1222          
   1223              return ( pCBs->pfnColorControl_EnhancedMoveToHue( &cmd ) );
   1224            }
   1225          
   1226            return ( ZFailure );
   1227          }
   1228          
   1229          /*********************************************************************
   1230           * @fn      zclLighting_ProcessInCmd_ColorControl_EnhancedMoveHue
   1231           *
   1232           * @brief   Process in the received Enhanced Move Hue Command.
   1233           *
   1234           * @param   pInMsg - pointer to the incoming message
   1235           * @param   pCBs - pointer to the application callbacks
   1236           *
   1237           * @return  ZStatus_t
   1238           */
   1239          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedMoveHue( zclIncoming_t *pInMsg,
   1240                                                                       zclLighting_AppCallbacks_t *pCBs )
   1241          {
   1242            zclCCEnhancedMoveHue_t cmd;
   1243          
   1244            cmd.moveMode = pInMsg->pData[0];
   1245            cmd.rate = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   1246          
   1247            // If the Rate field has a value of zero, the command has no effect and
   1248            // a Default Response command is sent in response, with the status code
   1249            // set to INVALID_FIELD.
   1250            if ( ( cmd.rate == 0 ) && ( cmd.moveMode != LIGHTING_MOVE_HUE_STOP ) )
   1251            {
   1252              return ( ZCL_STATUS_INVALID_FIELD );
   1253            }
   1254          
   1255            if ( pCBs->pfnColorControl_EnhancedMoveHue )
   1256            {
   1257              return ( pCBs->pfnColorControl_EnhancedMoveHue( &cmd ) );
   1258            }
   1259          
   1260            return ( ZFailure );
   1261          }
   1262          
   1263          /*********************************************************************
   1264           * @fn      zclLighting_ProcessInCmd_ColorControl_EnhancedStepHue
   1265           *
   1266           * @brief   Process in the received Enhanced Step Hue Command.
   1267           *
   1268           * @param   pInMsg - pointer to the incoming message
   1269           * @param   pCBs - pointer to the application callbacks
   1270           *
   1271           * @return  ZStatus_t
   1272           */
   1273          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedStepHue( zclIncoming_t *pInMsg,
   1274                                                                       zclLighting_AppCallbacks_t *pCBs )
   1275          {
   1276            if ( pCBs->pfnColorControl_EnhancedStepHue )
   1277            {
   1278              zclCCEnhancedStepHue_t cmd;
   1279          
   1280              cmd.stepMode = pInMsg->pData[0];
   1281              cmd.stepSize = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   1282              cmd.transitionTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
   1283          
   1284              return ( pCBs->pfnColorControl_EnhancedStepHue( &cmd ) );
   1285            }
   1286          
   1287            return ( ZFailure );
   1288          }
   1289          
   1290          /*********************************************************************
   1291           * @fn      zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHueAndSaturation
   1292           *
   1293           * @brief   Process in the received Enhanced Move To Hue And Saturation Command.
   1294           *
   1295           * @param   pInMsg - pointer to the incoming message
   1296           * @param   pCBs - pointer to the application callbacks
   1297           *
   1298           * @return  ZStatus_t
   1299           */
   1300          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHueAndSaturation( zclIncoming_t *pInMsg,
   1301                                                                                      zclLighting_AppCallbacks_t *pCBs )
   1302          {
   1303            if ( pCBs->pfnColorControl_EnhancedMoveToHueAndSaturation )
   1304            {
   1305              zclCCEnhancedMoveToHueAndSaturation_t cmd;
   1306          
   1307              cmd.enhancedHue = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1308              cmd.saturation = pInMsg->pData[2];
   1309              cmd.transitionTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
   1310          
   1311              if ( cmd.saturation > LIGHTING_COLOR_SAT_MAX )
   1312              {
   1313                return ( ZCL_STATUS_INVALID_VALUE );
   1314              }
   1315          
   1316              return ( pCBs->pfnColorControl_EnhancedMoveToHueAndSaturation( &cmd ) );
   1317            }
   1318          
   1319            return ( ZFailure );
   1320          }
   1321          
   1322          /*********************************************************************
   1323           * @fn      zclLighting_ProcessInCmd_ColorControl_ColorLoopSet
   1324           *
   1325           * @brief   Process in the received Color Loop Set Command.
   1326           *
   1327           * @param   pInMsg - pointer to the incoming message
   1328           * @param   pCBs - pointer to the application callbacks
   1329           *
   1330           * @return  ZStatus_t
   1331           */
   1332          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_ColorLoopSet( zclIncoming_t *pInMsg,
   1333                                                                     zclLighting_AppCallbacks_t *pCBs )
   1334          {
   1335            if ( pCBs->pfnColorControl_ColorLoopSet )
   1336            {
   1337              zclCCColorLoopSet_t cmd = {0};
   1338          
   1339              cmd.updateFlags.byte = pInMsg->pData[0];
   1340              cmd.action = pInMsg->pData[1];
   1341              cmd.direction = pInMsg->pData[2];
   1342              cmd.time = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
   1343              cmd.startHue = BUILD_UINT16( pInMsg->pData[5], pInMsg->pData[6] );
   1344          
   1345              return ( pCBs->pfnColorControl_ColorLoopSet( &cmd ) );
   1346            }
   1347          
   1348            return ( ZFailure );
   1349          }
   1350          #endif // ZCL_LIGHT_LINK_ENHANCE
   1351          
   1352          /****************************************************************************
   1353          ****************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     29   zclLighting_ColorControl_Send_MoveColorCmd
        0     25   -> zcl_SendCommand
      1     27   zclLighting_ColorControl_Send_MoveHueCmd
        0     25   -> zcl_SendCommand
      1     27   zclLighting_ColorControl_Send_MoveSaturationCmd
        0     25   -> zcl_SendCommand
      1     33   zclLighting_ColorControl_Send_MoveToColorCmd
        0     27   -> zcl_SendCommand
      1     29   zclLighting_ColorControl_Send_MoveToColorTemperatureCmd
        0     25   -> zcl_SendCommand
      1     31   zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd
        0     27   -> zcl_SendCommand
      1     31   zclLighting_ColorControl_Send_MoveToHueCmd
        0     27   -> zcl_SendCommand
      1     29   zclLighting_ColorControl_Send_MoveToSaturationCmd
        0     26   -> zcl_SendCommand
      1     33   zclLighting_ColorControl_Send_StepColorCmd
        0     27   -> zcl_SendCommand
      1     29   zclLighting_ColorControl_Send_StepHueCmd
        0     26   -> zcl_SendCommand
      1     29   zclLighting_ColorControl_Send_StepSaturationCmd
        0     26   -> zcl_SendCommand
      0      9   zclLighting_HdlIncoming
        0      9   -> zclLighting_ProcessInColorControlCmds
      0     39   zclLighting_ProcessInCmd_ColorControl_MoveToColor
      1     33   zclLighting_ProcessInColorControlCmds
        0     24   -> zclLighting_ProcessInCmd_ColorControl_MoveToColor
      1     14   zclLighting_RegisterCmdCallbacks
        0     12   -> osal_mem_alloc
        0     14   -> zcl_registerPlugin


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  ??Subroutine40_0
       5  ??Subroutine41_0
      12  ??Subroutine42_0
       8  ??Subroutine43_0
      12  ??Subroutine44_0
       5  ??Subroutine45_0
       8  ??Subroutine46_0
      10  ??Subroutine47_0
       9  ??Subroutine48_0
       8  ??Subroutine49_0
      21  ?Subroutine0
      21  ?Subroutine1
       6  ?Subroutine10
       6  ?Subroutine11
       5  ?Subroutine12
       5  ?Subroutine13
      10  ?Subroutine14
      10  ?Subroutine15
       6  ?Subroutine16
      10  ?Subroutine17
       5  ?Subroutine18
       6  ?Subroutine19
       3  ?Subroutine2
       4  ?Subroutine20
       4  ?Subroutine21
      10  ?Subroutine22
       4  ?Subroutine23
       4  ?Subroutine24
       1  ?Subroutine25
       1  ?Subroutine26
       4  ?Subroutine27
      13  ?Subroutine28
      11  ?Subroutine29
      24  ?Subroutine3
      19  ?Subroutine30
      10  ?Subroutine31
       4  ?Subroutine32
       4  ?Subroutine33
       6  ?Subroutine34
       6  ?Subroutine35
      12  ?Subroutine36
      10  ?Subroutine37
       9  ?Subroutine38
      13  ?Subroutine39
      24  ?Subroutine4
      23  ?Subroutine5
      33  ?Subroutine6
       6  ?Subroutine7
       8  ?Subroutine8
      16  ?Subroutine9
       2  zclLightingCBs
       1  zclLightingPluginRegisted
     117  zclLighting_ColorControl_Send_MoveColorCmd
       6  zclLighting_ColorControl_Send_MoveColorCmd::?relay
      89  zclLighting_ColorControl_Send_MoveHueCmd
       6  zclLighting_ColorControl_Send_MoveHueCmd::?relay
      95  zclLighting_ColorControl_Send_MoveSaturationCmd
       6  zclLighting_ColorControl_Send_MoveSaturationCmd::?relay
     136  zclLighting_ColorControl_Send_MoveToColorCmd
       6  zclLighting_ColorControl_Send_MoveToColorCmd::?relay
     114  zclLighting_ColorControl_Send_MoveToColorTemperatureCmd
       6  zclLighting_ColorControl_Send_MoveToColorTemperatureCmd::?relay
     114  zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd
       6  zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd::?relay
     114  zclLighting_ColorControl_Send_MoveToHueCmd
       6  zclLighting_ColorControl_Send_MoveToHueCmd::?relay
     106  zclLighting_ColorControl_Send_MoveToSaturationCmd
       6  zclLighting_ColorControl_Send_MoveToSaturationCmd::?relay
     141  zclLighting_ColorControl_Send_StepColorCmd
       6  zclLighting_ColorControl_Send_StepColorCmd::?relay
     108  zclLighting_ColorControl_Send_StepHueCmd
       6  zclLighting_ColorControl_Send_StepHueCmd::?relay
     111  zclLighting_ColorControl_Send_StepSaturationCmd
       6  zclLighting_ColorControl_Send_StepSaturationCmd::?relay
     113  zclLighting_HdlIncoming
       6  zclLighting_HdlIncoming::?relay
     136  zclLighting_ProcessInCmd_ColorControl_MoveToColor
       6  zclLighting_ProcessInCmd_ColorControl_MoveToColor::?relay
     651  zclLighting_ProcessInColorControlCmds
       6  zclLighting_ProcessInColorControlCmds::?relay
     138  zclLighting_RegisterCmdCallbacks
       6  zclLighting_RegisterCmdCallbacks::?relay

 
 2 760 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
     3 bytes in segment XDATA_Z
 
    90 bytes of CODE     memory
 2 760 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
