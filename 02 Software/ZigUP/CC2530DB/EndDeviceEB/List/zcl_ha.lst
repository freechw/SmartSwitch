###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               20/Nov/2021  20:16:46
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Source\zcl_ha.c
#    Command line       =  
#        -f C:\Users\tatbo\AppData\Local\Temp\EWCFEA.tmp ("D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Source\zcl_ha.c" -D
#        SECURE=1 -D HAL_KEY=FALSE -D HAL_LED=FALSE -D HAL_LCD=FALSE -D
#        HAL_UART=FALSE -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
#        -D MT_ZDO_FUNC -D LCD_SUPPORTED=FALSE -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D xZCL_EZMODE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D
#        xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D
#        ZCL_DOORLOCK -lC "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List"
#        -lA "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\" -I
#        "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\Source\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\Source\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List\zcl_ha.lst
#    Object file        =  
#        D:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\Obj\zcl_ha.r51
#
###############################################################################

D:\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Source\zcl_ha.c
      1          /**************************************************************************************************
      2            Filename:       zcl_ha.c
      3            Revised:        $Date: 2013-10-21 12:15:10 -0700 (Mon, 21 Oct 2013) $
      4            Revision:       $Revision: 35738 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          
     46          #include "zcl.h"
     47          #include "zcl_general.h"
     48          #include "zcl_closures.h"
     49          #include "zcl_HVAC.h"
     50          #include "zcl_ss.h"
     51          #include "zcl_ms.h"
     52          #include "zcl_lighting.h"
     53          #include "zcl_ha.h"
     54          
     55          /* HAL */
     56          #include "hal_lcd.h"
     57          
     58          /*********************************************************************
     59           * MACROS
     60           */
     61          
     62          /*********************************************************************
     63           * CONSTANTS
     64           */
     65          
     66          /*********************************************************************
     67           * TYPEDEFS
     68           */
     69          
     70          /*********************************************************************
     71           * GLOBAL VARIABLES
     72           */
     73          
     74          /*********************************************************************
     75           * EXTERNAL VARIABLES
     76           */
     77          
     78          /*********************************************************************
     79           * EXTERNAL FUNCTIONS
     80           */
     81          
     82          /*********************************************************************
     83           * LOCAL VARIABLES
     84           */
     85          
     86          /*********************************************************************
     87           * STATUS STRINGS
     88           */
     89          // NwkInfo displayed on line 1 once on the network
     90          // 0123456789012345
     91          // Zc: PPPP CH ADDR
     92          // Zr: PPPP CH ADDR
     93          // Zed:PPPP CH ADDR

   \                                 In  segment XDATA_ROM_C, align 1
     94          const char NwkInfoZcStr[]  = "ZC: ";
   \                     NwkInfoZcStr:
   \   000000   5A433A20     DB "ZC: "
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
     95          const char NwkInfoZrStr[]  = "ZR: ";
   \                     NwkInfoZrStr:
   \   000000   5A523A20     DB "ZR: "
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
     96          const char NwkInfoZedStr[] = "Zed:";
   \                     NwkInfoZedStr:
   \   000000   5A65643A     DB "Zed:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
     97          const char * const NwkInfoStrs[] = { NwkInfoZcStr, NwkInfoZrStr, NwkInfoZedStr };
   \                     NwkInfoStrs:
   \   000000   ....         DW NwkInfoZcStr
   \   000002   ....         DW NwkInfoZrStr
   \   000004   ....         DW NwkInfoZedStr
     98          
     99          /*********************************************************************
    100           * LOCAL FUNCTIONS
    101           */
    102          
    103          /*********************************************************************
    104           * @fn      zclHA_Init
    105           *
    106           * @brief   Register the Simple descriptor with the HA profile.
    107           *          This function also registers the profile's cluster
    108           *          conversion table.
    109           *
    110           * @param   simpleDesc - a pointer to a valid SimpleDescriptionFormat_t, must not be NULL.
    111           *
    112           * @return  none
    113           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    114          void zclHA_Init( SimpleDescriptionFormat_t *simpleDesc )
   \                     zclHA_Init:
    115          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    116            endPointDesc_t *epDesc;
    117          
    118            // Register the application's endpoint descriptor
    119            //  - This memory is allocated and never freed.
    120            epDesc = osal_mem_alloc( sizeof ( endPointDesc_t ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A06         MOV       R2,#0x6
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    121            if ( epDesc )
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   6022         JZ        ??zclHA_Init_0
    122            {
    123              // Fill out the endpoint description.
    124              epDesc->endPoint = simpleDesc->EndPoint;
   \   000014   8E82         MOV       DPL,R6
   \   000016   8F83         MOV       DPH,R7
   \   000018   E0           MOVX      A,@DPTR
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   F0           MOVX      @DPTR,A
    125              epDesc->task_id = &zcl_TaskID;   // all messages get sent to ZCL first
   \   00001E   A3           INC       DPTR
   \   00001F   74..         MOV       A,#zcl_TaskID & 0xff
   \   000021   F0           MOVX      @DPTR,A
   \   000022   A3           INC       DPTR
   \   000023   74..         MOV       A,#(zcl_TaskID >> 8) & 0xff
   \   000025   12....       LCALL     ?Subroutine3 & 0xFFFF
    126              epDesc->simpleDesc = simpleDesc;
   \                     ??CrossCallReturnLabel_5:
   \   000028   EE           MOV       A,R6
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   EF           MOV       A,R7
   \   00002C   12....       LCALL     ?Subroutine3 & 0xFFFF
    127              epDesc->latencyReq = noLatencyReqs;
   \                     ??CrossCallReturnLabel_6:
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   E4           CLR       A
   \   000032   F0           MOVX      @DPTR,A
    128          
    129              // Register the endpoint description with the AF
    130              afRegister( epDesc );
   \   000033                ; Setup parameters for call to function afRegister
   \   000033   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    131            }
    132          }
   \                     ??zclHA_Init_0:
   \   000036   7F02         MOV       R7,#0x2
   \   000038   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET
    133          
    134          /*********************************************************************
    135           * @fn      zclHA_isbit
    136           *
    137           * @brief   Returns TRUE if the index bit is set
    138           *
    139           * @param   pArray   - array with bits in it
    140           *          bitIndex - index into the array of bits
    141           *
    142           * @return  TRUE if index bit is set
    143           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    144          bool zclHA_isbit(uint8 *pArray, uint8 bitIndex)
   \                     zclHA_isbit:
    145          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FC           MOV       R4,A
    146            uint8 bit;
    147            bit = ( 1 << ( bitIndex & 0x7 ) );
    148            if( pArray[bitIndex >> 3] & bit )
   \   000006   13           RRC       A
   \   000007   13           RRC       A
   \   000008   13           RRC       A
   \   000009   541F         ANL       A,#0x1f
   \   00000B   F8           MOV       R0,A
   \   00000C   EA           MOV       A,R2
   \   00000D   28           ADD       A,R0
   \   00000E   F582         MOV       DPL,A
   \   000010   E4           CLR       A
   \   000011   3B           ADDC      A,R3
   \   000012   F583         MOV       DPH,A
   \   000014   E0           MOVX      A,@DPTR
   \   000015   C0E0         PUSH      A
   \   000017   7407         MOV       A,#0x7
   \   000019   5C           ANL       A,R4
   \   00001A   F8           MOV       R0,A
   \   00001B   D0E0         POP       A
   \   00001D   B80002       CJNE      R0,#0x0,??zclHA_isbit_0
   \   000020   8004         SJMP      ??zclHA_isbit_1
   \                     ??zclHA_isbit_0:
   \   000022   C3           CLR       C
   \   000023   13           RRC       A
   \   000024   D8FC         DJNZ      R0,??zclHA_isbit_0
   \                     ??zclHA_isbit_1:
   \   000026   A2E0         MOV       C,0xE0 /* A   */.0
   \   000028   5004         JNC       ??zclHA_isbit_2
    149              return TRUE;
   \   00002A   7901         MOV       R1,#0x1
   \   00002C   8002         SJMP      ??zclHA_isbit_3
    150            return FALSE;
   \                     ??zclHA_isbit_2:
   \   00002E   7900         MOV       R1,#0x0
   \                     ??zclHA_isbit_3:
   \   000030   80..         SJMP      ??Subroutine4_0
    151          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    152          
    153          /*********************************************************************
    154           * @fn      zclHA_setbit
    155           *
    156           * @brief   Sets a bit in a bit array
    157           *
    158           * @param   pArray   - array with bits in it
    159           *          bitIndex - index into the array of bits
    160           *
    161           * @return  none
    162           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    163          void zclHA_setbit(uint8 *pArray, uint8 bitIndex)
   \                     zclHA_setbit:
    164          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    165            uint8 bit;
    166            bit = ( 1 << ( bitIndex & 0x7 ) );
    167            pArray[bitIndex >> 3] |= bit;
   \   000004   7407         MOV       A,#0x7
   \   000006   59           ANL       A,R1
   \   000007   F8           MOV       R0,A
   \   000008   7401         MOV       A,#0x1
   \   00000A   B80002       CJNE      R0,#0x0,??zclHA_setbit_0
   \   00000D   8004         SJMP      ??zclHA_setbit_1
   \                     ??zclHA_setbit_0:
   \   00000F   C3           CLR       C
   \   000010   33           RLC       A
   \   000011   D8FC         DJNZ      R0,??zclHA_setbit_0
   \                     ??zclHA_setbit_1:
   \   000013   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000016   48           ORL       A,R0
   \   000017                REQUIRE ?Subroutine0
   \   000017                ; // Fall through to label ?Subroutine0
    168          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine4_0
   \   000001                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F8           MOV       R0,A
   \   000001   E9           MOV       A,R1
   \   000002   13           RRC       A
   \   000003   13           RRC       A
   \   000004   13           RRC       A
   \   000005   541F         ANL       A,#0x1f
   \   000007   FC           MOV       R4,A
   \   000008   EA           MOV       A,R2
   \   000009   2C           ADD       A,R4
   \   00000A   F582         MOV       DPL,A
   \   00000C   E4           CLR       A
   \   00000D   3B           ADDC      A,R3
   \   00000E   F583         MOV       DPH,A
   \   000010   E0           MOVX      A,@DPTR
   \   000011   22           RET
    169          
    170          /*********************************************************************
    171           * @fn      zclHA_clearbit
    172           *
    173           * @brief   clears a bit in a bit array
    174           *
    175           * @param   pArray   - array with bits in it
    176           *          bitIndex - index into the array of bits
    177           *
    178           * @return  none
    179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    180          void zclHA_clearbit(uint8 *pArray, uint8 bitIndex)
   \                     zclHA_clearbit:
    181          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    182            uint8 bit;
    183            bit = ( 1 << ( bitIndex & 0x7 ) );
    184            pArray[bitIndex >> 3] &= (~(unsigned)bit);
   \   000004   7407         MOV       A,#0x7
   \   000006   59           ANL       A,R1
   \   000007   F8           MOV       R0,A
   \   000008   7401         MOV       A,#0x1
   \   00000A   B80002       CJNE      R0,#0x0,??zclHA_clearbit_0
   \   00000D   8004         SJMP      ??zclHA_clearbit_1
   \                     ??zclHA_clearbit_0:
   \   00000F   C3           CLR       C
   \   000010   33           RLC       A
   \   000011   D8FC         DJNZ      R0,??zclHA_clearbit_0
   \                     ??zclHA_clearbit_1:
   \   000013   F4           CPL       A
   \   000014   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000017   58           ANL       A,R0
   \   000018   80..         SJMP      ?Subroutine0
    185          }
    186          
    187          /*********************************************************************
    188           * @fn      zclHA_uint16toa
    189           *
    190           * @brief   Converts from a uint16 to ascii hex string.
    191           *          The # will be exactly 4 hex digits (e.g. 0x0000 or 0x1E3F).
    192           *          NULL terminates the string.
    193           *
    194           * @param   u - Number to be converted
    195           *          string - pointer to coverted string
    196           *
    197           * @return  none
    198           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    199          void zclHA_uint16toa(uint16 u, char *string)
   \                     zclHA_uint16toa:
    200          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    201            // add preceding zeros
    202            if ( u < 0x1000 )
   \   000005   C3           CLR       C
   \   000006   EB           MOV       A,R3
   \   000007   9410         SUBB      A,#0x10
   \   000009   5003         JNC       ??CrossCallReturnLabel_2
    203            {
    204              *string++ = '0';
   \   00000B   12....       LCALL     ?Subroutine2 & 0xFFFF
    205            }
    206          
    207            if ( u < 0x0100 )
   \                     ??CrossCallReturnLabel_2:
   \   00000E   C3           CLR       C
   \   00000F   EB           MOV       A,R3
   \   000010   9401         SUBB      A,#0x1
   \   000012   5003         JNC       ??CrossCallReturnLabel_3
    208            {
    209              *string++ = '0';
   \   000014   12....       LCALL     ?Subroutine2 & 0xFFFF
    210            }
    211          
    212            if ( u < 0x0010 )
   \                     ??CrossCallReturnLabel_3:
   \   000017   C3           CLR       C
   \   000018   EA           MOV       A,R2
   \   000019   9410         SUBB      A,#0x10
   \   00001B   EB           MOV       A,R3
   \   00001C   9400         SUBB      A,#0x0
   \   00001E   5003         JNC       ??CrossCallReturnLabel_4
    213            {
    214              *string++ = '0';
   \   000020   12....       LCALL     ?Subroutine2 & 0xFFFF
    215            }
    216          
    217            _ltoa((unsigned long)u, (unsigned char *)string, 16);
   \                     ??CrossCallReturnLabel_4:
   \   000023                ; Setup parameters for call to function _ltoa
   \   000023   8C..         MOV       ?V0,R4
   \   000025   8D..         MOV       ?V1,R5
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002C   7910         MOV       R1,#0x10
   \   00002E   E4           CLR       A
   \   00002F   FC           MOV       R4,A
   \   000030   FD           MOV       R5,A
   \   000031   12....       LCALL     `??_ltoa::?relay`; Banked call to: _ltoa
   \   000034   7402         MOV       A,#0x2
   \   000036   12....       LCALL     ?DEALLOC_XSTACK8
    218          }
   \   000039   7F04         MOV       R7,#0x4
   \   00003B   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   8C82         MOV       DPL,R4
   \   000002   8D83         MOV       DPH,R5
   \   000004   7430         MOV       A,#0x30
   \   000006   F0           MOVX      @DPTR,A
   \   000007   A3           INC       DPTR
   \   000008   AC82         MOV       R4,DPL
   \   00000A   AD83         MOV       R5,DPH
   \   00000C   22           RET
    219          
    220          /*********************************************************************
    221           * @fn      zclHA_uint8toa
    222           *
    223           * @brief   Converts from a uint8 to ascii decimal string.
    224           *          The # will be exactly 3 digits (e.g. "123", " 64", "  0"), preceded by spaces.
    225           *          No null terminator.
    226           *
    227           * @param   b - Byte to be converted
    228           *          string - pointer to coverted string
    229           *
    230           * @return  none
    231           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    232          void zclHA_uint8toa(uint8 b, char *string)
   \                     zclHA_uint8toa:
    233          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    234            // write the level (up to 3 digits, pre-padded with spaces)
    235            string[0] = string[1] = string[2] = '0';
   \   000007   EA           MOV       A,R2
   \   000008   2402         ADD       A,#0x2
   \   00000A   F8           MOV       R0,A
   \   00000B   E4           CLR       A
   \   00000C   3B           ADDC      A,R3
   \   00000D   F9           MOV       R1,A
   \   00000E   E8           MOV       A,R0
   \   00000F   FC           MOV       R4,A
   \   000010   E9           MOV       A,R1
   \   000011   FD           MOV       R5,A
   \   000012   8C82         MOV       DPL,R4
   \   000014   8D83         MOV       DPH,R5
   \   000016   7430         MOV       A,#0x30
   \   000018   F0           MOVX      @DPTR,A
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   A3           INC       DPTR
   \   00001E   A882         MOV       R0,DPL
   \   000020   A983         MOV       R1,DPH
   \   000022   F0           MOVX      @DPTR,A
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   F0           MOVX      @DPTR,A
    236            string[2] = '0' + (b % 10);  // 1s
   \   000028   EE           MOV       A,R6
   \   000029   75F00A       MOV       B,#0xa
   \   00002C   84           DIV       AB
   \   00002D   E5F0         MOV       A,B
   \   00002F   2430         ADD       A,#0x30
   \   000031   8C82         MOV       DPL,R4
   \   000033   8D83         MOV       DPH,R5
   \   000035   F0           MOVX      @DPTR,A
    237            b = b / 10;
   \   000036   75F00A       MOV       B,#0xa
   \   000039   EE           MOV       A,R6
   \   00003A   84           DIV       AB
   \   00003B   FE           MOV       R6,A
    238            if( b )
   \   00003C   6022         JZ        ??zclHA_uint8toa_0
    239            {
    240              string[1] = '0' + (b % 10);  // 10s
   \   00003E   75F00A       MOV       B,#0xa
   \   000041   84           DIV       AB
   \   000042   E5F0         MOV       A,B
   \   000044   2430         ADD       A,#0x30
   \   000046   8882         MOV       DPL,R0
   \   000048   8983         MOV       DPH,R1
   \   00004A   F0           MOVX      @DPTR,A
    241              b = b / 10;
   \   00004B   75F00A       MOV       B,#0xa
   \   00004E   EE           MOV       A,R6
   \   00004F   84           DIV       AB
   \   000050   FE           MOV       R6,A
    242            }
    243            if( b )
   \   000051   600D         JZ        ??zclHA_uint8toa_0
    244            {
    245             string[0] = '0' + (b % 10);  // 100s
   \   000053   75F00A       MOV       B,#0xa
   \   000056   84           DIV       AB
   \   000057   E5F0         MOV       A,B
   \   000059   2430         ADD       A,#0x30
   \   00005B   8A82         MOV       DPL,R2
   \   00005D   8B83         MOV       DPH,R3
   \   00005F   F0           MOVX      @DPTR,A
    246            }
    247          }
   \                     ??zclHA_uint8toa_0:
   \   000060   7F01         MOV       R7,#0x1
   \   000062   02....       LJMP      ?BANKED_LEAVE_XDATA
    248          
    249          /*********************************************************************
    250           * @fn      zclHA_LcdStatusLine1
    251           *
    252           * @brief   Display LCD line 1 with network status
    253           *          only call after on network
    254           *          ZC: PPPP CH ADDR
    255           *          ZR: PPPP CH ADDR
    256           *          ZE: PPPP CH ADDR
    257           *
    258           * @param   kind (0=ZC, 1=ZR, 2=ZED)
    259           *
    260           * @return  none
    261           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    262          void zclHA_LcdStatusLine1( uint8 kind )
   \                     zclHA_LcdStatusLine1:
    263          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    264          #if defined ( LCD_SUPPORTED )
    265            char szLine[20];
    266          
    267            // copy in what node type it is
    268            if ( kind > ZCL_HA_DEVICE_END_DEVICE )
   \   00000C   C3           CLR       C
   \   00000D   9403         SUBB      A,#0x3
   \   00000F   4003         JC        $+5
   \   000011   02....       LJMP      ??zclHA_LcdStatusLine1_0 & 0xFFFF
    269            {
    270              return;
    271            }
    272          
    273            // ZE: PANx CH ADDR
    274            osal_memcpy( szLine, NwkInfoStrs[kind], 4 );
   \   000014                ; Setup parameters for call to function osal_memcpy
   \   000014   EE           MOV       A,R6
   \   000015   29           ADD       A,R1
   \   000016   F8           MOV       R0,A
   \   000017   E4           CLR       A
   \   000018   33           RLC       A
   \   000019   F9           MOV       R1,A
   \   00001A   74..         MOV       A,#NwkInfoStrs & 0xff
   \   00001C   28           ADD       A,R0
   \   00001D   F582         MOV       DPL,A
   \   00001F   74..         MOV       A,#(NwkInfoStrs >> 8) & 0xff
   \   000021   39           ADDC      A,R1
   \   000022   F583         MOV       DPH,A
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F5..         MOV       ?V0,A
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F5..         MOV       ?V1,A
   \   00002B   75..00       MOV       ?V2,#0x0
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000033   7C04         MOV       R4,#0x4
   \   000035   7D00         MOV       R5,#0x0
   \   000037   7403         MOV       A,#0x3
   \   000039   12....       LCALL     ?XSTACK_DISP101_8
   \   00003C   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003F   7403         MOV       A,#0x3
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
    275            zclHA_uint16toa( _NIB.nwkPanId, &szLine[4] );
   \   000044                ; Setup parameters for call to function zclHA_uint16toa
   \   000044   7404         MOV       A,#0x4
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   AC82         MOV       R4,DPL
   \   00004B   AD83         MOV       R5,DPH
   \   00004D   90....       MOV       DPTR,#_NIB + 33
   \   000050   E0           MOVX      A,@DPTR
   \   000051   FA           MOV       R2,A
   \   000052   A3           INC       DPTR
   \   000053   E0           MOVX      A,@DPTR
   \   000054   FB           MOV       R3,A
   \   000055   12....       LCALL     `??zclHA_uint16toa::?relay`; Banked call to: zclHA_uint16toa
    276            szLine[8] = ' ';
   \   000058   7408         MOV       A,#0x8
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   7420         MOV       A,#0x20
   \   00005F   F0           MOVX      @DPTR,A
    277          
    278            _ltoa( _NIB.nwkLogicalChannel, (void *)(&szLine[9]), 10 );
   \   000060                ; Setup parameters for call to function _ltoa
   \   000060   7409         MOV       A,#0x9
   \   000062   12....       LCALL     ?XSTACK_DISP0_8
   \   000065   8582..       MOV       ?V0,DPL
   \   000068   8583..       MOV       ?V1,DPH
   \   00006B   78..         MOV       R0,#?V0
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   790A         MOV       R1,#0xa
   \   000072   90....       MOV       DPTR,#_NIB + 22
   \   000075   E0           MOVX      A,@DPTR
   \   000076   FA           MOV       R2,A
   \   000077   E4           CLR       A
   \   000078   FB           MOV       R3,A
   \   000079   FC           MOV       R4,A
   \   00007A   FD           MOV       R5,A
   \   00007B   12....       LCALL     `??_ltoa::?relay`; Banked call to: _ltoa
   \   00007E   7402         MOV       A,#0x2
   \   000080   12....       LCALL     ?DEALLOC_XSTACK8
    279            szLine[11] = ' ';
   \   000083   740B         MOV       A,#0xb
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   7420         MOV       A,#0x20
   \   00008A   F0           MOVX      @DPTR,A
    280          
    281            zclHA_uint16toa( _NIB.nwkDevAddress, &szLine[12] );
   \   00008B                ; Setup parameters for call to function zclHA_uint16toa
   \   00008B   740C         MOV       A,#0xc
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   AC82         MOV       R4,DPL
   \   000092   AD83         MOV       R5,DPH
   \   000094   90....       MOV       DPTR,#_NIB + 20
   \   000097   E0           MOVX      A,@DPTR
   \   000098   FA           MOV       R2,A
   \   000099   A3           INC       DPTR
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   FB           MOV       R3,A
   \   00009C   12....       LCALL     `??zclHA_uint16toa::?relay`; Banked call to: zclHA_uint16toa
    282            HalLcdWriteString( (char*)szLine, HAL_LCD_LINE_1 );
   \   00009F                ; Setup parameters for call to function HalLcdWriteString
   \   00009F   7901         MOV       R1,#0x1
   \   0000A1   AA..         MOV       R2,?XSP + 0
   \   0000A3   AB..         MOV       R3,?XSP + 1
   \   0000A5   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    283          #endif
    284          }
   \                     ??zclHA_LcdStatusLine1_0:
   \   0000A8   7414         MOV       A,#0x14
   \   0000AA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AD   7F03         MOV       R7,#0x3
   \   0000AF   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclHA_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclHA_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclHA_isbit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclHA_isbit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclHA_setbit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclHA_setbit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclHA_clearbit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclHA_clearbit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclHA_uint16toa::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclHA_uint16toa

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclHA_uint8toa::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclHA_uint8toa

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclHA_LcdStatusLine1::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclHA_LcdStatusLine1
    285          
    286          /*********************************************************************
    287          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     10   zclHA_Init
        0     10   -> afRegister
        0     10   -> osal_mem_alloc
      0     34   zclHA_LcdStatusLine1
        0     31   -> HalLcdWriteString
        0     33   -> _ltoa
        0     34   -> osal_memcpy
        0     31   -> zclHA_uint16toa
      3      0   zclHA_clearbit
      3      0   zclHA_isbit
      3      0   zclHA_setbit
      0     45   zclHA_uint16toa
        0     14   -> _ltoa
      1      9   zclHA_uint8toa


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ??Subroutine4_0
       1  ?Subroutine0
      18  ?Subroutine1
      13  ?Subroutine2
       9  ?Subroutine3
       6  NwkInfoStrs
       5  NwkInfoZcStr
       5  NwkInfoZedStr
       5  NwkInfoZrStr
      59  zclHA_Init
       6  zclHA_Init::?relay
     178  zclHA_LcdStatusLine1
       6  zclHA_LcdStatusLine1::?relay
      26  zclHA_clearbit
       6  zclHA_clearbit::?relay
      50  zclHA_isbit
       6  zclHA_isbit::?relay
      23  zclHA_setbit
       6  zclHA_setbit::?relay
      62  zclHA_uint16toa
       6  zclHA_uint16toa::?relay
     101  zclHA_uint8toa
       6  zclHA_uint8toa::?relay

 
 547 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
  21 bytes in segment XDATA_ROM_C
 
  42 bytes of CODE     memory
  21 bytes of CONST    memory
 547 bytes of HUGECODE memory

Errors: none
Warnings: none
