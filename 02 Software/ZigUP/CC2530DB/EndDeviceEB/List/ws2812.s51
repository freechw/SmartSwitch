///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              20/Nov/2021  20:16:41
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\Source\ws2812.c
//    Command line       =  
//        -f C:\Users\tatbo\AppData\Local\Temp\EWC005.tmp ("D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\Source\ws2812.c" -D
//        SECURE=1 -D HAL_KEY=FALSE -D HAL_LED=FALSE -D HAL_LCD=FALSE -D
//        HAL_UART=FALSE -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
//        -D MT_ZDO_FUNC -D LCD_SUPPORTED=FALSE -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D xZCL_EZMODE -D ZCL_BASIC -D
//        ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D
//        xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D
//        ZCL_DOORLOCK -lC "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List"
//        -lA "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\" -I
//        "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\Source\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\Source\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        D:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\CC2530DB\EndDeviceEB\List\ws2812.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ws2812

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?SS_SHR
        EXTERN ?S_SHL
        EXTERN __INIT_XDATA_Z

        PUBLIC `??WS2812_SendLED::?relay`
        FUNCTION `??WS2812_SendLED::?relay`,0203H
        PUBLIC `??WS2812_StoreBit::?relay`
        FUNCTION `??WS2812_StoreBit::?relay`,0203H
        PUBWEAK P1SEL
        PUBWEAK U1DBUF
        PUBLIC WS2812_SendLED
        FUNCTION WS2812_SendLED,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC WS2812_StoreBit
        FUNCTION WS2812_StoreBit,080203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC WS2812_bit
        PUBLIC WS2812_buffer
        PUBLIC WS2812_byte
        PUBWEAK _A_U1CSR
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
WS2812_SendLED      SYMBOL "WS2812_SendLED"
`??WS2812_SendLED::?relay` SYMBOL "?relay", WS2812_SendLED
WS2812_StoreBit     SYMBOL "WS2812_StoreBit"
`??WS2812_StoreBit::?relay` SYMBOL "?relay", WS2812_StoreBit

// D:\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\ZigUP\Source\ws2812.c
//    1 #include "ZComDef.h"
//    2 #include "onboard.h"

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f8H
// union <unnamed> volatile __sfr _A_U1CSR
_A_U1CSR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f9H
// unsigned char volatile __sfr U1DBUF
U1DBUF:
        DATA8
        DS 1
//    3 #include "ws2812.h"
//    4 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    5 uint8 WS2812_buffer[WS2812_buffersize];
WS2812_buffer:
        DS 90
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    6 uint8 WS2812_bit=0;
WS2812_bit:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//    7 uint16 WS2812_byte=0;
WS2812_byte:
        DS 2
        REQUIRE __INIT_XDATA_Z
//    8 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//    9 void WS2812_StoreBit(uint8 bit)
WS2812_StoreBit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function WS2812_StoreBit
        CODE
//   10 {
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   11   // store bit (only the 1 bits)
//   12   if (bit) WS2812_buffer[WS2812_byte] |= 1 << WS2812_bit;
        MOV       A,R1
        JZ        ??WS2812_StoreBit_0
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       DPTR,#WS2812_bit
        MOVX      A,@DPTR
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       DPTR,#WS2812_byte
        MOVX      A,@DPTR
        ADD       A,#WS2812_buffer & 0xff
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#(WS2812_buffer >> 8) & 0xff
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ORL       A,?V0
        MOVX      @DPTR,A
//   13   WS2812_bit++;
??WS2812_StoreBit_0:
        MOV       DPTR,#WS2812_bit
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//   14   
//   15   // 8 bits per byte...
//   16   if (WS2812_bit > 7)
        CLR       C
        SUBB      A,#0x8
        JC        ??WS2812_StoreBit_1
//   17   {
//   18     WS2812_bit = 0;
        CLR       A
        MOVX      @DPTR,A
//   19     WS2812_byte++;
        MOV       DPTR,#WS2812_byte
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOVX      @DPTR,A
//   20   }
//   21 }
??WS2812_StoreBit_1:
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//   22 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   23 void WS2812_SendLED(uint8 red, uint8 green, uint8 blue)
WS2812_SendLED:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function WS2812_SendLED
        CODE
//   24 {
        FUNCALL WS2812_SendLED, WS2812_StoreBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WS2812_SendLED, WS2812_StoreBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WS2812_SendLED, WS2812_StoreBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WS2812_SendLED, WS2812_StoreBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WS2812_SendLED, WS2812_StoreBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WS2812_SendLED, WS2812_StoreBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WS2812_SendLED, WS2812_StoreBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WS2812_SendLED, WS2812_StoreBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WS2812_SendLED, WS2812_StoreBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WS2812_SendLED, WS2812_StoreBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WS2812_SendLED, WS2812_StoreBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WS2812_SendLED, WS2812_StoreBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WS2812_SendLED, WS2812_StoreBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WS2812_SendLED, WS2812_StoreBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WS2812_SendLED, WS2812_StoreBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WS2812_SendLED, WS2812_StoreBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WS2812_SendLED, WS2812_StoreBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WS2812_SendLED, WS2812_StoreBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       ?V2,R3
//   25   P1SEL |= BV(6); // LED = Peripheral
        ORL       0xf4,#0x40
//   26   
//   27   WS2812_bit = 0;
        MOV       DPTR,#WS2812_bit
        CLR       A
        MOVX      @DPTR,A
//   28   WS2812_byte = 0;
        MOV       DPTR,#WS2812_byte
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//   29   
//   30   // delete buffer
//   31   for (uint16 i=0; i<WS2812_buffersize; i++) WS2812_buffer[i] = 0;
        MOV       DPTR,#WS2812_buffer
        MOV       R0,#0x5a
??WS2812_SendLED_0:
        MOVX      @DPTR,A
        INC       DPTR
        DJNZ      R0,??WS2812_SendLED_0
//   32   
//   33   uint8 i,j;
//   34   
//   35   for (j=0; j<10; j++)  // send identical data 10 times for up to 10 LEDs in a row
        MOV       R7,#0xa
//   36   {
//   37     for (i=8; i; i--)
??WS2812_SendLED_1:
        MOV       R6,#0x8
//   38     {
//   39       if ((green >> (i-1)) & 1)
??WS2812_SendLED_2:
        MOV       A,?V1
        MOV       ?V4,A
        MOV       ?V5,#0x0
        MOV       A,#-0x1
        ADD       A,R6
        MOV       R0,#?V4
        LCALL     ?SS_SHR
        MOV       A,?V4
        MOV       C,0xE0 /* A   */.0
        MOV       R1,#0x1
        JNC       ??WS2812_SendLED_3
//   40       {
//   41         WS2812_StoreBit(1);
        ; Setup parameters for call to function WS2812_StoreBit
        LCALL     `??WS2812_StoreBit::?relay`; Banked call to: WS2812_StoreBit
//   42         WS2812_StoreBit(1);
        ; Setup parameters for call to function WS2812_StoreBit
        MOV       R1,#0x1
        SJMP      ??WS2812_SendLED_4
//   43         WS2812_StoreBit(0);
//   44       }
//   45       else
//   46       {
//   47         WS2812_StoreBit(1);
??WS2812_SendLED_3:
        ; Setup parameters for call to function WS2812_StoreBit
        LCALL     `??WS2812_StoreBit::?relay`; Banked call to: WS2812_StoreBit
//   48         WS2812_StoreBit(0);
        ; Setup parameters for call to function WS2812_StoreBit
        MOV       R1,#0x0
??WS2812_SendLED_4:
        LCALL     `??WS2812_StoreBit::?relay`; Banked call to: WS2812_StoreBit
//   49         WS2812_StoreBit(0);
        ; Setup parameters for call to function WS2812_StoreBit
        MOV       R1,#0x0
        LCALL     `??WS2812_StoreBit::?relay`; Banked call to: WS2812_StoreBit
//   50       }
//   51     }
        DEC       R6
        MOV       A,R6
        JNZ       ??WS2812_SendLED_2
//   52     for (i=8; i; i--)
        MOV       R6,#0x8
//   53     {
//   54       if ((red >> (i-1)) & 1)
??WS2812_SendLED_5:
        MOV       A,?V0
        MOV       ?V4,A
        MOV       ?V5,#0x0
        MOV       A,#-0x1
        ADD       A,R6
        MOV       R0,#?V4
        LCALL     ?SS_SHR
        MOV       A,?V4
        MOV       C,0xE0 /* A   */.0
        MOV       R1,#0x1
        JNC       ??WS2812_SendLED_6
//   55       {
//   56         WS2812_StoreBit(1);
        ; Setup parameters for call to function WS2812_StoreBit
        LCALL     `??WS2812_StoreBit::?relay`; Banked call to: WS2812_StoreBit
//   57         WS2812_StoreBit(1);
        ; Setup parameters for call to function WS2812_StoreBit
        MOV       R1,#0x1
        SJMP      ??WS2812_SendLED_7
//   58         WS2812_StoreBit(0);
//   59       }
//   60       else
//   61       {
//   62         WS2812_StoreBit(1);
??WS2812_SendLED_6:
        ; Setup parameters for call to function WS2812_StoreBit
        LCALL     `??WS2812_StoreBit::?relay`; Banked call to: WS2812_StoreBit
//   63         WS2812_StoreBit(0);
        ; Setup parameters for call to function WS2812_StoreBit
        MOV       R1,#0x0
??WS2812_SendLED_7:
        LCALL     `??WS2812_StoreBit::?relay`; Banked call to: WS2812_StoreBit
//   64         WS2812_StoreBit(0);
        ; Setup parameters for call to function WS2812_StoreBit
        MOV       R1,#0x0
        LCALL     `??WS2812_StoreBit::?relay`; Banked call to: WS2812_StoreBit
//   65       }
//   66     }
        DEC       R6
        MOV       A,R6
        JNZ       ??WS2812_SendLED_5
//   67     for (i=8; i; i--)
        MOV       R6,#0x8
//   68     {
//   69       if ((blue >> (i-1)) & 1)
??WS2812_SendLED_8:
        MOV       A,?V2
        MOV       ?V4,A
        MOV       ?V5,#0x0
        MOV       A,#-0x1
        ADD       A,R6
        MOV       R0,#?V4
        LCALL     ?SS_SHR
        MOV       A,?V4
        MOV       C,0xE0 /* A   */.0
        MOV       R1,#0x1
        JNC       ??WS2812_SendLED_9
//   70       {
//   71         WS2812_StoreBit(1);
        ; Setup parameters for call to function WS2812_StoreBit
        LCALL     `??WS2812_StoreBit::?relay`; Banked call to: WS2812_StoreBit
//   72         WS2812_StoreBit(1);
        ; Setup parameters for call to function WS2812_StoreBit
        MOV       R1,#0x1
        SJMP      ??WS2812_SendLED_10
//   73         WS2812_StoreBit(0);
//   74       }
//   75       else
//   76       {
//   77         WS2812_StoreBit(1);
??WS2812_SendLED_9:
        ; Setup parameters for call to function WS2812_StoreBit
        LCALL     `??WS2812_StoreBit::?relay`; Banked call to: WS2812_StoreBit
//   78         WS2812_StoreBit(0);
        ; Setup parameters for call to function WS2812_StoreBit
        MOV       R1,#0x0
??WS2812_SendLED_10:
        LCALL     `??WS2812_StoreBit::?relay`; Banked call to: WS2812_StoreBit
//   79         WS2812_StoreBit(0);
        ; Setup parameters for call to function WS2812_StoreBit
        MOV       R1,#0x0
        LCALL     `??WS2812_StoreBit::?relay`; Banked call to: WS2812_StoreBit
//   80       }
//   81     }        
        DEC       R6
        MOV       A,R6
        JNZ       ??WS2812_SendLED_8
//   82   }
        DEC       R7
        MOV       A,R7
        JZ        $+5
        LJMP      ??WS2812_SendLED_1 & 0xFFFF
//   83   
//   84   // SPI method - a little bit jittery, but LED-Stripes seem to be okay with it
//   85   for (uint16 j=0; j<WS2812_buffersize; j++)
        MOV       R0,#0x0
        MOV       R1,#0x0
//   86   {
//   87     U1DBUF = WS2812_buffer[j];
??WS2812_SendLED_11:
        MOV       A,#WS2812_buffer & 0xff
        ADD       A,R0
        MOV       DPL,A
        MOV       A,#(WS2812_buffer >> 8) & 0xff
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       0xf9,A
//   88     while((U1CSR & (1<<0)));      // wait until byte is sent
??WS2812_SendLED_12:
        MOV       C,0xf8.0
        JC        ??WS2812_SendLED_12
//   89   }
        INC       R0
        MOV       A,R0
        JNZ       ??WS2812_SendLED_13
        INC       R1
??WS2812_SendLED_13:
        CLR       C
        SUBB      A,#0x5a
        MOV       A,R1
        SUBB      A,#0x0
        JC        ??WS2812_SendLED_11
//   90   
//   91   /*        
//   92   // DMA method - slower, timing broken
//   93   
//   94   uint8 DMACONFIG[8];
//   95   
//   96   // DMA source address
//   97   DMACONFIG[0] = (uint16)(&WS2812_buffer) >> 8;
//   98   DMACONFIG[1] = (uint16)(&WS2812_buffer) & 0xff;
//   99   
//  100   // DMA destination address
//  101   DMACONFIG[2] = 0x70;
//  102   DMACONFIG[3] = 0xf9;    // Address of U1DBUF
//  103   
//  104   // DMA length
//  105   DMACONFIG[4] = WS2812_buffersize;
//  106   DMACONFIG[5] = WS2812_buffersize;
//  107   
//  108   // DMA block transfer, no trigger
//  109   DMACONFIG[6] = b00100000;
//  110   
//  111   // DMA address increment for source only, high priority
//  112   DMACONFIG[7] = b01000010;
//  113   
//  114   DMA0CFGH = (uint16)(&DMACONFIG) >> 8;    // DMA Channel-0 Configuration Address High Byte
//  115   DMA0CFGL = (uint16)(&DMACONFIG) & 0xff;  // DMA Channel-0 Configuration Address Low Byte
//  116   
//  117   DMAARM = b00000001;     // DMA Arm channel 0
//  118   DMAREQ = b00000001;     // DMA transfer request channel 0
//  119   */     
//  120 }
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
        REQUIRE P1SEL
        REQUIRE U1DBUF
        REQUIRE _A_U1CSR

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??WS2812_StoreBit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    WS2812_StoreBit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??WS2812_SendLED::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    WS2812_SendLED

        END
// 
// 302 bytes in segment BANKED_CODE
//  12 bytes in segment BANK_RELAYS
//   3 bytes in segment SFR_AN
//  93 bytes in segment XDATA_Z
// 
//  12 bytes of CODE     memory
//   0 bytes of DATA     memory (+ 3 bytes shared)
// 302 bytes of HUGECODE memory
//  93 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
